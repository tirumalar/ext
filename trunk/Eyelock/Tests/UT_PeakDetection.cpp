#ifdef UNITTEST

#include <tut/tut.hpp>

#include <stdio.h>
#include <stdlib.h>
#include "NanoFocusSpecularityBasedSpoofDetector.h"
#include <cxcore.h>

typedef std::multimap<float, int > MapType;
typedef struct TwoWord{
	float first;
	int second;
};

namespace tut
{
	struct PeakDetectorData
	{
		NanoFocusSpecularityBasedSpoofDetector *m_detector;


		PeakDetectorData(): m_detector(0)
		{ 
			init();
		}
		~PeakDetectorData() { term(); }

		void init()
		{
			m_detector = new NanoFocusSpecularityBasedSpoofDetector();
			m_detector->SetSpecularityValue(230);
		}

		void term()
		{
			if(m_detector)	delete m_detector; m_detector = 0;

		}

	};

	typedef	test_group<PeakDetectorData> tg;
	typedef tg::object testobject;
}

namespace {
	tut::tg test_group("Peak Detection TESTS");
}

namespace tut 
{
	template<>
	template<>
	void testobject::test<3>()
	{
		set_test_name("Nano Focus find peak 3");
		float temp[259]={0};
		float hist[259]={
			   1.69,   2.25,   3.00,   4.00,  30.00, 114.00, 286.00, 329.00, 220.00, 122.00,  61.00,  36.00,  31.00,  24.00,  26.00,  21.00,  18.00,  18.00,  25.00,  15.00,
			  17.00,  13.00,  14.00,  23.00,  29.00,  75.00, 138.00, 245.00, 324.00, 283.00, 178.00,  75.00,  27.00,  13.00,   4.00,   8.00,   5.00,   3.00,   2.00,   1.00,
			   2.00,   3.00,   5.00,   3.00,   2.00,   4.00,   1.00,   1.00,   6.00,   3.00,   4.00,   1.00,   2.00,   2.00,   2.00,   6.00,   1.00,   3.00,   0.00,   5.00,
			   2.00,   2.00,   2.00,   3.00,   4.00,   4.00,   3.00,   4.00,   1.00,   0.00,   4.00,   2.00,   1.00,   4.00,   1.00,   0.00,   1.00,   0.00,   2.00,   1.00,
			   2.00,   2.00,   0.00,   2.00,   1.00,   2.00,   4.00,   6.00,   2.00,   3.00,   5.00,   2.00,   0.00,   1.00,   0.00,   1.00,   1.00,   2.00,   0.00,   0.00,
			   2.00,   3.00,   4.00,   3.00,   4.00,   2.00,   0.00,   3.00,   1.00,   2.00,   0.00,   1.00,   2.00,   3.00,   1.00,   2.00,   0.00,   1.00,   2.00,   3.00,
			   1.00,   1.00,   2.00,   2.00,   1.00,   1.00,   1.00,   2.00,   1.00,   1.00,   1.00,   2.00,   3.00,   3.00,   1.00,   0.00,   1.00,   2.00,   2.00,   2.00,
			   2.00,   2.00,   1.00,   1.00,   0.00,   1.00,   2.00,   0.00,   1.00,   3.00,   3.00,   2.00,   0.00,   0.00,   2.00,   2.00,   0.00,   2.00,   1.00,   1.00,
			   2.00,   0.00,   3.00,   2.00,   0.00,   2.00,   0.00,   3.00,   0.00,   0.00,   2.00,   0.00,   2.00,   1.00,   1.00,   1.00,   1.00,   0.00,   1.00,   1.00,
			   0.00,   1.00,   2.00,   1.00,   0.00,   0.00,   1.00,   1.00,   2.00,   1.00,   1.00,   0.00,   1.00,   1.00,   2.00,   0.00,   0.00,   3.00,   0.00,   1.00,
			   0.00,   2.00,   1.00,   1.00,   3.00,   2.00,   0.00,   2.00,   0.00,   2.00,   0.00,   1.00,   0.00,   0.00,   2.00,   0.00,   2.00,   0.00,   1.00,   0.00,
			   1.00,   1.00,   0.00,   1.00,   0.00,   3.00,   1.00,   0.00,   0.00,   2.00,   2.00,   0.00,   1.00,  44.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,153},{  0.00,158},{  0.00,192},{  0.00,224},{  0.00,228},
			{  1.00,69},{  1.00,92},{  1.00,108},{  1.00,114},{  1.00,171},
			{  1.00,189},{  1.00,196},{  1.00,200},{  1.00,215},{  2.00,58},
			{  2.00,85},{  2.00,106},{  2.00,136},{  2.00,169},{  2.00,185},
			{  2.00,202},{  2.00,206},{  2.00,213},{  3.00,40},{  3.00,54},
			{  3.00,110},{  4.00,47},{  4.00,62},{  5.00,56},{  6.00,52},
			{ 18.00,13},{324.00,25},{329.00,4},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 3", a->first == SortMap[cnt].first);
				ensure("int value must match 3", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<4>()
	{
		set_test_name("Nano Focus find peak 4");
		float temp[259]={0};
		float hist[259]={
			  53.00, 148.00, 237.00,1017.00, 237.00, 148.00,  53.00,  46.00,  32.00,  28.00,  29.00,  27.00,  27.00,  20.00,  21.00,  26.00,  19.00,  21.00,  20.00,  17.00,
			  19.00,  26.00,  22.00,  17.00,  19.00,  21.00,  58.00, 129.00, 190.00, 213.00, 197.00, 103.00,  63.00,  37.00,  14.00,   8.00,   4.00,   2.00,   2.00,   0.00,
			   4.00,   3.00,   2.00,   2.00,   1.00,   1.00,   1.00,   1.00,   3.00,   2.00,   0.00,   1.00,   1.00,   0.00,   0.00,   3.00,   3.00,   1.00,   0.00,   2.00,
			   4.00,   1.00,   1.00,   1.00,   1.00,   1.00,   3.00,   1.00,   1.00,   0.00,   1.00,   2.00,   1.00,   2.00,   0.00,   1.00,   1.00,   4.00,   0.00,   1.00,
			   1.00,   0.00,   0.00,   1.00,   0.00,   2.00,   1.00,   0.00,   1.00,   2.00,   1.00,   0.00,   0.00,   1.00,   2.00,   0.00,   1.00,   1.00,   1.00,   0.00,
			   0.00,   1.00,   1.00,   2.00,   1.00,   1.00,   0.00,   0.00,   2.00,   4.00,   0.00,   0.00,   0.00,   0.00,   0.00,   3.00,   1.00,   0.00,   1.00,   0.00,
			   1.00,   0.00,   1.00,   0.00,   2.00,   0.00,   2.00,   1.00,   0.00,   0.00,   0.00,   2.00,   2.00,   0.00,   0.00,   2.00,   0.00,   2.00,   0.00,   1.00,
			   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   1.00,   1.00,   1.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   1.00,   0.00,   1.00,
			   0.00,   2.00,   0.00,   2.00,   0.00,   1.00,   0.00,   0.00,   1.00,   3.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,
			   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,
			   0.00,   0.00,   3.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   1.00,   1.00,   1.00,
			   1.00,   1.00,   1.00,   1.00,   0.00,   0.00,   1.00,   0.00,   1.00,   0.00,   0.00,   1.00,   0.00, 118.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,55},{  0.00,78},{  0.00,84},{  0.00,104},{  0.00,130},
			{  0.00,152},{  0.00,176},{  0.00,201},{  0.00,205},{  1.00,44},
			{  1.00,58},{  1.00,72},{  1.00,117},{  1.00,119},{  1.00,145},
			{  1.00,156},{  2.00,39},{  2.00,100},{  2.00,134},{  2.00,158},
			{  2.00,160},{ 19.00,17},{213.00,26},{1017.00,0},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 4", a->first == SortMap[cnt].first);
				ensure("int value must match 4", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<5>()
	{
		set_test_name("Nano Focus find peak 5");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   7.00,  85.00, 236.00, 417.00, 362.00, 192.00,  90.00,  51.00,  29.00,  30.00,  21.00,  19.00,  14.00,  18.00,
			   8.00,  10.00,   9.00,  13.00,  13.00,  11.00,   5.00,  11.00,   6.00,   5.00,  11.00,  16.00,  14.00,  17.00,  45.00,  62.00, 121.00, 159.00, 199.00, 206.00,
			 170.00, 131.00,  93.00,  39.00,  26.00,   8.00,   5.00,   3.00,   1.00,   1.00,   0.00,   3.00,   2.00,   0.00,   1.00,   0.00,   0.00,   2.00,   2.00,   2.00,
			   2.00,   1.00,   1.00,   0.00,   0.00,   1.00,   1.00,   0.00,   2.00,   1.00,   2.00,   2.00,   1.00,   1.00,   2.00,   4.00,   1.00,   0.00,   1.00,   0.00,
			   0.00,   1.00,   0.00,   0.00,   1.00,   0.00,   1.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   2.00,   0.00,   0.00,
			   1.00,   1.00,   2.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   2.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   1.00,   0.00,   1.00,   0.00,   1.00,   0.00,   0.00,   2.00,   2.00,   1.00,   1.00,   1.00,   0.00,   1.00,   0.00,   1.00,   0.00,   0.00,
			   0.00,   1.00,   0.00,   1.00,   2.00,   1.00,   0.00,   0.00,   0.00,   0.00,   2.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   1.00,   0.00,   0.00,   0.00,   1.00,   0.00,   1.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   2.00,   1.00,   0.00,
			   0.00,   1.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   2.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,
			   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   1.00,   0.00,   0.00, 119.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,92},{  0.00,136},{  0.00,160},{  0.00,176},{  0.00,216},
			{  0.00,228},{  1.00,70},{  1.00,83},{  1.00,121},{  1.00,128},
			{  1.00,140},{  1.00,164},{  2.00,56},{  2.00,67},{ 11.00,22},
			{ 13.00,20},{206.00,36},{362.00,7},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 5", a->first == SortMap[cnt].first);
				ensure("int value must match 5", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<6>()
	{
		set_test_name("Nano Focus find peak 6");
		float temp[259]={0};
		float hist[259]={
			  81.42, 108.56, 144.75, 193.00, 400.00, 469.00, 331.00, 167.00, 127.00,  91.00,  64.00,  37.00,  26.00,  18.00,  31.00,  16.00,  20.00,  21.00,  17.00,  22.00,
			   8.00,  14.00,   8.00,   5.00,   8.00,   6.00,   9.00,   4.00,   7.00,  14.00,  16.00,  17.00,  28.00,  36.00,  48.00,  52.00,  80.00, 101.00, 107.00,  98.00,
			  87.00,  58.00,  51.00,  36.00,  24.00,  12.00,   9.00,   2.00,   3.00,   0.00,   2.00,   0.00,   2.00,   0.00,   2.00,   1.00,   1.00,   0.00,   1.00,   1.00,
			   2.00,   2.00,   2.00,   1.00,   0.00,   0.00,   3.00,   1.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   1.00,   3.00,   1.00,   0.00,   0.00,   0.00,   1.00,   1.00,   3.00,   3.00,   1.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,   2.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   1.00,   2.00,   0.00,   0.00,   2.00,   0.00,   0.00,   0.00,   1.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   1.00,   0.00,
			   0.00,   0.00,   1.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,   1.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   2.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   2.00,   1.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00, 130.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,61},{  0.00,120},{  0.00,124},{  0.00,137},{  0.00,141},
			{  0.00,206},{  1.00,53},{  2.00,49},{  2.00,51},{  3.00,86},
			{107.00,35},{469.00,2},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 6", a->first == SortMap[cnt].first);
				ensure("int value must match 6", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<7>()
	{
		set_test_name("Nano Focus find peak 7");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   5.00,  51.00, 168.00, 327.00, 341.00, 262.00, 114.00,  81.00,  47.00,  50.00,
			  27.00,  26.00,  23.00,  21.00,  18.00,  19.00,  13.00,  13.00,  11.00,  11.00,   5.00,  12.00,  12.00,  12.00,   5.00,   9.00,   6.00,   6.00,   8.00,   9.00,
			  13.00,   5.00,   3.00,  12.00,  12.00,  16.00,  23.00,  33.00,  44.00,  48.00,  70.00, 107.00,  99.00, 130.00, 117.00, 119.00,  98.00,  92.00,  68.00,  58.00,
			  32.00,  17.00,   8.00,   2.00,   3.00,   0.00,   0.00,   1.00,   0.00,   1.00,   0.00,   0.00,   0.00,   2.00,   3.00,   0.00,   0.00,   2.00,   3.00,   1.00,
			   0.00,   2.00,   1.00,   1.00,   0.00,   0.00,   1.00,   3.00,   0.00,   1.00,   2.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   1.00,   3.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   1.00,   0.00,
			   0.00,   3.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   1.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   4.00,   1.00,   3.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   2.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   1.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   3.00,   1.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   2.00,   3.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,
			   0.00,   1.00,   2.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,
			   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00, 181.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,73},{  0.00,82},{  0.00,85},{  0.00,93},{  0.00,120},
			{  0.00,124},{  1.00,76},{  8.00,35},{ 12.00,28},{ 12.00,30},
			{130.00,50},{341.00,11},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 7", a->first == SortMap[cnt].first);
				ensure("int value must match 7", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<8>()
	{
		set_test_name("Nano Focus find peak 8");
		float temp[259]={0};
		float hist[259]={
			   1.27,   1.69,   2.25,   3.00,  16.00, 108.00, 319.00, 385.00, 327.00, 273.00, 166.00, 107.00,  76.00,  45.00,  45.00,  39.00,  22.00,  24.00,  13.00,  20.00,
			  13.00,  12.00,  11.00,   9.00,  13.00,  11.00,  13.00,  11.00,  14.00,   7.00,  10.00,  12.00,   5.00,  11.00,   6.00,  10.00,  12.00,   7.00,   8.00,  12.00,
			  10.00,  20.00,  30.00,  57.00,  65.00,  84.00,  87.00,  72.00,  76.00,  49.00,  40.00,  29.00,  23.00,   3.00,   4.00,   0.00,   5.00,   0.00,   2.00,   1.00,
			   3.00,   1.00,   3.00,   2.00,   2.00,   1.00,   0.00,   2.00,   0.00,   0.00,   3.00,   0.00,   0.00,   0.00,   1.00,   2.00,   1.00,   2.00,   1.00,   2.00,
			   3.00,   2.00,   1.00,   0.00,   0.00,   3.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   1.00,   3.00,   0.00,   0.00,   2.00,   0.00,   0.00,   0.00,
			   1.00,   2.00,   1.00,   1.00,   0.00,   1.00,   1.00,   0.00,   0.00,   1.00,   0.00,   2.00,   1.00,   0.00,   1.00,   1.00,   0.00,   0.00,   4.00,   0.00,
			   0.00,   1.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   3.00,   2.00,   1.00,   0.00,   2.00,   0.00,   1.00,   1.00,   2.00,   0.00,   0.00,
			   0.00,   1.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   2.00,   0.00,   0.00,   2.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,
			   0.00,   1.00,   3.00,   1.00,   1.00,   0.00,   0.00,   1.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   2.00,   2.00,   0.00,
			   0.00,   1.00,   0.00,   1.00,   0.00,   2.00,   0.00,   0.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   1.00,   3.00,   0.00,   0.00,   1.00,   1.00,   0.00,   1.00,   2.00,   4.00,   2.00,   0.00,   0.00,   0.00,   2.00,   0.00,   0.00,   3.00,   0.00,
			   0.00,   0.00,   0.00,   2.00,   1.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00, 222.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,69},{  0.00,84},{  0.00,88},{  0.00,91},{  0.00,104},
			{  0.00,110},{  0.00,113},{  0.00,145},{  0.00,152},{  0.00,184},
			{  0.00,222},{  1.00,128},{  1.00,132},{  1.00,180},{  2.00,55},
			{  2.00,76},{  3.00,59},{ 10.00,32},{ 13.00,23},{ 87.00,43},
			{327.00,5},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 8", a->first == SortMap[cnt].first);
				ensure("int value must match 8", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<9>()
	{
		set_test_name("Nano Focus find peak 9");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   2.00,  38.00, 125.00, 256.00, 301.00, 231.00, 114.00,  70.00,
			  46.00,  38.00,  38.00,  24.00,  20.00,  18.00,  19.00,  16.00,  18.00,  14.00,  10.00,  22.00,   8.00,  14.00,  10.00,  11.00,  15.00,  10.00,  12.00,  11.00,
			   8.00,  11.00,  14.00,  12.00,   6.00,   8.00,  13.00,  14.00,  11.00,   9.00,   9.00,   7.00,  12.00,  12.00,   8.00,  11.00,  15.00,  25.00,  30.00,  70.00,
			 115.00, 138.00, 155.00, 142.00, 133.00,  76.00,  53.00,  35.00,  17.00,  13.00,   6.00,   1.00,   4.00,   4.00,   1.00,   2.00,   1.00,   1.00,   1.00,   0.00,
			   2.00,   0.00,   1.00,   1.00,   1.00,   6.00,   2.00,   2.00,   0.00,   2.00,   3.00,   0.00,   1.00,   3.00,   0.00,   1.00,   1.00,   3.00,   1.00,   1.00,
			   3.00,   2.00,   1.00,   0.00,   1.00,   1.00,   5.00,   1.00,   3.00,   0.00,   1.00,   2.00,   3.00,   0.00,   0.00,   1.00,   2.00,   2.00,   2.00,   2.00,
			   1.00,   1.00,   1.00,   0.00,   1.00,   5.00,   2.00,   1.00,   2.00,   2.00,   0.00,   2.00,   0.00,   3.00,   1.00,   0.00,   0.00,   1.00,   0.00,   1.00,
			   2.00,   0.00,   0.00,   1.00,   3.00,   1.00,   5.00,   1.00,   0.00,   1.00,   0.00,   1.00,   0.00,   2.00,   2.00,   1.00,   0.00,   2.00,   1.00,   1.00,
			   0.00,   2.00,   3.00,   1.00,   0.00,   1.00,   1.00,   1.00,   1.00,   3.00,   2.00,   1.00,   1.00,   3.00,   0.00,   0.00,   1.00,   2.00,   1.00,   1.00,
			   0.00,   0.00,   1.00,   0.00,   1.00,   4.00,   2.00,   0.00,   1.00,   1.00,   0.00,   0.00,   2.00,   4.00,   5.00,   0.00,   0.00,   0.00,   3.00,   0.00,
			   0.00,   0.00,   1.00,   2.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   0.00,   1.00,   1.00,   2.00,   0.00,   0.00,   0.00,   4.00,   4.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   2.00,   3.00,   4.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00, 299.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,88},{  0.00,132},{  0.00,139},{  0.00,172},{  0.00,197},
			{  1.00,92},{  1.00,96},{  1.00,107},{  1.00,124},{  1.00,142},
			{  1.00,152},{  1.00,160},{  1.00,168},{  1.00,181},{  2.00,84},
			{  2.00,128},{  2.00,150},{  5.00,103},{  6.00,82},{  7.00,48},
			{ 10.00,34},{ 11.00,32},{ 11.00,45},{ 14.00,26},{ 14.00,30},
			{155.00,59},{301.00,13},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 9", a->first == SortMap[cnt].first);
				ensure("int value must match 9", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<10>()
	{
		set_test_name("Nano Focus find peak 10");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   9.00,  60.00, 178.00, 273.00, 312.00, 271.00, 237.00, 110.00,  69.00,  74.00,  47.00,  44.00,  28.00,  32.00,
			  24.00,  15.00,  20.00,  12.00,  12.00,  15.00,  14.00,   9.00,  20.00,  15.00,  17.00,   7.00,  15.00,  13.00,  15.00,  14.00,  12.00,   8.00,  14.00,  10.00,
			  15.00,  12.00,  13.00,  11.00,  15.00,  11.00,  15.00,  14.00,  15.00,  11.00,  24.00,   5.00,  16.00,  31.00,  28.00,  46.00,  63.00,  51.00,  46.00,  27.00,
			  10.00,  11.00,   7.00,   2.00,   3.00,   2.00,   2.00,   2.00,   2.00,   1.00,   3.00,   2.00,   4.00,   2.00,   5.00,   3.00,   1.00,   3.00,   0.00,   0.00,
			   1.00,   2.00,   3.00,   4.00,   1.00,   4.00,   2.00,   1.00,   1.00,   0.00,   1.00,   3.00,   2.00,   3.00,   2.00,   1.00,   2.00,   0.00,   1.00,   2.00,
			   2.00,   2.00,   3.00,   3.00,   1.00,   2.00,   3.00,   3.00,   0.00,   2.00,   1.00,   2.00,   0.00,   4.00,   3.00,   2.00,   1.00,   4.00,   1.00,   1.00,
			   1.00,   3.00,   3.00,   0.00,   3.00,   1.00,   4.00,   1.00,   3.00,   1.00,   1.00,   2.00,   4.00,   3.00,   0.00,   4.00,   4.00,   2.00,   0.00,   2.00,
			   3.00,   1.00,   2.00,   1.00,   1.00,   2.00,   1.00,   6.00,   4.00,   1.00,   0.00,   2.00,   3.00,   4.00,   4.00,   3.00,   4.00,   3.00,   3.00,   1.00,
			   0.00,   4.00,   0.00,   2.00,   2.00,   0.00,   2.00,   1.00,   1.00,   0.00,   4.00,   2.00,   1.00,   2.00,   1.00,   2.00,   2.00,   2.00,   4.00,   3.00,
			   1.00,   5.00,   4.00,   1.00,   1.00,   3.00,   2.00,   0.00,   0.00,   4.00,   5.00,   0.00,   2.00,   1.00,   2.00,   2.00,   0.00,   3.00,   2.00,   1.00,
			   0.00,   2.00,   0.00,   1.00,   0.00,   3.00,   1.00,   1.00,   1.00,   4.00,   0.00,   2.00,   1.00,   2.00,   2.00,   1.00,   1.00,   3.00,   2.00,   3.00,
			   3.00,   3.00,   1.00,   2.00,   1.00,   4.00,   7.00,   1.00,   1.00,   3.00,   0.00,   0.00,   0.00, 343.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,131},{  0.00,162},{  0.00,185},{  0.00,188},{  0.00,193},
			{  0.00,228},{  1.00,116},{  1.00,138},{  1.00,146},{  1.00,169},
			{  1.00,177},{  1.00,180},{  1.00,196},{  1.00,200},{  1.00,204},
			{  1.00,224},{  2.00,98},{  2.00,112},{  2.00,134},{  2.00,174},
			{  2.00,208},{  2.00,210},{  3.00,104},{  3.00,121},{  3.00,216},
			{  4.00,110},{  4.00,123},{ 12.00,33},{ 13.00,39},{ 15.00,31},
			{ 15.00,37},{ 15.00,43},{ 15.00,45},{ 17.00,27},{ 20.00,25},
			{ 63.00,53},{312.00,7},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 10", a->first == SortMap[cnt].first);
				ensure("int value must match 10", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<11>()
	{
		set_test_name("Nano Focus find peak 11");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   2.00,   7.00,  41.00, 122.00,
			 189.00, 179.00, 134.00,  85.00,  62.00,  53.00,  29.00,  38.00,  29.00,  23.00,  25.00,  23.00,  15.00,  22.00,  20.00,  20.00,  14.00,  22.00,   7.00,   9.00,
			  13.00,  19.00,  15.00,   8.00,  13.00,  16.00,  14.00,  17.00,   7.00,   9.00,  13.00,  10.00,  18.00,  14.00,  11.00,  12.00,  14.00,  12.00,  11.00,  13.00,
			  12.00,  13.00,  11.00,  21.00,  15.00,  11.00,  15.00,  15.00,  17.00,   7.00,   8.00,  20.00,  12.00,  30.00,  34.00,  56.00,  87.00, 117.00, 131.00, 130.00,
			  92.00,  61.00,  30.00,  20.00,  12.00,   4.00,   0.00,   3.00,   3.00,   3.00,   3.00,   5.00,   2.00,   4.00,   3.00,   2.00,   2.00,   0.00,   3.00,   2.00,
			   2.00,   1.00,   2.00,   0.00,   4.00,   2.00,   1.00,   5.00,   5.00,   1.00,   2.00,   1.00,   4.00,   2.00,   0.00,   4.00,   2.00,   4.00,   0.00,   3.00,
			   3.00,   2.00,   1.00,   2.00,   3.00,   3.00,   3.00,   4.00,   3.00,   1.00,   2.00,   0.00,   1.00,   0.00,   2.00,   2.00,   2.00,   2.00,   2.00,   3.00,
			   3.00,   1.00,   0.00,   3.00,   6.00,   0.00,   2.00,   6.00,   0.00,   3.00,   1.00,   4.00,   1.00,   0.00,   3.00,   3.00,   1.00,   2.00,   1.00,   1.00,
			   2.00,   2.00,   3.00,   3.00,   1.00,   5.00,   1.00,   2.00,   3.00,   1.00,   2.00,   3.00,   2.00,   2.00,   3.00,   1.00,   2.00,   1.00,   0.00,   2.00,
			   3.00,   2.00,   3.00,   3.00,   2.00,   3.00,   3.00,   2.00,   0.00,   1.00,   3.00,   3.00,   1.00,   5.00,   6.00,   3.00,   1.00,   5.00,   1.00,   0.00,
			   2.00,   5.00,   1.00,   1.00,   2.00,   4.00,   3.00,   1.00,   2.00,   2.00,   4.00,   2.00,   2.00,   5.00,   1.00,   0.00,   4.00,   3.00,   5.00,   3.00,
			   3.00,   3.00,   3.00,   3.00,   1.00,   4.00,   4.00,   1.00,   0.00,   1.00,   4.00,   4.00,   2.00, 452.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,139},{  0.00,142},{  0.00,150},{  0.00,196},{  1.00,103},
			{  1.00,153},{  1.00,200},{  1.00,221},{  2.00,97},{  2.00,135},
			{  2.00,169},{  2.00,181},{  2.00,208},{  3.00,86},{  3.00,123},
			{  3.00,146},{  3.00,160},{  3.00,192},{  4.00,114},{  4.00,228},
			{  5.00,215},{  7.00,66},{  8.00,40},{  9.00,36},{ 11.00,51},
			{ 11.00,59},{ 11.00,62},{ 16.00,42},{ 18.00,49},{ 20.00,32},
			{131.00,75},{179.00,18},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 11", a->first == SortMap[cnt].first);
				ensure("int value must match 11", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<12>()
	{
		set_test_name("Nano Focus find peak 12");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   7.00,  21.00, 125.00, 254.00, 287.00, 270.00, 165.00,  85.00,  50.00,  36.00,  59.00,
			  59.00,  66.00,  69.00,  33.00,  31.00,  28.00,  27.00,  20.00,  24.00,  21.00,  16.00,  13.00,  18.00,  15.00,  17.00,  20.00,  19.00,  18.00,  11.00,  13.00,
			  17.00,  16.00,  13.00,  13.00,  17.00,  18.00,  14.00,  18.00,  16.00,  14.00,  15.00,  19.00,  12.00,  17.00,  13.00,  13.00,  16.00,  22.00,  10.00,  14.00,
			   4.00,   8.00,   3.00,   1.00,   5.00,   3.00,   5.00,   2.00,   6.00,   3.00,   6.00,   5.00,   6.00,   3.00,   2.00,   1.00,   3.00,   4.00,   4.00,   2.00,
			   6.00,   5.00,   2.00,   5.00,   3.00,   4.00,   6.00,   1.00,   7.00,   4.00,   1.00,   3.00,   4.00,   4.00,   3.00,   5.00,   2.00,   3.00,   2.00,   1.00,
			   4.00,   4.00,   3.00,   5.00,   5.00,   2.00,   4.00,   4.00,   5.00,   2.00,   4.00,   2.00,   5.00,   1.00,   2.00,   1.00,   3.00,   6.00,   6.00,   5.00,
			   1.00,   4.00,   3.00,   5.00,   5.00,   1.00,   2.00,   1.00,   7.00,   5.00,   0.00,   2.00,   4.00,   2.00,   7.00,   4.00,   2.00,   5.00,   4.00,   3.00,
			   1.00,   1.00,   2.00,   3.00,   9.00,   3.00,   6.00,   3.00,   4.00,   4.00,   0.00,   2.00,   4.00,   2.00,   6.00,   7.00,   4.00,   3.00,   5.00,   6.00,
			   3.00,   3.00,   3.00,   2.00,   7.00,   6.00,   4.00,   1.00,   2.00,   2.00,   4.00,   7.00,   1.00,   5.00,   4.00,   1.00,   5.00,   4.00,   7.00,   7.00,
			   6.00,   1.00,   4.00,   3.00,   5.00,   3.00,   5.00,   2.00,   3.00,   3.00,   8.00,   3.00,   6.00,   4.00,   6.00,   4.00,   1.00,   5.00,   5.00,   4.00,
			   7.00,   2.00,   6.00,   6.00,   3.00,   5.00,   5.00,   2.00,   3.00,   4.00,   4.00,   3.00,   5.00,   4.00,   8.00,   4.00,   2.00,   3.00,   2.00,   1.00,
			   5.00,   2.00,   4.00,   3.00,   2.00,   2.00,   7.00,   3.00,   4.00,   5.00,   5.00,   4.00,   3.00, 346.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,127},{  0.00,147},{  1.00,84},{  1.00,87},{  1.00,169},
			{  1.00,193},{  2.00,76},{  2.00,79},{  2.00,133},{  2.00,198},
			{  2.00,204},{  2.00,221},{  3.00,81},{  3.00,99},{  3.00,185},
			{  3.00,201},{  4.00,90},{  4.00,107},{  4.00,219},{  4.00,225},
			{  4.00,228},{  5.00,63},{  5.00,105},{  5.00,116},{  5.00,181},
			{  6.00,67},{  6.00,143},{  6.00,151},{  6.00,189},{  7.00,161},
			{  7.00,175},{ 13.00,40},{ 13.00,52},{ 14.00,43},{ 14.00,46},
			{ 19.00,48},{ 22.00,54},{ 59.00,17},{287.00,10},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 12", a->first == SortMap[cnt].first);
				ensure("int value must match 12", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<13>()
	{
		set_test_name("Nano Focus find peak 13");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   7.00,  27.00,  69.00,  99.00, 123.00, 100.00,  65.00,  63.00,  47.00,  35.00,  39.00,  24.00,  31.00,  30.00,  18.00,  36.00,  19.00,  22.00,  20.00,
			  19.00,  15.00,  19.00,  13.00,  24.00,  12.00,  21.00,  15.00,  18.00,  13.00,  14.00,  14.00,  15.00,  15.00,  15.00,  16.00,  23.00,  11.00,  14.00,   6.00,
			  22.00,  14.00,  12.00,  13.00,  20.00,  13.00,  13.00,  16.00,  13.00,  15.00,  16.00,  12.00,  16.00,  18.00,  16.00,  12.00,  23.00,  18.00,  16.00,   9.00,
			  13.00,  17.00,  24.00,  15.00,  17.00,  22.00,  27.00,  19.00,  19.00,  35.00,  30.00,  46.00,  63.00,  74.00,  84.00,  64.00,  54.00,  40.00,  19.00,  11.00,
			   4.00,   4.00,   6.00,   3.00,   2.00,   3.00,   2.00,   5.00,   2.00,   3.00,   5.00,   2.00,   1.00,   3.00,   2.00,   7.00,   8.00,   2.00,   4.00,   3.00,
			   4.00,   1.00,   4.00,   1.00,   2.00,   1.00,   3.00,   5.00,   4.00,   2.00,   3.00,   5.00,   5.00,   4.00,   2.00,   3.00,   2.00,   3.00,   5.00,   7.00,
			   2.00,   3.00,   0.00,   2.00,   1.00,   5.00,   5.00,   4.00,   4.00,   3.00,   4.00,   3.00,   3.00,   1.00,   2.00,   6.00,   3.00,   0.00,   4.00,   5.00,
			   2.00,   3.00,   1.00,   2.00,   3.00,   4.00,   6.00,   2.00,   7.00,   4.00,   6.00,   2.00,   4.00,   3.00,   4.00,   1.00,   3.00,   2.00,   2.00,   7.00,
			   4.00,   3.00,   0.00,   8.00,   4.00,   2.00,   0.00,   1.00,   2.00,   4.00,   3.00,   2.00,   3.00,   4.00,  10.00,   5.00,   3.00,   5.00,   2.00,   6.00,
			   2.00,   8.00,   5.00,   1.00,   3.00,   1.00,   3.00,   3.00,   4.00,  10.00,   4.00,   7.00,   4.00,   3.00,   1.00,   8.00,   3.00,   1.00,   5.00,   8.00,
			   3.00,   7.00,   4.00,   3.00,   4.00,   3.00,   4.00,   3.00,   9.00,   2.00,   3.00,   4.00,   1.00, 544.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,154},{  1.00,214},{  2.00,108},{  2.00,114},{  2.00,157},
			{  2.00,182},{  3.00,134},{  3.00,178},{  3.00,210},{  3.00,217},
			{  4.00,117},{  4.00,144},{  4.00,171},{  4.00,207},{  4.00,223},
			{  4.00,228},{  5.00,192},{  6.00,167},{  7.00,136},{  7.00,165},
			{ 12.00,59},{ 12.00,72},{ 13.00,65},{ 13.00,77},{ 14.00,55},
			{ 15.00,51},{ 16.00,69},{ 16.00,75},{ 17.00,81},{ 18.00,45},
			{ 19.00,39},{ 21.00,43},{ 22.00,35},{ 22.00,57},{ 24.00,41},
			{ 84.00,91},{123.00,22},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 13", a->first == SortMap[cnt].first);
				ensure("int value must match 13", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<14>()
	{
		set_test_name("Nano Focus find peak 14");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,  30.00, 104.00, 201.00, 307.00, 266.00, 176.00,  82.00,
			  61.00,  38.00,  35.00,  24.00,  21.00,  25.00,  19.00,  23.00,  19.00,  21.00,  17.00,  21.00,  23.00,  27.00,  30.00,  31.00,  27.00,  24.00,  25.00,  21.00,
			  18.00,  24.00,  24.00,  15.00,  20.00,  16.00,   9.00,   9.00,   5.00,   5.00,   8.00,   6.00,   9.00,   8.00,   2.00,   7.00,   6.00,   6.00,   7.00,   9.00,
			   7.00,   4.00,   4.00,   8.00,   5.00,   9.00,   5.00,   8.00,   3.00,   5.00,   5.00,   9.00,   5.00,   5.00,   6.00,   3.00,   5.00,   9.00,   5.00,   5.00,
			   3.00,   7.00,   7.00,   5.00,   5.00,   4.00,   7.00,   2.00,   1.00,   5.00,  10.00,   6.00,   5.00,   5.00,   7.00,   3.00,   1.00,   0.00,   6.00,   7.00,
			   8.00,   8.00,   3.00,   8.00,   5.00,   5.00,   6.00,   3.00,   2.00,   2.00,   8.00,  12.00,   4.00,   3.00,   4.00,   5.00,   6.00,   7.00,   4.00,   8.00,
			   2.00,   6.00,   6.00,   2.00,   4.00,   5.00,   3.00,   5.00,  11.00,   5.00,   2.00,   4.00,   4.00,   3.00,   7.00,   5.00,   3.00,   7.00,   5.00,   6.00,
			   4.00,   4.00,   4.00,   4.00,   5.00,   3.00,   7.00,   5.00,   0.00,   7.00,   3.00,   2.00,   7.00,   9.00,   5.00,   4.00,   3.00,   3.00,   6.00,  10.00,
			   5.00,   4.00,   6.00,   4.00,   5.00,   6.00,   2.00,   4.00,   4.00,   5.00,   4.00,  11.00,   7.00,   2.00,   4.00,   3.00,   1.00,   6.00,   8.00,   8.00,
			   4.00,   5.00,   3.00,   2.00,   6.00,   5.00,   8.00,   3.00,   4.00,   8.00,   5.00,   5.00,   9.00,   5.00,   3.00,   4.00,   7.00,  11.00,   7.00,   3.00,
			   8.00,   6.00,   7.00,   7.00,   4.00,   5.00,   5.00,   9.00,   9.00,   4.00,   2.00,  11.00,   4.00,  12.00,   4.00,   7.00,   3.00,   6.00,  10.00,   6.00,
			  12.00,  10.00,  13.00,  11.00,   7.00,   4.00,  10.00,   7.00,   9.00,  17.00,  10.00,  14.00,  19.00, 299.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  1.00,85},{  2.00,120},{  2.00,148},{  3.00,130},{  3.00,133},
			{  3.00,142},{  4.00,58},{  4.00,109},{  4.00,160},{  4.00,167},
			{  4.00,206},{  5.00,66},{  5.00,69},{  5.00,76},{  5.00,89},
			{  5.00,124},{  5.00,126},{  5.00,151},{  5.00,157},{  5.00,188},
			{  6.00,48},{  6.00,136},{  7.00,114},{  7.00,195},{  7.00,199},
			{  7.00,212},{  8.00,98},{  8.00,176},{  9.00,62},{ 12.00,210},
			{ 13.00,219},{ 14.00,228},{ 31.00,32},{307.00,13},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 14", a->first == SortMap[cnt].first);
				ensure("int value must match 14", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<15>()
	{
		set_test_name("Nano Focus find peak 15");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   4.00,  15.00, 124.00, 221.00, 336.00, 273.00, 153.00,  82.00,  59.00,  33.00,
			  18.00,  32.00,  23.00,  19.00,  31.00,  27.00,  46.00,  53.00,  45.00,  35.00,  28.00,  18.00,  27.00,  16.00,  13.00,  26.00,  24.00,  16.00,  18.00,  20.00,
			  22.00,  12.00,  11.00,  11.00,   8.00,  13.00,  11.00,   3.00,   5.00,   7.00,   8.00,   7.00,   4.00,   3.00,   2.00,   9.00,   4.00,   3.00,   6.00,   8.00,
			   3.00,   7.00,   9.00,   5.00,   6.00,   8.00,   6.00,   2.00,   8.00,   2.00,   8.00,   6.00,   6.00,   5.00,   6.00,   4.00,   6.00,   3.00,   1.00,   5.00,
			   6.00,   6.00,   8.00,   4.00,   3.00,   6.00,   5.00,   6.00,   2.00,   4.00,   4.00,   3.00,   5.00,   3.00,   7.00,   6.00,   5.00,   7.00,   0.00,  10.00,
			   8.00,   2.00,   5.00,   6.00,   5.00,   2.00,   1.00,   7.00,   5.00,   5.00,   7.00,   5.00,   5.00,   3.00,   3.00,   4.00,   6.00,   5.00,   3.00,   4.00,
			   5.00,   4.00,   6.00,   4.00,   4.00,   3.00,   4.00,   6.00,   3.00,   2.00,   1.00,   3.00,   5.00,   5.00,   2.00,   4.00,   5.00,  12.00,   4.00,   7.00,
			   4.00,   2.00,   2.00,   6.00,   2.00,   7.00,   8.00,   5.00,   3.00,   2.00,   2.00,   5.00,   7.00,   3.00,   4.00,   6.00,   1.00,   4.00,   8.00,   5.00,
			   5.00,   8.00,  11.00,   2.00,   3.00,   7.00,   7.00,   4.00,   5.00,   6.00,   3.00,   5.00,   4.00,  10.00,   6.00,   2.00,   6.00,   7.00,   3.00,   5.00,
			   2.00,   4.00,   5.00,  12.00,  10.00,   4.00,   5.00,   3.00,   7.00,   5.00,   6.00,   2.00,   6.00,   6.00,   5.00,   6.00,   7.00,  11.00,   7.00,   4.00,
			   5.00,   7.00,   5.00,   8.00,   4.00,   8.00,   7.00,  14.00,   9.00,   7.00,   8.00,  10.00,   5.00,  10.00,  10.00,   9.00,  12.00,  10.00,  13.00,   9.00,
			  14.00,  10.00,   8.00,  12.00,  11.00,  15.00,  18.00,  14.00,  13.00,  10.00,  10.00,   8.00,  10.00, 187.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,95},{  2.00,98},{  2.00,102},{  2.00,138},{  2.00,160},
			{  2.00,172},{  3.00,50},{  3.00,54},{  3.00,57},{  3.00,115},
			{  3.00,150},{  4.00,132},{  4.00,154},{  4.00,164},{  5.00,60},
			{  5.00,106},{  5.00,157},{  6.00,63},{  6.00,69},{  6.00,78},
			{  6.00,84},{  6.00,92},{  6.00,187},{  7.00,142},{  7.00,185},
			{  7.00,193},{  7.00,206},{  8.00,47},{  8.00,67},{  8.00,228},
			{ 10.00,181},{ 12.00,213},{ 13.00,31},{ 13.00,215},{ 16.00,34},
			{ 18.00,223},{ 45.00,25},{336.00,11},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 15", a->first == SortMap[cnt].first);
				ensure("int value must match 15", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<16>()
	{
		set_test_name("Nano Focus find peak 16");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   2.00,
			  19.00,  80.00, 133.00, 205.00, 142.00, 102.00,  80.00,  66.00,  36.00,  42.00,  31.00,  20.00,  32.00,  25.00,  19.00,  21.00,  21.00,  10.00,  15.00,  16.00,
			  14.00,  17.00,  12.00,  22.00,  11.00,  10.00,  17.00,  18.00,  13.00,  12.00,  11.00,  12.00,   8.00,  14.00,   8.00,  16.00,  12.00,  13.00,  15.00,  11.00,
			   8.00,   8.00,  20.00,  13.00,  13.00,  11.00,  14.00,  15.00,   7.00,  11.00,  14.00,  11.00,  12.00,  14.00,  13.00,  15.00,  10.00,  15.00,  12.00,  19.00,
			  21.00,  15.00,  13.00,  19.00,  25.00,  46.00,  71.00,  92.00,  93.00,  80.00, 101.00,  70.00,  46.00,  27.00,  12.00,   5.00,   3.00,   3.00,   3.00,   5.00,
			   0.00,   1.00,   3.00,   4.00,   6.00,   2.00,   3.00,   3.00,   1.00,   3.00,   0.00,   3.00,   1.00,   0.00,   4.00,   2.00,   3.00,   2.00,   4.00,   2.00,
			   1.00,   2.00,   1.00,   0.00,   3.00,   1.00,   6.00,   3.00,   2.00,   4.00,   2.00,   2.00,   2.00,   1.00,   2.00,   0.00,   1.00,   3.00,   3.00,   1.00,
			   4.00,   4.00,   6.00,   0.00,   2.00,   3.00,   3.00,   3.00,   1.00,   0.00,   2.00,   0.00,   2.00,   4.00,   1.00,   1.00,   0.00,   1.00,   1.00,   3.00,
			   2.00,   4.00,   2.00,   2.00,   6.00,   4.00,   3.00,   1.00,   1.00,   3.00,   3.00,   2.00,   0.00,   2.00,   4.00,   2.00,   2.00,   0.00,   3.00,   3.00,
			   1.00,   5.00,   2.00,   2.00,   4.00,   0.00,   4.00,   0.00,   2.00,   2.00,   0.00,   2.00,   4.00,   3.00,   2.00,   3.00,   5.00,   1.00,   3.00,   2.00,
			   3.00,   4.00,   1.00,   2.00,   2.00,   3.00,   3.00,   3.00,   2.00,   5.00,   9.00,   0.00,   3.00,   5.00,   2.00,   1.00,   2.00,   5.00,   3.00,   0.00,
			   3.00,   3.00,   4.00,   0.00,   2.00,   5.00,   3.00,   4.00,   2.00,   3.00,   3.00,   2.00,   1.00, 495.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,169},{  0.00,208},{  0.00,216},{  1.00,133},{  1.00,177},
			{  1.00,212},{  2.00,125},{  2.00,149},{  2.00,160},{  2.00,173},
			{  2.00,179},{  2.00,191},{  2.00,205},{  2.00,228},{  3.00,113},
			{  3.00,143},{  4.00,137},{  4.00,224},{  6.00,139},{  7.00,65},
			{  8.00,57},{ 10.00,42},{ 12.00,48},{ 13.00,45},{ 13.00,54},
			{ 13.00,61},{ 14.00,70},{ 15.00,72},{ 17.00,38},{ 19.00,31},
			{ 19.00,76},{ 93.00,85},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 16", a->first == SortMap[cnt].first);
				ensure("int value must match 16", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<17>()
	{
		set_test_name("Nano Focus find peak 17");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   3.00,  32.00, 142.00, 259.00, 302.00, 322.00, 287.00, 157.00,  98.00,  60.00,  49.00,  35.00,  24.00,
			  34.00,  19.00,  14.00,  17.00,  15.00,  11.00,  17.00,  19.00,  10.00,  17.00,   5.00,   9.00,  17.00,  11.00,  12.00,  10.00,  14.00,   9.00,  15.00,  12.00,
			  11.00,   9.00,  15.00,  10.00,   9.00,   8.00,   7.00,  15.00,  14.00,  10.00,  13.00,   9.00,   8.00,  14.00,  19.00,  11.00,  13.00,  12.00,  27.00,  37.00,
			  40.00,  45.00,  43.00,  45.00,  35.00,  22.00,   8.00,   5.00,   4.00,   4.00,   0.00,   2.00,   4.00,   1.00,   1.00,   3.00,   2.00,   1.00,   1.00,   4.00,
			   2.00,   0.00,   3.00,   2.00,   2.00,   1.00,   1.00,   1.00,   2.00,   1.00,   1.00,   1.00,   2.00,   3.00,   2.00,   1.00,   3.00,   0.00,   2.00,   2.00,
			   2.00,   1.00,   4.00,   1.00,   2.00,   2.00,   0.00,   0.00,   2.00,   5.00,   1.00,   0.00,   1.00,   2.00,   2.00,   2.00,   5.00,   2.00,   1.00,   1.00,
			   1.00,   1.00,   1.00,   2.00,   2.00,   3.00,   1.00,   3.00,   0.00,   3.00,   5.00,   0.00,   2.00,   1.00,   3.00,   1.00,   2.00,   1.00,   2.00,   0.00,
			   2.00,   2.00,   3.00,   2.00,   1.00,   0.00,   3.00,   2.00,   1.00,   6.00,   3.00,   1.00,   2.00,   0.00,   1.00,   0.00,   0.00,   0.00,   6.00,   5.00,
			   1.00,   1.00,   3.00,   1.00,   0.00,   1.00,   2.00,   4.00,   2.00,   2.00,   0.00,   0.00,   2.00,   3.00,   1.00,   1.00,   2.00,   1.00,   3.00,   1.00,
			   2.00,   0.00,   4.00,   1.00,   2.00,   0.00,   1.00,   0.00,   0.00,   2.00,   0.00,   0.00,   0.00,   2.00,   2.00,   2.00,   0.00,   4.00,   2.00,   0.00,
			   1.00,   3.00,   4.00,   0.00,   1.00,   1.00,   2.00,   0.00,   1.00,   3.00,   5.00,   0.00,   1.00,   2.00,   2.00,   0.00,   0.00,   2.00,   4.00,   1.00,
			   1.00,   0.00,   2.00,   1.00,   0.00,   2.00,   3.00,   0.00,   1.00,   1.00,   1.00,   1.00,   0.00, 359.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,78},{  0.00,104},{  0.00,125},{  0.00,168},{  0.00,208},
			{  0.00,213},{  0.00,221},{  0.00,224},{  1.00,74},{  1.00,141},
			{  1.00,145},{  1.00,157},{  1.00,171},{  1.00,205},{  1.00,228},
			{  2.00,81},{  2.00,91},{  2.00,95},{  2.00,97},{  2.00,112},
			{  2.00,133},{  2.00,177},{  2.00,181},{  3.00,122},{  3.00,131},
			{  3.00,139},{  3.00,175},{  4.00,164},{  4.00,179},{  8.00,49},
			{  9.00,28},{ 10.00,46},{ 11.00,22},{ 11.00,37},{ 12.00,31},
			{ 15.00,35},{ 19.00,24},{ 45.00,58},{322.00,9},};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 17", a->first == SortMap[cnt].first);
				ensure("int value must match 17", a->second == SortMap[cnt].second);
		}
	}
	template<>
	template<>
	void testobject::test<18>()
	{
		set_test_name("Nano Focus find peak 18");
		float temp[259]={0};
		float hist[259]={
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   3.00,  18.00,  74.00, 235.00, 309.00, 277.00, 183.00, 104.00,
			  73.00,  49.00,  29.00,  37.00,  26.00,  21.00,  20.00,  23.00,  18.00,  11.00,   9.00,   8.00,   9.00,  10.00,  13.00,  19.00,   8.00,  11.00,  15.00,   6.00,
			  10.00,   8.00,  10.00,   6.00,  10.00,  10.00,   5.00,  14.00,   9.00,  13.00,  10.00,   5.00,   7.00,   9.00,   7.00,  12.00,  21.00,  19.00,  53.00,  58.00,
			  86.00, 100.00, 130.00, 124.00, 120.00, 111.00,  85.00,  61.00,  31.00,  19.00,  11.00,   4.00,   3.00,   0.00,   1.00,   3.00,   0.00,   2.00,   2.00,   2.00,
			   3.00,   2.00,   1.00,   1.00,   0.00,   2.00,   1.00,   1.00,   0.00,   1.00,   1.00,   0.00,   1.00,   1.00,   0.00,   0.00,   0.00,   1.00,   0.00,   1.00,
			   2.00,   1.00,   2.00,   2.00,   0.00,   3.00,   0.00,   1.00,   0.00,   2.00,   1.00,   2.00,   0.00,   1.00,   2.00,   0.00,   2.00,   2.00,   2.00,   3.00,
			   2.00,   1.00,   1.00,   0.00,   2.00,   0.00,   0.00,   0.00,   1.00,   1.00,   2.00,   1.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   2.00,   1.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   1.00,   1.00,   1.00,   0.00,   0.00,   0.00,   0.00,   0.00,   2.00,   2.00,   0.00,   0.00,   0.00,   0.00,   1.00,
			   1.00,   1.00,   1.00,   0.00,   0.00,   0.00,   1.00,   0.00,   2.00,   3.00,   5.00,   1.00,   0.00,   0.00,   0.00,   1.00,   0.00,   2.00,   0.00,   0.00,
			   0.00,   0.00,   2.00,   2.00,   0.00,   4.00,   3.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,   1.00,   0.00,   0.00,   1.00,   0.00,   0.00,   1.00,
			   0.00,   2.00,   2.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   3.00,   2.00,   0.00,   2.00,   0.00,   0.00,   0.00,   0.00,   1.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   2.00,   2.00,   3.00,   0.00,   2.00,   1.00,   0.00,   1.00,   0.00, 267.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,
			   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,   0.00,};
			TwoWord SortMap[]={
			{  0.00,88},{  0.00,123},{  0.00,181},{  1.00,84},{  1.00,98},
			{  1.00,104},{  1.00,228},{  2.00,76},{  2.00,100},{  2.00,106},
			{  2.00,115},{  3.00,223},{  8.00,33},{124.00,60},{277.00,14},
			};
			MapType res =  m_detector->peak_detector(hist,temp,259,1,2);
			int cnt=0;
			for(MapType::iterator a=res.begin(); a != res.end(); a++,cnt++){
				ensure("Float value must match 18", a->first == SortMap[cnt].first);
				ensure("int value must match 18", a->second == SortMap[cnt].second);
		}
	}



}

#endif
