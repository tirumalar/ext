
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\stm32f10x_tim.o:     file format elf32-littlearm
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\stm32f10x_tim.o

Disassembly of section .text.TIM_TimeBaseInit:

00000000 <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:252
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
   0:	8802      	ldrh	r2, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:246
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
   2:	b410      	push	{r4}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:252
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
   4:	f002 028f 	and.w	r2, r2, #143	; 0x8f
   8:	8002      	strh	r2, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:253
  TIMx->CR1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision |
   a:	8803      	ldrh	r3, [r0, #0]
   c:	88ca      	ldrh	r2, [r1, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:246
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
   e:	460c      	mov	r4, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:253
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
  TIMx->CR1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision |
  10:	b29b      	uxth	r3, r3
  12:	8849      	ldrh	r1, [r1, #2]
  14:	4313      	orrs	r3, r2
  16:	430b      	orrs	r3, r1
  18:	b29b      	uxth	r3, r3
  1a:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:257
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
  1c:	88a2      	ldrh	r2, [r4, #4]
  1e:	8582      	strh	r2, [r0, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:260
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
  20:	8823      	ldrh	r3, [r4, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:262
    
  if ((((uint32_t) TIMx) == TIM1_BASE) || (((uint32_t) TIMx) == TIM8_BASE))  
  22:	f642 4200 	movw	r2, #11264	; 0x2c00
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:260
  
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
  26:	8503      	strh	r3, [r0, #40]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:262
    
  if ((((uint32_t) TIMx) == TIM1_BASE) || (((uint32_t) TIMx) == TIM8_BASE))  
  28:	f243 4300 	movw	r3, #13312	; 0x3400
  2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  30:	f2c4 0201 	movt	r2, #16385	; 0x4001
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2300      	movne	r3, #0
  3a:	2301      	moveq	r3, #1
  3c:	4290      	cmp	r0, r2
  3e:	bf08      	it	eq
  40:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  44:	b10b      	cbz	r3, 4a <TIM_TimeBaseInit+0x4a>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:265
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  46:	7a23      	ldrb	r3, [r4, #8]
  48:	8603      	strh	r3, [r0, #48]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:269
  }

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
  4a:	f04f 0301 	mov.w	r3, #1	; 0x1
  4e:	8283      	strh	r3, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:270
}
  50:	bc10      	pop	{r4}
  52:	4770      	bx	lr
Disassembly of section .text.TIM_OC1Init:

00000000 <TIM_OC1Init>:
TIM_OC1Init():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:290
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:281
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:290
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
   6:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   a:	041b      	lsls	r3, r3, #16
   c:	0c1b      	lsrs	r3, r3, #16
   e:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:281
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  10:	460d      	mov	r5, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:293
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  12:	8c01      	ldrh	r1, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:295
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  14:	8883      	ldrh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:298
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  16:	8b02      	ldrh	r2, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:295
  TIMx->CCER &= CCER_CC1E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  18:	b29e      	uxth	r6, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:298
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  1a:	b297      	uxth	r7, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:309
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  1c:	886b      	ldrh	r3, [r5, #2]
  1e:	892a      	ldrh	r2, [r5, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:307
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
  20:	f021 0102 	bic.w	r1, r1, #2	; 0x2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:309
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  24:	4313      	orrs	r3, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:307
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
  26:	0409      	lsls	r1, r1, #16
  28:	0c09      	lsrs	r1, r1, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:309
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  2a:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:312
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  2c:	ea43 0c01 	orr.w	ip, r3, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:317
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  30:	f243 4300 	movw	r3, #13312	; 0x3400
  34:	f642 4100 	movw	r1, #11264	; 0x2c00
  38:	f2c4 0301 	movt	r3, #16385	; 0x4001
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:315
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  3c:	88ea      	ldrh	r2, [r5, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:317
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  3e:	f2c4 0101 	movt	r1, #16385	; 0x4001
  42:	4298      	cmp	r0, r3
  44:	bf14      	ite	ne
  46:	2300      	movne	r3, #0
  48:	2301      	moveq	r3, #1
  4a:	4288      	cmp	r0, r1
  4c:	bf08      	it	eq
  4e:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:304
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  52:	f8b5 8000 	ldrh.w	r8, [r5]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:281
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  56:	4604      	mov	r4, r0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:315
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  58:	8682      	strh	r2, [r0, #52]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:317
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  5a:	b1e3      	cbz	r3, 96 <TIM_OC1Init+0x96>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:325
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
  5c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:327
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
  60:	8969      	ldrh	r1, [r5, #10]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:325
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
  62:	f2c0 0300 	movt	r3, #0	; 0x0
  66:	ea0c 0303 	and.w	r3, ip, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:329
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
  6a:	f64f 72fb 	movw	r2, #65531	; 0xfffb
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:327
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
  6e:	430b      	orrs	r3, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:329
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
  70:	f2c0 0200 	movt	r2, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:332
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
  74:	88a9      	ldrh	r1, [r5, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:329
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
  76:	ea03 0202 	and.w	r2, r3, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:332
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
  7a:	ea42 0c01 	orr.w	ip, r2, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:337
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
  7e:	89eb      	ldrh	r3, [r5, #14]
  80:	89aa      	ldrh	r2, [r5, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:335
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
  82:	f647 40ff 	movw	r0, #31999	; 0x7cff
  86:	f2c0 0000 	movt	r0, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:337
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
  8a:	4313      	orrs	r3, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:335
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
  8c:	ea06 0000 	and.w	r0, r6, r0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:337
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
  90:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:339
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  92:	ea43 0600 	orr.w	r6, r3, r0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:301
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  96:	f64f 738f 	movw	r3, #65423	; 0xff8f
  9a:	f2c0 0300 	movt	r3, #0	; 0x0
  9e:	ea07 0303 	and.w	r3, r7, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:304
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  a2:	ea43 0308 	orr.w	r3, r3, r8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:342
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  a6:	80a6      	strh	r6, [r4, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:345
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  a8:	8323      	strh	r3, [r4, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:348
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  aa:	f8a4 c020 	strh.w	ip, [r4, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:349
}
  ae:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  b2:	4770      	bx	lr
Disassembly of section .text.TIM_OC2Init:

00000000 <TIM_OC2Init>:
TIM_OC2Init():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:369
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:360
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   2:	b470      	push	{r4, r5, r6}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:369
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
   4:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:372
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
   e:	8c02      	ldrh	r2, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:374
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  10:	8883      	ldrh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:360
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  12:	460c      	mov	r4, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:386
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
  14:	f022 0220 	bic.w	r2, r2, #32	; 0x20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:374
  TIMx->CCER &= CCER_CC2E_Reset;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  18:	fa1f fc83 	uxth.w	ip, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:386
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
  1c:	0412      	lsls	r2, r2, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:388
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  1e:	8923      	ldrh	r3, [r4, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:386
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
  20:	0c12      	lsrs	r2, r2, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:388
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  22:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:391
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  26:	8863      	ldrh	r3, [r4, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:388
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  28:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:391
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  2a:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:394
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  2e:	88e3      	ldrh	r3, [r4, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:377
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  30:	8b01      	ldrh	r1, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:383
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  32:	8826      	ldrh	r6, [r4, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:394
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  34:	8703      	strh	r3, [r0, #56]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:396
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  36:	f243 4300 	movw	r3, #13312	; 0x3400
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:377
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  3a:	b28d      	uxth	r5, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:396
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:391
  tmpccer &= CCER_CC2P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  40:	b291      	uxth	r1, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:396
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  42:	f642 4200 	movw	r2, #11264	; 0x2c00
  46:	f2c4 0201 	movt	r2, #16385	; 0x4001
  4a:	4298      	cmp	r0, r3
  4c:	bf14      	ite	ne
  4e:	2300      	movne	r3, #0
  50:	2301      	moveq	r3, #1
  52:	4290      	cmp	r0, r2
  54:	bf08      	it	eq
  56:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5a:	b30b      	cbz	r3, a0 <TIM_OC2Init+0xa0>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:404
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
  5c:	f64f 727f 	movw	r2, #65407	; 0xff7f
  60:	f2c0 0200 	movt	r2, #0	; 0x0
  64:	ea01 0202 	and.w	r2, r1, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:406
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
  68:	8961      	ldrh	r1, [r4, #10]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:408
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
  6a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:406
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
  6e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:408
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
  72:	f2c0 0300 	movt	r3, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:411
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
  76:	88a1      	ldrh	r1, [r4, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:408
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
  78:	ea02 0303 	and.w	r3, r2, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:411
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
  7c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:414
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
  80:	f247 32ff 	movw	r2, #29695	; 0x73ff
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:411
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
  84:	b299      	uxth	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:414
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
  86:	f2c0 0200 	movt	r2, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:416
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  8a:	89a3      	ldrh	r3, [r4, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:414
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
  8c:	ea0c 0202 	and.w	r2, ip, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:416
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  90:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:418
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  94:	89e3      	ldrh	r3, [r4, #14]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:416
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  96:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:418
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  98:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
  9c:	fa1f fc82 	uxth.w	ip, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:380
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  a0:	f648 73ff 	movw	r3, #36863	; 0x8fff
  a4:	f2c0 0300 	movt	r3, #0	; 0x0
  a8:	ea05 0303 	and.w	r3, r5, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:383
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  ac:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  b0:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:421
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  b2:	f8a0 c004 	strh.w	ip, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:424
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  b6:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:427
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  b8:	8401      	strh	r1, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:428
}
  ba:	bc70      	pop	{r4, r5, r6}
  bc:	4770      	bx	lr
  be:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC3Init:

00000000 <TIM_OC3Init>:
TIM_OC3Init():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:448
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:439
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   2:	b470      	push	{r4, r5, r6}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:448
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
   4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:451
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   e:	8c02      	ldrh	r2, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:453
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  10:	8883      	ldrh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:439
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  12:	460c      	mov	r4, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:465
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
  14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:453
  TIMx->CCER &= CCER_CC3E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  18:	fa1f fc83 	uxth.w	ip, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:465
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
  1c:	0412      	lsls	r2, r2, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:467
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  1e:	8923      	ldrh	r3, [r4, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:465
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
  20:	0c12      	lsrs	r2, r2, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:467
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  22:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:470
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  26:	8863      	ldrh	r3, [r4, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:467
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  28:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:470
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  2a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:473
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  2e:	88e3      	ldrh	r3, [r4, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:456
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  30:	8b81      	ldrh	r1, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:462
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  32:	8826      	ldrh	r6, [r4, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:473
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  34:	8783      	strh	r3, [r0, #60]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:475
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  36:	f243 4300 	movw	r3, #13312	; 0x3400
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:456
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  3a:	b28d      	uxth	r5, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:475
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:470
  tmpccer &= CCER_CC3P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  40:	b291      	uxth	r1, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:475
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  42:	f642 4200 	movw	r2, #11264	; 0x2c00
  46:	f2c4 0201 	movt	r2, #16385	; 0x4001
  4a:	4298      	cmp	r0, r3
  4c:	bf14      	ite	ne
  4e:	2300      	movne	r3, #0
  50:	2301      	moveq	r3, #1
  52:	4290      	cmp	r0, r2
  54:	bf08      	it	eq
  56:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5a:	b30b      	cbz	r3, a0 <TIM_OC3Init+0xa0>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:483
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
  5c:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
  60:	f2c0 0200 	movt	r2, #0	; 0x0
  64:	ea01 0202 	and.w	r2, r1, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:485
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
  68:	8961      	ldrh	r1, [r4, #10]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:487
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
  6a:	f64f 33ff 	movw	r3, #64511	; 0xfbff
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:485
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
  6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:487
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
  72:	f2c0 0300 	movt	r3, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:490
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
  76:	88a1      	ldrh	r1, [r4, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:487
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
  78:	ea02 0303 	and.w	r3, r2, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:490
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
  7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:493
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
  80:	f644 72ff 	movw	r2, #20479	; 0x4fff
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:490
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
  84:	b299      	uxth	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:493
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
  86:	f2c0 0200 	movt	r2, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:495
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  8a:	89a3      	ldrh	r3, [r4, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:493
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
  8c:	ea0c 0202 	and.w	r2, ip, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:495
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  90:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:497
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  94:	89e3      	ldrh	r3, [r4, #14]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:495
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  96:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:497
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  98:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  9c:	fa1f fc82 	uxth.w	ip, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:459
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  a0:	f64f 738f 	movw	r3, #65423	; 0xff8f
  a4:	f2c0 0300 	movt	r3, #0	; 0x0
  a8:	ea05 0303 	and.w	r3, r5, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:462
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  ac:	4333      	orrs	r3, r6
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:500
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  ae:	f8a0 c004 	strh.w	ip, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:503
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  b2:	8383      	strh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:506
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  b4:	8401      	strh	r1, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:507
}
  b6:	bc70      	pop	{r4, r5, r6}
  b8:	4770      	bx	lr
  ba:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC4Init:

00000000 <TIM_OC4Init>:
TIM_OC4Init():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:527
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:518
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:527
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
   6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a:	041b      	lsls	r3, r3, #16
   c:	0c1b      	lsrs	r3, r3, #16
   e:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:530
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  10:	8c02      	ldrh	r2, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:532
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  12:	8883      	ldrh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:530
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  14:	fa1f f882 	uxth.w	r8, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:532
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  18:	fa1f fc83 	uxth.w	ip, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:552
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  1c:	88cb      	ldrh	r3, [r1, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:535
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  1e:	8b82      	ldrh	r2, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:541
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  20:	880d      	ldrh	r5, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:546
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  22:	890e      	ldrh	r6, [r1, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:549
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  24:	884f      	ldrh	r7, [r1, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:552
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  26:	f8a0 3040 	strh.w	r3, [r0, #64]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:554
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  2a:	f243 4300 	movw	r3, #13312	; 0x3400
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:535
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  2e:	b294      	uxth	r4, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:554
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  30:	f2c4 0301 	movt	r3, #16385	; 0x4001
  34:	f642 4200 	movw	r2, #11264	; 0x2c00
  38:	f2c4 0201 	movt	r2, #16385	; 0x4001
  3c:	4298      	cmp	r0, r3
  3e:	bf14      	ite	ne
  40:	2300      	movne	r3, #0
  42:	2301      	moveq	r3, #1
  44:	4290      	cmp	r0, r2
  46:	bf08      	it	eq
  48:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  4c:	b13b      	cbz	r3, 5e <TIM_OC4Init+0x5e>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:558
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
  4e:	ea4f 438c 	mov.w	r3, ip, lsl #18
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:560
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  52:	898a      	ldrh	r2, [r1, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:558
  
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
  54:	0c9b      	lsrs	r3, r3, #18
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:560
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  56:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
  5a:	fa1f fc83 	uxth.w	ip, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:544
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  5e:	f64d 72ff 	movw	r2, #57343	; 0xdfff
  62:	f2c0 0200 	movt	r2, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:538
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  66:	f648 73ff 	movw	r3, #36863	; 0x8fff
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:544
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  6a:	ea08 0202 	and.w	r2, r8, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:538
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  6e:	f2c0 0300 	movt	r3, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:546
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  72:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:538
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  76:	ea04 0303 	and.w	r3, r4, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:546
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  7a:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:541
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  7c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:549
  tmpccer &= CCER_CC4P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  80:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:541
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  84:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:549
  tmpccer &= CCER_CC4P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  86:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:563
    tmpcr2 &= CR2_OIS4_Reset;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  88:	f8a0 c004 	strh.w	ip, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:566
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  8c:	8383      	strh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:569
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  8e:	8402      	strh	r2, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:570
}
  90:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  94:	4770      	bx	lr
  96:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ICInit:

00000000 <TIM_ICInit>:
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:590
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   0:	880b      	ldrh	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:581
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   2:	b470      	push	{r4, r5, r6}
   4:	4605      	mov	r5, r0
   6:	460e      	mov	r6, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:590
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   8:	2b00      	cmp	r3, #0
   a:	d032      	beq.n	72 <TIM_ICInit+0x72>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:599
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
   c:	2b04      	cmp	r3, #4
   e:	d057      	beq.n	c0 <TIM_ICInit+0xc0>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:608
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  10:	2b08      	cmp	r3, #8
  12:	f000 8082 	beq.w	11a <TIM_ICInit+0x11a>
TI4_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2769
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  16:	8c2b      	ldrh	r3, [r5, #32]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:620
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  18:	884c      	ldrh	r4, [r1, #2]
TI4_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2769
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  1e:	041b      	lsls	r3, r3, #16
  20:	0c1b      	lsrs	r3, r3, #16
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:620
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  22:	8889      	ldrh	r1, [r1, #4]
  24:	8930      	ldrh	r0, [r6, #8]
TI4_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2769
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  26:	842b      	strh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2770
  tmpccmr2 = TIMx->CCMR2;
  28:	8baa      	ldrh	r2, [r5, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2771
  tmpccer = TIMx->CCER;
  2a:	8c2b      	ldrh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2775
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  30:	0512      	lsls	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2771
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  32:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2775
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  34:	0d12      	lsrs	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2776
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2781
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
  3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2776
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  3e:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2781
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
  40:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2777
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  44:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2781

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
  48:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2777
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  4a:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2781

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
  4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2783
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  50:	83aa      	strh	r2, [r5, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2784
  TIMx->CCER = tmpccer ;
  52:	842b      	strh	r3, [r5, #32]
TIM_SetIC4Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2396
{  
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
  54:	8bab      	ldrh	r3, [r5, #28]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:624
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  56:	88f1      	ldrh	r1, [r6, #6]
TIM_SetIC4Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2396
{  
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
  58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  5c:	041b      	lsls	r3, r3, #16
  5e:	0c1b      	lsrs	r3, r3, #16
  60:	83ab      	strh	r3, [r5, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2398
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
  62:	8baa      	ldrh	r2, [r5, #28]
  64:	b292      	uxth	r2, r2
  66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  6a:	b292      	uxth	r2, r2
  6c:	83aa      	strh	r2, [r5, #28]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:626
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
  6e:	bc70      	pop	{r4, r5, r6}
  70:	4770      	bx	lr
TI1_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2660
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  72:	8c2b      	ldrh	r3, [r5, #32]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:593
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  74:	8849      	ldrh	r1, [r1, #2]
TI1_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2660
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  76:	f023 0301 	bic.w	r3, r3, #1	; 0x1
  7a:	041b      	lsls	r3, r3, #16
  7c:	0c1b      	lsrs	r3, r3, #16
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:593
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  7e:	88b4      	ldrh	r4, [r6, #4]
  80:	8930      	ldrh	r0, [r6, #8]
TI1_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2660
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  82:	842b      	strh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
  tmpccmr1 = TIMx->CCMR1;
  84:	8b2a      	ldrh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2662
  tmpccer = TIMx->CCER;
  86:	8c2b      	ldrh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  88:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  8a:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  8e:	f023 0302 	bic.w	r3, r3, #2	; 0x2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  92:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  96:	041b      	lsls	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  98:	f041 0101 	orr.w	r1, r1, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  9c:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  9e:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  a0:	430b      	orrs	r3, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  a2:	4322      	orrs	r2, r4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2670
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  a4:	832a      	strh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2671
  TIMx->CCER = tmpccer;
  a6:	842b      	strh	r3, [r5, #32]
TIM_SetIC1Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2330
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
  a8:	8b2b      	ldrh	r3, [r5, #24]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:597
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  aa:	88f1      	ldrh	r1, [r6, #6]
TIM_SetIC1Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2330
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
  ac:	f023 030c 	bic.w	r3, r3, #12	; 0xc
  b0:	041b      	lsls	r3, r3, #16
  b2:	0c1b      	lsrs	r3, r3, #16
  b4:	832b      	strh	r3, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2332
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
  b6:	8b2a      	ldrh	r2, [r5, #24]
  b8:	b292      	uxth	r2, r2
  ba:	430a      	orrs	r2, r1
  bc:	832a      	strh	r2, [r5, #24]
  be:	e7d6      	b.n	6e <TIM_ICInit+0x6e>
TI2_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2695
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  c0:	8c2b      	ldrh	r3, [r5, #32]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:602
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  c2:	884c      	ldrh	r4, [r1, #2]
TI2_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2695
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  c4:	f023 0310 	bic.w	r3, r3, #16	; 0x10
  c8:	041b      	lsls	r3, r3, #16
  ca:	0c1b      	lsrs	r3, r3, #16
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:602
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  cc:	8888      	ldrh	r0, [r1, #4]
  ce:	8909      	ldrh	r1, [r1, #8]
TI2_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2695
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  d0:	842b      	strh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2696
  tmpccmr1 = TIMx->CCMR1;
  d2:	8b2a      	ldrh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
  tmpccer = TIMx->CCER;
  d4:	8c2b      	ldrh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  da:	0512      	lsls	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  dc:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  de:	0d12      	lsrs	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2701
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  e0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  e4:	f023 0320 	bic.w	r3, r3, #32	; 0x20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2701
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  e8:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  ea:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  f2:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  f4:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  f6:	f043 0310 	orr.w	r3, r3, #16	; 0x10
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2707
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  fa:	832a      	strh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2708
  TIMx->CCER = tmpccer;
  fc:	842b      	strh	r3, [r5, #32]
TIM_SetIC2Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2352
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
  fe:	8b2b      	ldrh	r3, [r5, #24]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:606
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 100:	88f1      	ldrh	r1, [r6, #6]
TIM_SetIC2Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2352
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 102:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 106:	041b      	lsls	r3, r3, #16
 108:	0c1b      	lsrs	r3, r3, #16
 10a:	832b      	strh	r3, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2354
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 10c:	8b2a      	ldrh	r2, [r5, #24]
 10e:	b292      	uxth	r2, r2
 110:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 114:	b292      	uxth	r2, r2
 116:	832a      	strh	r2, [r5, #24]
 118:	e7a9      	b.n	6e <TIM_ICInit+0x6e>
TI3_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2732
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 11a:	8c2b      	ldrh	r3, [r5, #32]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:611
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 11c:	884c      	ldrh	r4, [r1, #2]
TI3_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2732
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 11e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 122:	041b      	lsls	r3, r3, #16
 124:	0c1b      	lsrs	r3, r3, #16
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:611
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 126:	8888      	ldrh	r0, [r1, #4]
 128:	8909      	ldrh	r1, [r1, #8]
TI3_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2732
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 12a:	842b      	strh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2733
  tmpccmr2 = TIMx->CCMR2;
 12c:	8baa      	ldrh	r2, [r5, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2734
  tmpccer = TIMx->CCER;
 12e:	8c2b      	ldrh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2733
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
  tmpccmr2 = TIMx->CCMR2;
 130:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2734
  tmpccer = TIMx->CCER;
 132:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2738
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 134:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2741
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
 138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2738
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 13c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2741
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
 140:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2738
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 144:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2741
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
 146:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2738
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 148:	4302      	orrs	r2, r0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2741
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
 14a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2743
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 14e:	83aa      	strh	r2, [r5, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2744
  TIMx->CCER = tmpccer;
 150:	842b      	strh	r3, [r5, #32]
TIM_SetIC3Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2374
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 152:	8bab      	ldrh	r3, [r5, #28]
TIM_ICInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:615
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 154:	88f1      	ldrh	r1, [r6, #6]
TIM_SetIC3Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2374
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 156:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 15a:	041b      	lsls	r3, r3, #16
 15c:	0c1b      	lsrs	r3, r3, #16
 15e:	83ab      	strh	r3, [r5, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2376
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 160:	8baa      	ldrh	r2, [r5, #28]
 162:	b292      	uxth	r2, r2
 164:	430a      	orrs	r2, r1
 166:	83aa      	strh	r2, [r5, #28]
 168:	e781      	b.n	6e <TIM_ICInit+0x6e>
TIM_ICInit():
 16a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_PWMIConfig:

00000000 <TIM_PWMIConfig>:
TIM_PWMIConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:637
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b4f0      	push	{r4, r5, r6, r7}
   2:	4605      	mov	r5, r0
   4:	4608      	mov	r0, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:652
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
   6:	f8b0 c004 	ldrh.w	ip, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:643
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
   a:	8849      	ldrh	r1, [r1, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:660
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   c:	8803      	ldrh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:643
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
   e:	2900      	cmp	r1, #0
  10:	bf0c      	ite	eq
  12:	2702      	moveq	r7, #2
  14:	2700      	movne	r7, #0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:652
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  16:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
  1a:	bf0c      	ite	eq
  1c:	2602      	moveq	r6, #2
  1e:	2601      	movne	r6, #1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:660
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  20:	2b00      	cmp	r3, #0
  22:	d04c      	beq.n	be <TIM_PWMIConfig+0xbe>
TI2_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2695
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  24:	8c2b      	ldrh	r3, [r5, #32]
TIM_PWMIConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:675
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  26:	8904      	ldrh	r4, [r0, #8]
TI2_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2695
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  28:	f023 0310 	bic.w	r3, r3, #16	; 0x10
  2c:	041b      	lsls	r3, r3, #16
  2e:	0c1b      	lsrs	r3, r3, #16
  30:	842b      	strh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2696
  tmpccmr1 = TIMx->CCMR1;
  32:	8b2a      	ldrh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
  tmpccer = TIMx->CCER;
  34:	8c2b      	ldrh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  3a:	0512      	lsls	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  3c:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  3e:	0d12      	lsrs	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2701
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  40:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  44:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  48:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2701
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  4c:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  4e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  52:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  54:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  56:	f043 0310 	orr.w	r3, r3, #16	; 0x10
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2707
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  5a:	832a      	strh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2708
  TIMx->CCER = tmpccer;
  5c:	842b      	strh	r3, [r5, #32]
TIM_SetIC2Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2352
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
  5e:	8b2b      	ldrh	r3, [r5, #24]
TIM_PWMIConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:678
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  60:	88c0      	ldrh	r0, [r0, #6]
TIM_SetIC2Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2352
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
  62:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  66:	041b      	lsls	r3, r3, #16
  68:	0c1b      	lsrs	r3, r3, #16
  6a:	832b      	strh	r3, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2354
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
  6c:	8b2a      	ldrh	r2, [r5, #24]
  6e:	b292      	uxth	r2, r2
  70:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  74:	b292      	uxth	r2, r2
  76:	832a      	strh	r2, [r5, #24]
TI1_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2660
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  78:	8c2b      	ldrh	r3, [r5, #32]
  7a:	f023 0301 	bic.w	r3, r3, #1	; 0x1
  7e:	041b      	lsls	r3, r3, #16
  80:	0c1b      	lsrs	r3, r3, #16
  82:	842b      	strh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
  tmpccmr1 = TIMx->CCMR1;
  84:	8b2a      	ldrh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2662
  tmpccer = TIMx->CCER;
  86:	8c29      	ldrh	r1, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  88:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2662
  tmpccer = TIMx->CCER;
  8a:	b289      	uxth	r1, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  8c:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  90:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  94:	f021 0102 	bic.w	r1, r1, #2	; 0x2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  98:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  9a:	f041 0101 	orr.w	r1, r1, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  9e:	4332      	orrs	r2, r6
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  a0:	4339      	orrs	r1, r7
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2670
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  a2:	832a      	strh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2671
  TIMx->CCER = tmpccer;
  a4:	8429      	strh	r1, [r5, #32]
TIM_SetIC1Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2330
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
  a6:	8b2b      	ldrh	r3, [r5, #24]
  a8:	f023 030c 	bic.w	r3, r3, #12	; 0xc
  ac:	041b      	lsls	r3, r3, #16
  ae:	0c1b      	lsrs	r3, r3, #16
  b0:	832b      	strh	r3, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2332
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
  b2:	8b2a      	ldrh	r2, [r5, #24]
  b4:	b292      	uxth	r2, r2
  b6:	4302      	orrs	r2, r0
  b8:	832a      	strh	r2, [r5, #24]
TIM_PWMIConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:684
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
  ba:	bcf0      	pop	{r4, r5, r6, r7}
  bc:	4770      	bx	lr
TI1_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2660
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  be:	8c2b      	ldrh	r3, [r5, #32]
TIM_PWMIConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:663
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  c0:	8904      	ldrh	r4, [r0, #8]
TI1_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2660
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  c2:	f023 0301 	bic.w	r3, r3, #1	; 0x1
  c6:	041b      	lsls	r3, r3, #16
  c8:	0c1b      	lsrs	r3, r3, #16
  ca:	842b      	strh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
  tmpccmr1 = TIMx->CCMR1;
  cc:	8b2a      	ldrh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2662
  tmpccer = TIMx->CCER;
  ce:	8c2b      	ldrh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  d0:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  d2:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  d6:	f023 0302 	bic.w	r3, r3, #2	; 0x2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  da:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  de:	041b      	lsls	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  e0:	f041 0101 	orr.w	r1, r1, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  e4:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  e6:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  e8:	430b      	orrs	r3, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  ea:	ea42 020c 	orr.w	r2, r2, ip
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2670
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  ee:	832a      	strh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2671
  TIMx->CCER = tmpccer;
  f0:	842b      	strh	r3, [r5, #32]
TIM_SetIC1Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2330
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
  f2:	8b2b      	ldrh	r3, [r5, #24]
TIM_PWMIConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:666
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  f4:	88c0      	ldrh	r0, [r0, #6]
TIM_SetIC1Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2330
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
  f6:	f023 030c 	bic.w	r3, r3, #12	; 0xc
  fa:	041b      	lsls	r3, r3, #16
  fc:	0c1b      	lsrs	r3, r3, #16
  fe:	832b      	strh	r3, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2332
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 100:	8b2a      	ldrh	r2, [r5, #24]
 102:	b292      	uxth	r2, r2
 104:	4302      	orrs	r2, r0
 106:	832a      	strh	r2, [r5, #24]
TI2_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2695
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 108:	8c2b      	ldrh	r3, [r5, #32]
 10a:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 10e:	041b      	lsls	r3, r3, #16
 110:	0c1b      	lsrs	r3, r3, #16
 112:	842b      	strh	r3, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2696
  tmpccmr1 = TIMx->CCMR1;
 114:	8b2a      	ldrh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
  tmpccer = TIMx->CCER;
 116:	8c29      	ldrh	r1, [r5, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 118:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 11c:	0512      	lsls	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 11e:	b289      	uxth	r1, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 120:	0d12      	lsrs	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2701
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 122:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
 126:	f021 0120 	bic.w	r1, r1, #32	; 0x20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2701
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 12a:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
 12c:	f041 0110 	orr.w	r1, r1, #16	; 0x10
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 130:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
 134:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2707
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 138:	832a      	strh	r2, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2708
  TIMx->CCER = tmpccer;
 13a:	8429      	strh	r1, [r5, #32]
TIM_SetIC2Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2352
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 13c:	8b2b      	ldrh	r3, [r5, #24]
 13e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 142:	041b      	lsls	r3, r3, #16
 144:	0c1b      	lsrs	r3, r3, #16
 146:	832b      	strh	r3, [r5, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2354
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 148:	8b2a      	ldrh	r2, [r5, #24]
 14a:	b292      	uxth	r2, r2
 14c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 150:	b292      	uxth	r2, r2
 152:	832a      	strh	r2, [r5, #24]
 154:	e7b1      	b.n	ba <TIM_PWMIConfig+0xba>
TIM_PWMIConfig():
 156:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_BDTRConfig:

00000000 <TIM_BDTRConfig>:
TIM_BDTRConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:706
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
   0:	880a      	ldrh	r2, [r1, #0]
   2:	884b      	ldrh	r3, [r1, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:695
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
   4:	b410      	push	{r4}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:706
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
   6:	888c      	ldrh	r4, [r1, #4]
   8:	4313      	orrs	r3, r2
   a:	88ca      	ldrh	r2, [r1, #6]
   c:	4323      	orrs	r3, r4
   e:	890c      	ldrh	r4, [r1, #8]
  10:	4313      	orrs	r3, r2
  12:	894a      	ldrh	r2, [r1, #10]
  14:	4323      	orrs	r3, r4
  16:	898c      	ldrh	r4, [r1, #12]
  18:	4313      	orrs	r3, r2
  1a:	4323      	orrs	r3, r4
  1c:	b29b      	uxth	r3, r3
  1e:	f8a0 3044 	strh.w	r3, [r0, #68]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:710
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
  22:	bc10      	pop	{r4}
  24:	4770      	bx	lr
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_TimeBaseStructInit:

00000000 <TIM_TimeBaseStructInit>:
TIM_TimeBaseStructInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:721
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
   0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:722
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
   6:	2300      	movs	r3, #0
   8:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:723
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
   a:	80c3      	strh	r3, [r0, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:724
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
   c:	8043      	strh	r3, [r0, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:725
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
   e:	7203      	strb	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:726
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OCStructInit:

00000000 <TIM_OCStructInit>:
TIM_OCStructInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:737
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
   0:	2300      	movs	r3, #0
   2:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:738
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
   4:	8043      	strh	r3, [r0, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:739
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
   6:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:740
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
   8:	80c3      	strh	r3, [r0, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:741
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
   a:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:742
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
   c:	8143      	strh	r3, [r0, #10]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:743
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
   e:	8183      	strh	r3, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:744
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
  10:	81c3      	strh	r3, [r0, #14]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:745
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_ICStructInit:

00000000 <TIM_ICStructInit>:
TIM_ICStructInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:756
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   0:	2300      	movs	r3, #0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:758
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
   2:	f04f 0201 	mov.w	r2, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:756
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   6:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:757
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
   8:	8043      	strh	r3, [r0, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:758
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
   a:	8082      	strh	r2, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:759
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
   c:	80c3      	strh	r3, [r0, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:760
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
   e:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:761
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_BDTRStructInit:

00000000 <TIM_BDTRStructInit>:
TIM_BDTRStructInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:772
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
   0:	2300      	movs	r3, #0
   2:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:773
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
   4:	8043      	strh	r3, [r0, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:774
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
   6:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:775
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
   8:	80c3      	strh	r3, [r0, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:776
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
   a:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:777
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
   c:	8143      	strh	r3, [r0, #10]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:778
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
   e:	8183      	strh	r3, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:779
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_Cmd:

00000000 <TIM_Cmd>:
TIM_Cmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:794
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <TIM_Cmd+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:802
    TIMx->CR1 |= CR1_CEN_Set;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   8:	059b      	lsls	r3, r3, #22
   a:	0d9b      	lsrs	r3, r3, #22
   c:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:804
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:797
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	b29b      	uxth	r3, r3
  14:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  18:	8003      	strh	r3, [r0, #0]
  1a:	e7f8      	b.n	e <TIM_Cmd+0xe>
Disassembly of section .text.TIM_CtrlPWMOutputs:

00000000 <TIM_CtrlPWMOutputs>:
TIM_CtrlPWMOutputs():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:818
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <TIM_CtrlPWMOutputs+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:826
    TIMx->BDTR |= BDTR_MOE_Set;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
   2:	f8b0 3044 	ldrh.w	r3, [r0, #68]
   6:	045b      	lsls	r3, r3, #17
   8:	0c5b      	lsrs	r3, r3, #17
   a:	f8a0 3044 	strh.w	r3, [r0, #68]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:828
  }  
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:821
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
  10:	f8b0 3044 	ldrh.w	r3, [r0, #68]
  14:	b29b      	uxth	r3, r3
  16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  1a:	f8a0 3044 	strh.w	r3, [r0, #68]
  1e:	e7f6      	b.n	e <TIM_CtrlPWMOutputs+0xe>
Disassembly of section .text.TIM_ITConfig:

00000000 <TIM_ITConfig>:
TIM_ITConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:857
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b92a      	cbnz	r2, e <TIM_ITConfig+0xe>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:865
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	43ca      	mvns	r2, r1
   6:	b29b      	uxth	r3, r3
   8:	4013      	ands	r3, r2
   a:	8183      	strh	r3, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:867
  }
}
   c:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:860
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
   e:	8983      	ldrh	r3, [r0, #12]
  10:	b29b      	uxth	r3, r3
  12:	ea41 0303 	orr.w	r3, r1, r3
  16:	8183      	strh	r3, [r0, #12]
  18:	e7f8      	b.n	c <TIM_ITConfig+0xc>
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GenerateEvent:

00000000 <TIM_GenerateEvent>:
TIM_GenerateEvent():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:894
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
   0:	8281      	strh	r1, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:895
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_DMAConfig:

00000000 <TIM_DMAConfig>:
TIM_DMAConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:921
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
   0:	430a      	orrs	r2, r1
   2:	f8a0 2048 	strh.w	r2, [r0, #72]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:922
}
   6:	4770      	bx	lr
Disassembly of section .text.TIM_DMACmd:

00000000 <TIM_DMACmd>:
TIM_DMACmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:947
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b92a      	cbnz	r2, e <TIM_DMACmd+0xe>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:955
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	43ca      	mvns	r2, r1
   6:	b29b      	uxth	r3, r3
   8:	4013      	ands	r3, r2
   a:	8183      	strh	r3, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:957
  }
}
   c:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:950
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
   e:	8983      	ldrh	r3, [r0, #12]
  10:	b29b      	uxth	r3, r3
  12:	ea41 0303 	orr.w	r3, r1, r3
  16:	8183      	strh	r3, [r0, #12]
  18:	e7f8      	b.n	c <TIM_DMACmd+0xc>
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_InternalClockConfig:

00000000 <TIM_InternalClockConfig>:
TIM_InternalClockConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:969
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0307 	bic.w	r3, r3, #7	; 0x7
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:970
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ITRxExternalClockConfig:

00000000 <TIM_ITRxExternalClockConfig>:
TIM_SelectInputTrigger():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1211
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   0:	8903      	ldrh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1213
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1215
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1217
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
   c:	8101      	strh	r1, [r0, #8]
TIM_ITRxExternalClockConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:991
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
   e:	8903      	ldrh	r3, [r0, #8]
  10:	b29b      	uxth	r3, r3
  12:	f043 0307 	orr.w	r3, r3, #7	; 0x7
  16:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:992
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_TIxExternalClockConfig:

00000000 <TIM_TIxExternalClockConfig>:
TIM_TIxExternalClockConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1019
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
   0:	2960      	cmp	r1, #96
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1012
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
   2:	b410      	push	{r4}
   4:	469c      	mov	ip, r3
   6:	4614      	mov	r4, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1019
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
   8:	d026      	beq.n	58 <TIM_TIxExternalClockConfig+0x58>
TI1_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2660
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
   a:	8c03      	ldrh	r3, [r0, #32]
   c:	f023 0301 	bic.w	r3, r3, #1	; 0x1
  10:	041b      	lsls	r3, r3, #16
  12:	0c1b      	lsrs	r3, r3, #16
  14:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
  tmpccmr1 = TIMx->CCMR1;
  16:	8b02      	ldrh	r2, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2662
  tmpccer = TIMx->CCER;
  18:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  1a:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2662
  tmpccer = TIMx->CCER;
  1c:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  1e:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  22:	f042 0201 	orr.w	r2, r2, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  26:	f023 0302 	bic.w	r3, r3, #2	; 0x2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  2a:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  2e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  32:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  34:	4323      	orrs	r3, r4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2670
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  36:	8302      	strh	r2, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2671
  TIMx->CCER = tmpccer;
  38:	8403      	strh	r3, [r0, #32]
TIM_SelectInputTrigger():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1211
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  3a:	8903      	ldrh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1213
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
  3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40:	041b      	lsls	r3, r3, #16
  42:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1215
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
  44:	ea41 0303 	orr.w	r3, r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1217
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  48:	8103      	strh	r3, [r0, #8]
TIM_TIxExternalClockConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1030
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
  4a:	8902      	ldrh	r2, [r0, #8]
  4c:	b292      	uxth	r2, r2
  4e:	f042 0207 	orr.w	r2, r2, #7	; 0x7
  52:	8102      	strh	r2, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1031
}
  54:	bc10      	pop	{r4}
  56:	4770      	bx	lr
TI2_Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2695
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  58:	8c03      	ldrh	r3, [r0, #32]
  5a:	f023 0310 	bic.w	r3, r3, #16	; 0x10
  5e:	041b      	lsls	r3, r3, #16
  60:	0c1b      	lsrs	r3, r3, #16
  62:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2696
  tmpccmr1 = TIMx->CCMR1;
  64:	8b02      	ldrh	r2, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
  tmpccer = TIMx->CCER;
  66:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  6c:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  6e:	0512      	lsls	r2, r2, #20
  70:	0d12      	lsrs	r2, r2, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  72:	f023 0320 	bic.w	r3, r3, #32	; 0x20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2701
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  7a:	f043 0310 	orr.w	r3, r3, #16	; 0x10
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  7e:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  82:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  86:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  88:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2707
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  8a:	8302      	strh	r2, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2708
  TIMx->CCER = tmpccer;
  8c:	8403      	strh	r3, [r0, #32]
  8e:	e7d4      	b.n	3a <TIM_TIxExternalClockConfig+0x3a>
Disassembly of section .text.TIM_ETRClockMode1Config:

00000000 <TIM_ETRClockMode1Config>:
TIM_ETRClockMode1Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1052
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
   0:	b410      	push	{r4}
TIM_ETRConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1132
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1136
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
   4:	b2e4      	uxtb	r4, r4
   6:	4321      	orrs	r1, r4
   8:	430a      	orrs	r2, r1
   a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   e:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1138
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  10:	8102      	strh	r2, [r0, #8]
TIM_ETRClockMode1Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1063
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  12:	8903      	ldrh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1067
  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  18:	041b      	lsls	r3, r3, #16
  1a:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1070
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
  tmpsmcr |= TIM_TS_ETRF;
  1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1072
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  20:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1073
}
  22:	bc10      	pop	{r4}
  24:	4770      	bx	lr
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ETRClockMode2Config:

00000000 <TIM_ETRClockMode2Config>:
TIM_ETRClockMode2Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1094
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
   0:	b410      	push	{r4}
TIM_ETRConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1132
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1136
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
   4:	b2e4      	uxtb	r4, r4
   6:	4321      	orrs	r1, r4
   8:	430a      	orrs	r2, r1
   a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   e:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1138
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  10:	8102      	strh	r2, [r0, #8]
TIM_ETRClockMode2Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1103
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
  12:	8903      	ldrh	r3, [r0, #8]
  14:	b29b      	uxth	r3, r3
  16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  1a:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1104
}
  1c:	bc10      	pop	{r4}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_ETRConfig:

00000000 <TIM_ETRConfig>:
TIM_ETRConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1125
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
   0:	b410      	push	{r4}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1132
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1136
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
   4:	b2e4      	uxtb	r4, r4
   6:	4321      	orrs	r1, r4
   8:	430a      	orrs	r2, r1
   a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   e:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1138
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  10:	8102      	strh	r2, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1139
}
  12:	bc10      	pop	{r4}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_PrescalerConfig:

00000000 <TIM_PrescalerConfig>:
TIM_PrescalerConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1157
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
   0:	8501      	strh	r1, [r0, #40]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1159
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
   2:	8282      	strh	r2, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1160
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_CounterModeConfig:

00000000 <TIM_CounterModeConfig>:
TIM_CounterModeConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1175
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
   0:	8803      	ldrh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1182
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	059b      	lsls	r3, r3, #22
   8:	0d9b      	lsrs	r3, r3, #22
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1184
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1186
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
   c:	8001      	strh	r1, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1187
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_SelectInputTrigger:

00000000 <TIM_SelectInputTrigger>:
TIM_SelectInputTrigger():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1205
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
   0:	8903      	ldrh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1213
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1215
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1217
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
   c:	8101      	strh	r1, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1218
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_EncoderInterfaceConfig:

00000000 <TIM_EncoderInterfaceConfig>:
TIM_EncoderInterfaceConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1241
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
   0:	b470      	push	{r4, r5, r6}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1253
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1256

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
   4:	8b05      	ldrh	r5, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1259

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   6:	8c06      	ldrh	r6, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
   8:	f425 7540 	bic.w	r5, r5, #768	; 0x300
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1259

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   c:	b2b6      	uxth	r6, r6
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
   e:	f025 0503 	bic.w	r5, r5, #3	; 0x3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1262

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  12:	f024 0407 	bic.w	r4, r4, #7	; 0x7
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  16:	042d      	lsls	r5, r5, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1271
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  18:	f026 0622 	bic.w	r6, r6, #34	; 0x22
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1262

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  1c:	0424      	lsls	r4, r4, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  1e:	0c2d      	lsrs	r5, r5, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1271
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  20:	4332      	orrs	r2, r6
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1262

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  22:	0c24      	lsrs	r4, r4, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1267
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
  24:	f445 7580 	orr.w	r5, r5, #256	; 0x100
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1271

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  28:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1263
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
  2c:	4321      	orrs	r1, r4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1267

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
  2e:	f045 0501 	orr.w	r5, r5, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1271

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  32:	b292      	uxth	r2, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1274

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  34:	8101      	strh	r1, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1277

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  36:	8305      	strh	r5, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1280

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  38:	8402      	strh	r2, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1281
}
  3a:	bc70      	pop	{r4, r5, r6}
  3c:	4770      	bx	lr
  3e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ForcedOC1Config:

00000000 <TIM_ForcedOC1Config>:
TIM_ForcedOC1Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1293
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1300
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1302
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1304
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
   c:	8301      	strh	r1, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1305
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_ForcedOC2Config:

00000000 <TIM_ForcedOC2Config>:
TIM_ForcedOC2Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1317
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1324
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
   2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1326
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1328
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  10:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1329
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_ForcedOC3Config:

00000000 <TIM_ForcedOC3Config>:
TIM_ForcedOC3Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1341
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1348
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1350
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1352
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
   c:	8381      	strh	r1, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1353
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_ForcedOC4Config:

00000000 <TIM_ForcedOC4Config>:
TIM_ForcedOC4Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1365
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1372
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
   2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1374
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1376
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  10:	8383      	strh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1377
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_ARRPreloadConfig:

00000000 <TIM_ARRPreloadConfig>:
TIM_ARRPreloadConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1387
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b931      	cbnz	r1, 10 <TIM_ARRPreloadConfig+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1399
    TIMx->CR1 |= CR1_ARPE_Set;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8:	059b      	lsls	r3, r3, #22
   a:	0d9b      	lsrs	r3, r3, #22
   c:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1401
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1394
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	b29b      	uxth	r3, r3
  14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  18:	8003      	strh	r3, [r0, #0]
  1a:	e7f8      	b.n	e <TIM_ARRPreloadConfig+0xe>
Disassembly of section .text.TIM_SelectCOM:

00000000 <TIM_SelectCOM>:
TIM_SelectCOM():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1411
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b931      	cbnz	r1, 10 <TIM_SelectCOM+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1423
    TIMx->CR2 |= CR2_CCUS_Set;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1425
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1418
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
  10:	8883      	ldrh	r3, [r0, #4]
  12:	b29b      	uxth	r3, r3
  14:	f043 0304 	orr.w	r3, r3, #4	; 0x4
  18:	8083      	strh	r3, [r0, #4]
  1a:	e7f8      	b.n	e <TIM_SelectCOM+0xe>
Disassembly of section .text.TIM_SelectCCDMA:

00000000 <TIM_SelectCCDMA>:
TIM_SelectCCDMA():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1435
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b931      	cbnz	r1, 10 <TIM_SelectCCDMA+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1447
    TIMx->CR2 |= CR2_CCDS_Set;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1449
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1442
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
  10:	8883      	ldrh	r3, [r0, #4]
  12:	b29b      	uxth	r3, r3
  14:	f043 0308 	orr.w	r3, r3, #8	; 0x8
  18:	8083      	strh	r3, [r0, #4]
  1a:	e7f8      	b.n	e <TIM_SelectCCDMA+0xe>
Disassembly of section .text.TIM_CCPreloadControl:

00000000 <TIM_CCPreloadControl>:
TIM_CCPreloadControl():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1463
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <TIM_CCPreloadControl+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1471
    TIMx->CR2 |= CR2_CCPC_Set;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1473
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1466
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
  10:	8883      	ldrh	r3, [r0, #4]
  12:	b29b      	uxth	r3, r3
  14:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  18:	8083      	strh	r3, [r0, #4]
  1a:	e7f8      	b.n	e <TIM_CCPreloadControl+0xe>
Disassembly of section .text.TIM_OC1PreloadConfig:

00000000 <TIM_OC1PreloadConfig>:
TIM_OC1PreloadConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1485
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1492
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1494
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1496
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
   c:	8301      	strh	r1, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1497
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_OC2PreloadConfig:

00000000 <TIM_OC2PreloadConfig>:
TIM_OC2PreloadConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1509
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1516
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1518
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1520
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  10:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1521
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OC3PreloadConfig:

00000000 <TIM_OC3PreloadConfig>:
TIM_OC3PreloadConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1533
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1540
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1542
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1544
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
   c:	8381      	strh	r1, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1545
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_OC4PreloadConfig:

00000000 <TIM_OC4PreloadConfig>:
TIM_OC4PreloadConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1557
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1564
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1566
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1568
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  10:	8383      	strh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1569
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OC1FastConfig:

00000000 <TIM_OC1FastConfig>:
TIM_OC1FastConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1581
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1589
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
   2:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1591
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1593
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
   c:	8301      	strh	r1, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1594
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_OC2FastConfig:

00000000 <TIM_OC2FastConfig>:
TIM_OC2FastConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1606
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1614
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
   2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1616
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1618
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  10:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1619
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OC3FastConfig:

00000000 <TIM_OC3FastConfig>:
TIM_OC3FastConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1631
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1639
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
   2:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1641
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1643
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
   c:	8381      	strh	r1, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1644
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_OC4FastConfig:

00000000 <TIM_OC4FastConfig>:
TIM_OC4FastConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1656
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1664
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
   2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1666
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1668
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  10:	8383      	strh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1669
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_ClearOC1Ref:

00000000 <TIM_ClearOC1Ref>:
TIM_ClearOC1Ref():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1681
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1688
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1690
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1692
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
   c:	8301      	strh	r1, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1693
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_ClearOC2Ref:

00000000 <TIM_ClearOC2Ref>:
TIM_ClearOC2Ref():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1705
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1712
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
   2:	045b      	lsls	r3, r3, #17
   4:	0c5b      	lsrs	r3, r3, #17
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1714
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
   6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   a:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1716
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
   c:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1717
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_ClearOC3Ref:

00000000 <TIM_ClearOC3Ref>:
TIM_ClearOC3Ref():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1729
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1736
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1738
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1740
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
   c:	8381      	strh	r1, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1741
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_ClearOC4Ref:

00000000 <TIM_ClearOC4Ref>:
TIM_ClearOC4Ref():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1753
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1760
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
   2:	045b      	lsls	r3, r3, #17
   4:	0c5b      	lsrs	r3, r3, #17
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1762
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
   6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   a:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1764
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
   c:	8383      	strh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1765
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_OC1PolarityConfig:

00000000 <TIM_OC1PolarityConfig>:
TIM_OC1PolarityConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1777
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1784
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
   2:	f023 0302 	bic.w	r3, r3, #2	; 0x2
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1785
  tmpccer |= TIM_OCPolarity;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1787
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
   c:	8401      	strh	r1, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1788
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_OC1NPolarityConfig:

00000000 <TIM_OC1NPolarityConfig>:
TIM_OC1NPolarityConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1800
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1808
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1809
  tmpccer |= TIM_OCNPolarity;
   a:	4319      	orrs	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1811
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
   c:	8401      	strh	r1, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1812
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_OC2PolarityConfig:

00000000 <TIM_OC2PolarityConfig>:
TIM_OC2PolarityConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1824
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1831
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
   2:	f023 0320 	bic.w	r3, r3, #32	; 0x20
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1832
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
   a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1834
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1835
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OC2NPolarityConfig:

00000000 <TIM_OC2NPolarityConfig>:
TIM_OC2NPolarityConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1847
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1855
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1856
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
   a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1858
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1859
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OC3PolarityConfig:

00000000 <TIM_OC3PolarityConfig>:
TIM_OC3PolarityConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1871
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1878
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
   2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1879
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1881
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1882
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OC3NPolarityConfig:

00000000 <TIM_OC3NPolarityConfig>:
TIM_OC3NPolarityConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1901
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1903
  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1904
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1906
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1907
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OC4PolarityConfig:

00000000 <TIM_OC4PolarityConfig>:
TIM_OC4PolarityConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1919
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1926
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
   2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1927
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
   a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1929
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1930
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_CCxCmd:

00000000 <TIM_CCxCmd>:
TIM_CCxCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1946
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
   0:	2301      	movs	r3, #1
   2:	408b      	lsls	r3, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1960

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
   4:	408a      	lsls	r2, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1946
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
   6:	b410      	push	{r4}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1957
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
   8:	8c04      	ldrh	r4, [r0, #32]
   a:	43db      	mvns	r3, r3
   c:	b2a4      	uxth	r4, r4
   e:	401c      	ands	r4, r3
  10:	8404      	strh	r4, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1960

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
  12:	8c03      	ldrh	r3, [r0, #32]
  14:	431a      	orrs	r2, r3
  16:	b292      	uxth	r2, r2
  18:	8402      	strh	r2, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1961
}
  1a:	bc10      	pop	{r4}
  1c:	4770      	bx	lr
  1e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_CCxNCmd:

00000000 <TIM_CCxNCmd>:
TIM_CCxNCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1976
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
   0:	2304      	movs	r3, #4
   2:	408b      	lsls	r3, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1990

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
   4:	408a      	lsls	r2, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1976
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
   6:	b410      	push	{r4}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1987
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
   8:	8c04      	ldrh	r4, [r0, #32]
   a:	43db      	mvns	r3, r3
   c:	b2a4      	uxth	r4, r4
   e:	401c      	ands	r4, r3
  10:	8404      	strh	r4, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1990

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
  12:	8c03      	ldrh	r3, [r0, #32]
  14:	431a      	orrs	r2, r3
  16:	b292      	uxth	r2, r2
  18:	8402      	strh	r2, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1991
}
  1a:	bc10      	pop	{r4}
  1c:	4770      	bx	lr
  1e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectOCxM:

00000000 <TIM_SelectOCxM>:
TIM_SelectOCxM():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2017
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
   0:	2301      	movs	r3, #1
   2:	408b      	lsls	r3, r1
   4:	b410      	push	{r4}
   6:	4614      	mov	r4, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2032
  tmp += CCMR_Offset;

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
   8:	8c02      	ldrh	r2, [r0, #32]
   a:	43db      	mvns	r3, r3
   c:	b292      	uxth	r2, r2
   e:	401a      	ands	r2, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2034

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  10:	2908      	cmp	r1, #8
  12:	bf14      	ite	ne
  14:	2300      	movne	r3, #0
  16:	2301      	moveq	r3, #1
  18:	2900      	cmp	r1, #0
  1a:	bf08      	it	eq
  1c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2027
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;
  20:	f100 0c18 	add.w	ip, r0, #24	; 0x18
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2032

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
  24:	8402      	strh	r2, [r0, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2034

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  26:	b9ab      	cbnz	r3, 54 <TIM_SelectOCxM+0x54>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2049
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_Mask;
  28:	1f0a      	subs	r2, r1, #4
  2a:	b292      	uxth	r2, r2
  2c:	0852      	lsrs	r2, r2, #1
  2e:	f852 100c 	ldr.w	r1, [r2, ip]
  32:	f648 73ff 	movw	r3, #36863	; 0x8fff
  36:	f2c0 0300 	movt	r3, #0	; 0x0
  3a:	ea01 0303 	and.w	r3, r1, r3
  3e:	f842 300c 	str.w	r3, [r2, ip]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2052
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  42:	f852 100c 	ldr.w	r1, [r2, ip]
  46:	0223      	lsls	r3, r4, #8
  48:	b29b      	uxth	r3, r3
  4a:	4319      	orrs	r1, r3
  4c:	f842 100c 	str.w	r1, [r2, ip]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2054
  }
}
  50:	bc10      	pop	{r4}
  52:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2039
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_Mask;
  54:	0849      	lsrs	r1, r1, #1
  56:	f851 200c 	ldr.w	r2, [r1, ip]
  5a:	f64f 738f 	movw	r3, #65423	; 0xff8f
  5e:	f2c0 0300 	movt	r3, #0	; 0x0
  62:	ea02 0303 	and.w	r3, r2, r3
  66:	f841 300c 	str.w	r3, [r1, ip]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2042
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  6a:	f851 200c 	ldr.w	r2, [r1, ip]
  6e:	4322      	orrs	r2, r4
  70:	f841 200c 	str.w	r2, [r1, ip]
  74:	e7ec      	b.n	50 <TIM_SelectOCxM+0x50>
  76:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_UpdateDisableConfig:

00000000 <TIM_UpdateDisableConfig>:
TIM_UpdateDisableConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2064
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b931      	cbnz	r1, 10 <TIM_UpdateDisableConfig+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2076
    TIMx->CR1 |= CR1_UDIS_Set;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	f023 0302 	bic.w	r3, r3, #2	; 0x2
   8:	059b      	lsls	r3, r3, #22
   a:	0d9b      	lsrs	r3, r3, #22
   c:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2078
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2071
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	b29b      	uxth	r3, r3
  14:	f043 0302 	orr.w	r3, r3, #2	; 0x2
  18:	8003      	strh	r3, [r0, #0]
  1a:	e7f8      	b.n	e <TIM_UpdateDisableConfig+0xe>
Disassembly of section .text.TIM_UpdateRequestConfig:

00000000 <TIM_UpdateRequestConfig>:
TIM_UpdateRequestConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2096
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
   0:	b931      	cbnz	r1, 10 <TIM_UpdateRequestConfig+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2104
    TIMx->CR1 |= CR1_URS_Set;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   8:	059b      	lsls	r3, r3, #22
   a:	0d9b      	lsrs	r3, r3, #22
   c:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2106
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2099
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	b29b      	uxth	r3, r3
  14:	f043 0304 	orr.w	r3, r3, #4	; 0x4
  18:	8003      	strh	r3, [r0, #0]
  1a:	e7f8      	b.n	e <TIM_UpdateRequestConfig+0xe>
Disassembly of section .text.TIM_SelectHallSensor:

00000000 <TIM_SelectHallSensor>:
TIM_SelectHallSensor():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2116
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b931      	cbnz	r1, 10 <TIM_SelectHallSensor+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2128
    TIMx->CR2 |= CR2_TI1S_Set;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2130
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2123
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
  10:	8883      	ldrh	r3, [r0, #4]
  12:	b29b      	uxth	r3, r3
  14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  18:	8083      	strh	r3, [r0, #4]
  1a:	e7f8      	b.n	e <TIM_SelectHallSensor+0xe>
Disassembly of section .text.TIM_SelectOnePulseMode:

00000000 <TIM_SelectOnePulseMode>:
TIM_SelectOnePulseMode():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2142
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   6:	059b      	lsls	r3, r3, #22
   8:	0d9b      	lsrs	r3, r3, #22
   a:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2149
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
   c:	8802      	ldrh	r2, [r0, #0]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8001      	strh	r1, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2150
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectOutputTrigger:

00000000 <TIM_SelectOutputTrigger>:
TIM_SelectOutputTrigger():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2174
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
   0:	8883      	ldrh	r3, [r0, #4]
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2181
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
   c:	8882      	ldrh	r2, [r0, #4]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8081      	strh	r1, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2182
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectSlaveMode:

00000000 <TIM_SelectSlaveMode>:
TIM_SelectSlaveMode():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2197
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0307 	bic.w	r3, r3, #7	; 0x7
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2204
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
   c:	8902      	ldrh	r2, [r0, #8]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8101      	strh	r1, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2205
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectMasterSlaveMode:

00000000 <TIM_SelectMasterSlaveMode>:
TIM_SelectMasterSlaveMode():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2218
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8103      	strh	r3, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2226
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
   c:	8902      	ldrh	r2, [r0, #8]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8101      	strh	r1, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2227
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetCounter:

00000000 <TIM_SetCounter>:
TIM_SetCounter():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2236
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
   0:	8481      	strh	r1, [r0, #36]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2241
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetAutoreload:

00000000 <TIM_SetAutoreload>:
TIM_SetAutoreload():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2250
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
   0:	8581      	strh	r1, [r0, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2255
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare1:

00000000 <TIM_SetCompare1>:
TIM_SetCompare1():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2264
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
   0:	8681      	strh	r1, [r0, #52]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2269
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare2:

00000000 <TIM_SetCompare2>:
TIM_SetCompare2():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2278
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
   0:	8701      	strh	r1, [r0, #56]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2283
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare3:

00000000 <TIM_SetCompare3>:
TIM_SetCompare3():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2292
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
   0:	8781      	strh	r1, [r0, #60]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2297
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare4:

00000000 <TIM_SetCompare4>:
TIM_SetCompare4():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2306
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
   0:	f8a0 1040 	strh.w	r1, [r0, #64]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2311
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetIC1Prescaler:

00000000 <TIM_SetIC1Prescaler>:
TIM_SetIC1Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2325
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f023 030c 	bic.w	r3, r3, #12	; 0xc
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2332
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
   c:	8b02      	ldrh	r2, [r0, #24]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8301      	strh	r1, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2333
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetIC2Prescaler:

00000000 <TIM_SetIC2Prescaler>:
TIM_SetIC2Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2347
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2354
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
   c:	8b02      	ldrh	r2, [r0, #24]
   e:	b292      	uxth	r2, r2
  10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  14:	b292      	uxth	r2, r2
  16:	8302      	strh	r2, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2355
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetIC3Prescaler:

00000000 <TIM_SetIC3Prescaler>:
TIM_SetIC3Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2369
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	8b83      	ldrh	r3, [r0, #28]
   2:	f023 030c 	bic.w	r3, r3, #12	; 0xc
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8383      	strh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2376
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
   c:	8b82      	ldrh	r2, [r0, #28]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8381      	strh	r1, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2377
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetIC4Prescaler:

00000000 <TIM_SetIC4Prescaler>:
TIM_SetIC4Prescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2391
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
   0:	8b83      	ldrh	r3, [r0, #28]
   2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8383      	strh	r3, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2398
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
   c:	8b82      	ldrh	r2, [r0, #28]
   e:	b292      	uxth	r2, r2
  10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  14:	b292      	uxth	r2, r2
  16:	8382      	strh	r2, [r0, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2399
}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetClockDivision:

00000000 <TIM_SetClockDivision>:
TIM_SetClockDivision():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2412
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
   0:	8803      	ldrh	r3, [r0, #0]
   2:	b2db      	uxtb	r3, r3
   4:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2419
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
   6:	8802      	ldrh	r2, [r0, #0]
   8:	b292      	uxth	r2, r2
   a:	4311      	orrs	r1, r2
   c:	8001      	strh	r1, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2420
}
   e:	4770      	bx	lr
Disassembly of section .text.TIM_GetCapture1:

00000000 <TIM_GetCapture1>:
TIM_GetCapture1():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2428
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
   0:	8e80      	ldrh	r0, [r0, #52]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2433
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture2:

00000000 <TIM_GetCapture2>:
TIM_GetCapture2():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2441
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
   0:	8f00      	ldrh	r0, [r0, #56]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2446
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture3:

00000000 <TIM_GetCapture3>:
TIM_GetCapture3():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2454
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
   0:	8f80      	ldrh	r0, [r0, #60]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2459
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture4:

00000000 <TIM_GetCapture4>:
TIM_GetCapture4():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2467
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
   0:	f8b0 0040 	ldrh.w	r0, [r0, #64]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2472
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
}
   4:	b280      	uxth	r0, r0
   6:	4770      	bx	lr
Disassembly of section .text.TIM_GetCounter:

00000000 <TIM_GetCounter>:
TIM_GetCounter():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2480
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
   0:	8c80      	ldrh	r0, [r0, #36]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2485
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetPrescaler:

00000000 <TIM_GetPrescaler>:
TIM_GetPrescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2493
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
   0:	8d00      	ldrh	r0, [r0, #40]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2498
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetFlagStatus:

00000000 <TIM_GetFlagStatus>:
TIM_GetFlagStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2523
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
   0:	8a03      	ldrh	r3, [r0, #16]
   2:	4219      	tst	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2538
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr
Disassembly of section .text.TIM_ClearFlag:

00000000 <TIM_ClearFlag>:
TIM_ClearFlag():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2563
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.  
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
   0:	43c9      	mvns	r1, r1
   2:	b289      	uxth	r1, r1
   4:	8201      	strh	r1, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2570
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
}
   6:	4770      	bx	lr
Disassembly of section .text.TIM_GetITStatus:

00000000 <TIM_GetITStatus>:
TIM_GetITStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2591
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
   0:	8a03      	ldrh	r3, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2600
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
   2:	8982      	ldrh	r2, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2601
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
   4:	4219      	tst	r1, r3
   6:	bf0c      	ite	eq
   8:	2000      	moveq	r0, #0
   a:	2001      	movne	r0, #1
   c:	4211      	tst	r1, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2610
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   e:	bf0c      	ite	eq
  10:	2000      	moveq	r0, #0
  12:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  16:	4770      	bx	lr
Disassembly of section .text.TIM_ClearITPendingBit:

00000000 <TIM_ClearITPendingBit>:
TIM_ClearITPendingBit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2631
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
   0:	43c9      	mvns	r1, r1
   2:	b289      	uxth	r1, r1
   4:	8201      	strh	r1, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2637
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
}
   6:	4770      	bx	lr
Disassembly of section .text.TIM_DeInit:

00000000 <TIM_DeInit>:
TIM_DeInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:188
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
   0:	f642 4300 	movw	r3, #11264	; 0x2c00
   4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   8:	4298      	cmp	r0, r3
   a:	b510      	push	{r4, lr}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:192
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
   c:	d027      	beq.n	5e <TIM_DeInit+0x5e>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:197
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  }     
  else if (TIMx == TIM2)
   e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  12:	d02f      	beq.n	74 <TIM_DeInit+0x74>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:202
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
  14:	f240 4300 	movw	r3, #1024	; 0x400
  18:	f2c4 0300 	movt	r3, #16384	; 0x4000
  1c:	4298      	cmp	r0, r3
  1e:	d032      	beq.n	86 <TIM_DeInit+0x86>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:207
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }
  else if (TIMx == TIM4)
  20:	f640 0300 	movw	r3, #2048	; 0x800
  24:	f2c4 0300 	movt	r3, #16384	; 0x4000
  28:	4298      	cmp	r0, r3
  2a:	d040      	beq.n	ae <TIM_DeInit+0xae>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:212
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  } 
  else if (TIMx == TIM5)
  2c:	f640 4300 	movw	r3, #3072	; 0xc00
  30:	f2c4 0300 	movt	r3, #16384	; 0x4000
  34:	4298      	cmp	r0, r3
  36:	d043      	beq.n	c0 <TIM_DeInit+0xc0>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:217
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  } 
  else if (TIMx == TIM6)
  38:	f241 0300 	movw	r3, #4096	; 0x1000
  3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  40:	4298      	cmp	r0, r3
  42:	d046      	beq.n	d2 <TIM_DeInit+0xd2>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:222
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  } 
  else if (TIMx == TIM7)
  44:	f241 4300 	movw	r3, #5120	; 0x1400
  48:	f2c4 0300 	movt	r3, #16384	; 0x4000
  4c:	4298      	cmp	r0, r3
  4e:	d049      	beq.n	e4 <TIM_DeInit+0xe4>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:229
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  } 
  else
  {
    if (TIMx == TIM8)
  50:	f243 4300 	movw	r3, #13312	; 0x3400
  54:	f2c4 0301 	movt	r3, #16385	; 0x4001
  58:	4298      	cmp	r0, r3
  5a:	d01d      	beq.n	98 <TIM_DeInit+0x98>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:235
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    }  
  }
}
  5c:	bd10      	pop	{r4, pc}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:194
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
  5e:	2101      	movs	r1, #1
  60:	f44f 6000 	mov.w	r0, #2048	; 0x800
  64:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:195
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  68:	f44f 6000 	mov.w	r0, #2048	; 0x800
  6c:	2100      	movs	r1, #0
  6e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  72:	e7f3      	b.n	5c <TIM_DeInit+0x5c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:199
  }     
  else if (TIMx == TIM2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
  74:	2001      	movs	r0, #1
  76:	4601      	mov	r1, r0
  78:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:200
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  7c:	2001      	movs	r0, #1
  7e:	2100      	movs	r1, #0
  80:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  84:	e7ea      	b.n	5c <TIM_DeInit+0x5c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:204
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
  86:	2002      	movs	r0, #2
  88:	2101      	movs	r1, #1
  8a:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:205
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  8e:	2002      	movs	r0, #2
  90:	2100      	movs	r1, #0
  92:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  96:	e7e1      	b.n	5c <TIM_DeInit+0x5c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:231
  } 
  else
  {
    if (TIMx == TIM8)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
  98:	2101      	movs	r1, #1
  9a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  9e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:232
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
  a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  a6:	2100      	movs	r1, #0
  a8:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  ac:	e7d6      	b.n	5c <TIM_DeInit+0x5c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:209
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }
  else if (TIMx == TIM4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
  ae:	2004      	movs	r0, #4
  b0:	2101      	movs	r1, #1
  b2:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:210
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  b6:	2004      	movs	r0, #4
  b8:	2100      	movs	r1, #0
  ba:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  be:	e7cd      	b.n	5c <TIM_DeInit+0x5c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:214
  } 
  else if (TIMx == TIM5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
  c0:	2008      	movs	r0, #8
  c2:	2101      	movs	r1, #1
  c4:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:215
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  c8:	2008      	movs	r0, #8
  ca:	2100      	movs	r1, #0
  cc:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  d0:	e7c4      	b.n	5c <TIM_DeInit+0x5c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:219
  } 
  else if (TIMx == TIM6)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
  d2:	2010      	movs	r0, #16
  d4:	2101      	movs	r1, #1
  d6:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:220
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  da:	2010      	movs	r0, #16
  dc:	2100      	movs	r1, #0
  de:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  e2:	e7bb      	b.n	5c <TIM_DeInit+0x5c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:224
  } 
  else if (TIMx == TIM7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
  e4:	2020      	movs	r0, #32
  e6:	2101      	movs	r1, #1
  e8:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:225
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  ec:	2020      	movs	r0, #32
  ee:	2100      	movs	r1, #0
  f0:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  f4:	e7b2      	b.n	5c <RCC_APB1PeriphResetCmd+0x5c>
  f6:	46c0      	nop			(mov r8, r8)
