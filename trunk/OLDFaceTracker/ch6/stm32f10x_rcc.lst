
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\stm32f10x_rcc.o:     file format elf32-littlearm
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\stm32f10x_rcc.o

Disassembly of section .text.RCC_DeInit:

00000000 <RCC_DeInit>:
RCC_DeInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:227
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
   0:	f241 0100 	movw	r1, #4096	; 0x1000
   4:	f2c4 0102 	movt	r1, #16386	; 0x4002
   8:	680b      	ldr	r3, [r1, #0]
   a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   e:	600b      	str	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:233

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
  10:	684a      	ldr	r2, [r1, #4]
  12:	f240 0300 	movw	r3, #0	; 0x0
  16:	f2cf 03ff 	movt	r3, #61695	; 0xf0ff
  1a:	401a      	ands	r2, r3
  1c:	604a      	str	r2, [r1, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:237
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
  1e:	6808      	ldr	r0, [r1, #0]
  20:	f64f 73ff 	movw	r3, #65535	; 0xffff
  24:	f6cf 63f6 	movt	r3, #65270	; 0xfef6
  28:	4018      	ands	r0, r3
  2a:	6008      	str	r0, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:240

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
  2c:	680b      	ldr	r3, [r1, #0]
  2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  32:	600b      	str	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:243

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
  34:	684a      	ldr	r2, [r1, #4]
  36:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
  3a:	604a      	str	r2, [r1, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:250
#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#else
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
  3c:	680b      	ldr	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:253

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
  3e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:250
#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#else
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
  42:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
  46:	600b      	str	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:256

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
  48:	2300      	movs	r3, #0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:253
#else
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
  4a:	608a      	str	r2, [r1, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:256

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
  4c:	62cb      	str	r3, [r1, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:258
#endif /* STM32F10X_CL */
}
  4e:	4770      	bx	lr
Disassembly of section .text.RCC_HSEConfig:

00000000 <RCC_HSEConfig>:
RCC_HSEConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:276
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
   0:	f241 0100 	movw	r1, #4096	; 0x1000
   4:	f2c4 0102 	movt	r1, #16386	; 0x4002
   8:	680b      	ldr	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:280
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
   a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:276
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
   e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  12:	600b      	str	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:278
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  14:	680a      	ldr	r2, [r1, #0]
  16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  1a:	600a      	str	r2, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:284
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
  1c:	bf02      	ittt	eq
  1e:	680b      	ldreq	r3, [r1, #0]
  20:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
  24:	600b      	streq	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:280
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  26:	d006      	beq.n	36 <RCC_HSEConfig+0x36>
  28:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  2c:	d103      	bne.n	36 <RCC_HSEConfig+0x36>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:289
      RCC->CR |= CR_HSEON_Set;
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
  2e:	680b      	ldr	r3, [r1, #0]
  30:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  34:	600b      	str	r3, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:295
      break;
      
    default:
      break;
  }
}
  36:	4770      	bx	lr
Disassembly of section .text.RCC_WaitForHSEStartUp:

00000000 <RCC_WaitForHSEStartUp>:
RCC_WaitForHSEStartUp():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:305
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
   0:	b082      	sub	sp, #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:306
  __IO uint32_t StartUpCounter = 0;
   2:	2300      	movs	r3, #0
RCC_GetFlagStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1315

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
   4:	f241 0100 	movw	r1, #4096	; 0x1000
RCC_WaitForHSEStartUp():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:306
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
   8:	9301      	str	r3, [sp, #4]
RCC_GetFlagStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1315

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
   a:	f2c4 0102 	movt	r1, #16386	; 0x4002
   e:	6808      	ldr	r0, [r1, #0]
RCC_WaitForHSEStartUp():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:314
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  10:	9b01      	ldr	r3, [sp, #4]
  12:	3301      	adds	r3, #1
  14:	9301      	str	r3, [sp, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:315
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
  16:	9a01      	ldr	r2, [sp, #4]
  18:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
  1c:	d002      	beq.n	24 <RCC_WaitForHSEStartUp+0x24>
  1e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  22:	d0f4      	beq.n	e <RCC_WaitForHSEStartUp+0xe>
RCC_GetFlagStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1315

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  24:	f241 0300 	movw	r3, #4096	; 0x1000
  28:	f2c4 0302 	movt	r3, #16386	; 0x4002
  2c:	6818      	ldr	r0, [r3, #0]
  2e:	0c40      	lsrs	r0, r0, #17
RCC_WaitForHSEStartUp():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:326
  else
  {
    status = ERROR;
  }  
  return (status);
}
  30:	f000 0001 	and.w	r0, r0, #1	; 0x1
  34:	b002      	add	sp, #8
  36:	4770      	bx	lr
Disassembly of section .text.RCC_AdjustHSICalibrationValue:

00000000 <RCC_AdjustHSICalibrationValue>:
RCC_AdjustHSICalibrationValue():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:339
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
   0:	f241 0200 	movw	r2, #4096	; 0x1000
   4:	f2c4 0202 	movt	r2, #16386	; 0x4002
   8:	6813      	ldr	r3, [r2, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:341
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
   a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:343
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
   e:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:345
  /* Store the new value */
  RCC->CR = tmpreg;
  12:	6013      	str	r3, [r2, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:346
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_HSICmd:

00000000 <RCC_HSICmd>:
RCC_HSICmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:358
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
   0:	f240 0300 	movw	r3, #0	; 0x0
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:359
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_PLLConfig:

00000000 <RCC_PLLConfig>:
RCC_PLLConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:386

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	685a      	ldr	r2, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:390
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
   a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
   e:	4310      	orrs	r0, r2
  10:	4308      	orrs	r0, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:392
  /* Store the new value */
  RCC->CFGR = tmpreg;
  12:	6058      	str	r0, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:393
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_PLLCmd:

00000000 <RCC_PLLCmd>:
RCC_PLLCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:406
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
   0:	f240 0360 	movw	r3, #96	; 0x60
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:407
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_PREDIV1Config:

00000000 <RCC_PREDIV1Config>:
RCC_PREDIV1Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:424
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
   0:	b410      	push	{r4}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:431
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
   2:	f241 0400 	movw	r4, #4096	; 0x1000
   6:	f2c4 0402 	movt	r4, #16386	; 0x4002
   a:	6ae2      	ldr	r2, [r4, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:435
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
   c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
  10:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
  14:	401a      	ands	r2, r3
  16:	4310      	orrs	r0, r2
  18:	4308      	orrs	r0, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:437
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
  1a:	62e0      	str	r0, [r4, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:438
}
  1c:	bc10      	pop	{r4}
  1e:	4770      	bx	lr
Disassembly of section .text.RCC_PREDIV2Config:

00000000 <RCC_PREDIV2Config>:
RCC_PREDIV2Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:457
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	6ada      	ldr	r2, [r3, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:459
  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
   a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:461
  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
   e:	4310      	orrs	r0, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:463
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
  10:	62d8      	str	r0, [r3, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:464
}
  12:	4770      	bx	lr
Disassembly of section .text.RCC_PLL2Config:

00000000 <RCC_PLL2Config>:
RCC_PLL2Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:482
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	6ada      	ldr	r2, [r3, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:484
  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
   a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:486
  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
   e:	4310      	orrs	r0, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:488
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
  10:	62d8      	str	r0, [r3, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:489
}
  12:	4770      	bx	lr
Disassembly of section .text.RCC_PLL2Cmd:

00000000 <RCC_PLL2Cmd>:
RCC_PLL2Cmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:506
void RCC_PLL2Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
   0:	f240 0368 	movw	r3, #104	; 0x68
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:507
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_PLL3Config:

00000000 <RCC_PLL3Config>:
RCC_PLL3Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:526
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));

  tmpreg = RCC->CFGR2;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	6ada      	ldr	r2, [r3, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:528
  /* Clear PLL3Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL3MUL;
   a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:530
  /* Set the PLL3 configuration bits */
  tmpreg |= RCC_PLL3Mul;
   e:	4310      	orrs	r0, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:532
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
  10:	62d8      	str	r0, [r3, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:533
}
  12:	4770      	bx	lr
Disassembly of section .text.RCC_PLL3Cmd:

00000000 <RCC_PLL3Cmd>:
RCC_PLL3Cmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:547
void RCC_PLL3Cmd(FunctionalState NewState)
{
  /* Check the parameters */

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
   0:	f240 0370 	movw	r3, #112	; 0x70
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:548
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_SYSCLKConfig:

00000000 <RCC_SYSCLKConfig>:
RCC_SYSCLKConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:565
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	685a      	ldr	r2, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:567
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
   a:	f022 0203 	bic.w	r2, r2, #3	; 0x3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:569
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
   e:	4310      	orrs	r0, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:571
  /* Store the new value */
  RCC->CFGR = tmpreg;
  10:	6058      	str	r0, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:572
}
  12:	4770      	bx	lr
Disassembly of section .text.RCC_GetSYSCLKSource:

00000000 <RCC_GetSYSCLKSource>:
RCC_GetSYSCLKSource():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:585
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	6858      	ldr	r0, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:586
}
   a:	f000 000c 	and.w	r0, r0, #12	; 0xc
   e:	4770      	bx	lr
Disassembly of section .text.RCC_HCLKConfig:

00000000 <RCC_HCLKConfig>:
RCC_HCLKConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:609
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	685a      	ldr	r2, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:611
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
   a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:613
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
   e:	4310      	orrs	r0, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:615
  /* Store the new value */
  RCC->CFGR = tmpreg;
  10:	6058      	str	r0, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:616
}
  12:	4770      	bx	lr
Disassembly of section .text.RCC_PCLK1Config:

00000000 <RCC_PCLK1Config>:
RCC_PCLK1Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:635
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	685a      	ldr	r2, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:637
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
   a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:639
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
   e:	4310      	orrs	r0, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:641
  /* Store the new value */
  RCC->CFGR = tmpreg;
  10:	6058      	str	r0, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:642
}
  12:	4770      	bx	lr
Disassembly of section .text.RCC_PCLK2Config:

00000000 <RCC_PCLK2Config>:
RCC_PCLK2Config():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:661
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
   0:	f241 0200 	movw	r2, #4096	; 0x1000
   4:	f2c4 0202 	movt	r2, #16386	; 0x4002
   8:	6853      	ldr	r3, [r2, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:663
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
   a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:665
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
   e:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:667
  /* Store the new value */
  RCC->CFGR = tmpreg;
  12:	6053      	str	r3, [r2, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:668
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_ITConfig:

00000000 <RCC_ITConfig>:
RCC_ITConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:701
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b941      	cbnz	r1, 14 <RCC_ITConfig+0x14>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:709
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
   2:	f241 0309 	movw	r3, #4105	; 0x1009
   6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   a:	781a      	ldrb	r2, [r3, #0]
   c:	43c1      	mvns	r1, r0
   e:	400a      	ands	r2, r1
  10:	701a      	strb	r2, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:711
  }
}
  12:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:704
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  14:	f241 0209 	movw	r2, #4105	; 0x1009
  18:	f2c4 0202 	movt	r2, #16386	; 0x4002
  1c:	7813      	ldrb	r3, [r2, #0]
  1e:	ea40 0303 	orr.w	r3, r0, r3
  22:	7013      	strb	r3, [r2, #0]
  24:	e7f5      	b.n	12 <RCC_ITConfig+0x12>
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_OTGFSCLKConfig:

00000000 <RCC_OTGFSCLKConfig>:
RCC_OTGFSCLKConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:747
void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));

  *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
   0:	f240 03d8 	movw	r3, #216	; 0xd8
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:748
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_ADCCLKConfig:

00000000 <RCC_ADCCLKConfig>:
RCC_ADCCLKConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:767
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	685a      	ldr	r2, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:769
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
   a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:771
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
   e:	4310      	orrs	r0, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:773
  /* Store the new value */
  RCC->CFGR = tmpreg;
  10:	6058      	str	r0, [r3, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:774
}
  12:	4770      	bx	lr
Disassembly of section .text.RCC_I2S2CLKConfig:

00000000 <RCC_I2S2CLKConfig>:
RCC_I2S2CLKConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:793
void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));

  *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
   0:	f240 53c4 	movw	r3, #1476	; 0x5c4
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:794
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_I2S3CLKConfig:

00000000 <RCC_I2S3CLKConfig>:
RCC_I2S3CLKConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:812
void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));

  *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
   0:	f240 53c8 	movw	r3, #1480	; 0x5c8
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:813
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_LSEConfig:

00000000 <RCC_LSEConfig>:
RCC_LSEConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:831
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
   0:	f241 0220 	movw	r2, #4128	; 0x1020
   4:	f2c4 0202 	movt	r2, #16386	; 0x4002
   8:	2300      	movs	r3, #0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:835
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
   a:	2801      	cmp	r0, #1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:831
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
   c:	7013      	strb	r3, [r2, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:833
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
   e:	7013      	strb	r3, [r2, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:839
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
  10:	bf08      	it	eq
  12:	7010      	strbeq	r0, [r2, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:835
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  14:	d003      	beq.n	1e <RCC_LSEConfig+0x1e>
  16:	2804      	cmp	r0, #4
  18:	d101      	bne.n	1e <RCC_LSEConfig+0x1e>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:844
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
  1a:	2305      	movs	r3, #5
  1c:	7013      	strb	r3, [r2, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:850
      break;            
      
    default:
      break;      
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.RCC_LSICmd:

00000000 <RCC_LSICmd>:
RCC_LSICmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:862
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
   0:	f240 4380 	movw	r3, #1152	; 0x480
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:863
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_RTCCLKConfig:

00000000 <RCC_RTCCLKConfig>:
RCC_RTCCLKConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:880
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	6a1a      	ldr	r2, [r3, #32]
   a:	4310      	orrs	r0, r2
   c:	6218      	str	r0, [r3, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:881
}
   e:	4770      	bx	lr
Disassembly of section .text.RCC_RTCCLKCmd:

00000000 <RCC_RTCCLKCmd>:
RCC_RTCCLKCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:890
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
   0:	f240 433c 	movw	r3, #1084	; 0x43c
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:894
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_GetClocksFreq:

00000000 <RCC_GetClocksFreq>:
RCC_GetClocksFreq():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:903
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
   0:	f241 0200 	movw	r2, #4096	; 0x1000
   4:	f2c4 0202 	movt	r2, #16386	; 0x4002
   8:	6853      	ldr	r3, [r2, #4]
   a:	b430      	push	{r4, r5}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:913
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
  
  switch (tmp)
   c:	f003 030c 	and.w	r3, r3, #12	; 0xc
  10:	2b04      	cmp	r3, #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:903
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  12:	4605      	mov	r5, r0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:913
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
  
  switch (tmp)
  14:	d001      	beq.n	1a <RCC_GetClocksFreq+0x1a>
  16:	2b08      	cmp	r3, #8
  18:	d02e      	beq.n	78 <RCC_GetClocksFreq+0x78>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:985
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
  1a:	f241 2300 	movw	r3, #4608	; 0x1200
  1e:	f2c0 037a 	movt	r3, #122	; 0x7a
  22:	602b      	str	r3, [r5, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:991
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  24:	f241 0400 	movw	r4, #4096	; 0x1000
  28:	f2c4 0402 	movt	r4, #16386	; 0x4002
  2c:	6863      	ldr	r3, [r4, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:993
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
  2e:	f240 0000 	movw	r0, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:991
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:993
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
  36:	f2c0 0000 	movt	r0, #0	; 0x0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:992
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
  3a:	091b      	lsrs	r3, r3, #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:993
  presc = APBAHBPrescTable[tmp];
  3c:	5cc2      	ldrb	r2, [r0, r3]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:995
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
  3e:	6829      	ldr	r1, [r5, #0]
  40:	40d1      	lsrs	r1, r2
  42:	6069      	str	r1, [r5, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:997
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
  44:	6863      	ldr	r3, [r4, #4]
  46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:998
  tmp = tmp >> 8;
  4a:	0a1b      	lsrs	r3, r3, #8
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:999
  presc = APBAHBPrescTable[tmp];
  4c:	5cc2      	ldrb	r2, [r0, r3]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1001
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  4e:	fa31 f202 	lsrs.w	r2, r1, r2
  52:	60aa      	str	r2, [r5, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1003
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  54:	6863      	ldr	r3, [r4, #4]
  56:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1004
  tmp = tmp >> 11;
  5a:	0adb      	lsrs	r3, r3, #11
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1005
  presc = APBAHBPrescTable[tmp];
  5c:	5cc2      	ldrb	r2, [r0, r3]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1007
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  5e:	40d1      	lsrs	r1, r2
  60:	60e9      	str	r1, [r5, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1009
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  62:	6863      	ldr	r3, [r4, #4]
  64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1011
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
  68:	eb00 3093 	add.w	r0, r0, r3, lsr #14
  6c:	7c02      	ldrb	r2, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1013
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
  6e:	fbb1 f1f2 	udiv	r1, r1, r2
  72:	6129      	str	r1, [r5, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1014
}
  74:	bc30      	pop	{r4, r5}
  76:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:924
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
  78:	6853      	ldr	r3, [r2, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:925
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
  7a:	6852      	ldr	r2, [r2, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:924
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
  7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:946
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
        }
      }
#else
      pllmull = pllmull >> 18;
  80:	0c9b      	lsrs	r3, r3, #18
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:948
      
      if (pllmull != 0x0D)
  82:	2b0d      	cmp	r3, #13
  84:	d020      	beq.n	c8 <RCC_GetClocksFreq+0xc8>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:950
      {
         pllmull += 2;
  86:	1c98      	adds	r0, r3, #2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:957
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
      }
            
      if (pllsource == 0x00)
  88:	f412 3f80 	tst.w	r2, #65536	; 0x10000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:959
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
  8c:	bf01      	itttt	eq
  8e:	f640 1300 	movweq	r3, #2304	; 0x900
  92:	f2c0 033d 	movteq	r3, #61	; 0x3d
  96:	4343      	muleq	r3, r0
  98:	602b      	streq	r3, [r5, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:957
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
      }
            
      if (pllsource == 0x00)
  9a:	d0c3      	beq.n	24 <RCC_GetClocksFreq+0x24>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:965
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
  9c:	f241 0100 	movw	r1, #4096	; 0x1000
  a0:	f2c4 0102 	movt	r1, #16386	; 0x4002
  a4:	6aca      	ldr	r2, [r1, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:966
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
  a6:	6acb      	ldr	r3, [r1, #44]
  a8:	f003 030f 	and.w	r3, r3, #15	; 0xf
  ac:	1c5c      	adds	r4, r3, #1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:968
        
        if (prediv1source == 0)
  ae:	f412 3f80 	tst.w	r2, #65536	; 0x10000
  b2:	d10b      	bne.n	cc <RCC_GetClocksFreq+0xcc>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:970
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
  b4:	f241 2300 	movw	r3, #4608	; 0x1200
  b8:	f2c0 037a 	movt	r3, #122	; 0x7a
  bc:	fbb3 f3f4 	udiv	r3, r3, r4
  c0:	fb03 f300 	mul.w	r3, r3, r0
  c4:	602b      	str	r3, [r5, #0]
  c6:	e7ad      	b.n	24 <RCC_GetClocksFreq+0x24>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:948
        }
      }
#else
      pllmull = pllmull >> 18;
      
      if (pllmull != 0x0D)
  c8:	2006      	movs	r0, #6
  ca:	e7dd      	b.n	88 <RCC_GetClocksFreq+0x88>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:976
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
  cc:	6acb      	ldr	r3, [r1, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:977
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
  ce:	6aca      	ldr	r2, [r1, #44]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:978
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
  d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  d4:	091b      	lsrs	r3, r3, #4
  d6:	f241 2100 	movw	r1, #4608	; 0x1200
  da:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  de:	3301      	adds	r3, #1
  e0:	f2c0 017a 	movt	r1, #122	; 0x7a
  e4:	0a12      	lsrs	r2, r2, #8
  e6:	fbb1 f1f3 	udiv	r1, r1, r3
  ea:	3202      	adds	r2, #2
  ec:	fb02 f201 	mul.w	r2, r2, r1
  f0:	fbb2 f2f4 	udiv	r2, r2, r4
  f4:	fb02 f200 	mul.w	r2, r2, r0
  f8:	602a      	str	r2, [r5, #0]
  fa:	e793      	b.n	24 <RCC_GetClocksFreq+0x24>
Disassembly of section .text.RCC_AHBPeriphClockCmd:

00000000 <RCC_AHBPeriphClockCmd>:
RCC_AHBPeriphClockCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1048
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
   0:	b941      	cbnz	r1, 14 <RCC_AHBPeriphClockCmd+0x14>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1059
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
   2:	f241 0300 	movw	r3, #4096	; 0x1000
   6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   a:	6959      	ldr	r1, [r3, #20]
   c:	43c2      	mvns	r2, r0
   e:	400a      	ands	r2, r1
  10:	615a      	str	r2, [r3, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1061
  }
}
  12:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1055
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  14:	f241 0200 	movw	r2, #4096	; 0x1000
  18:	f2c4 0202 	movt	r2, #16386	; 0x4002
  1c:	6953      	ldr	r3, [r2, #20]
  1e:	ea40 0303 	orr.w	r3, r0, r3
  22:	6153      	str	r3, [r2, #20]
  24:	e7f5      	b.n	12 <RCC_AHBPeriphClockCmd+0x12>
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_APB2PeriphClockCmd:

00000000 <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1077
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
   0:	b941      	cbnz	r1, 14 <RCC_APB2PeriphClockCmd+0x14>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1087
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
   2:	f241 0300 	movw	r3, #4096	; 0x1000
   6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   a:	6999      	ldr	r1, [r3, #24]
   c:	43c2      	mvns	r2, r0
   e:	400a      	ands	r2, r1
  10:	619a      	str	r2, [r3, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1089
  }
}
  12:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1083
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  14:	f241 0200 	movw	r2, #4096	; 0x1000
  18:	f2c4 0202 	movt	r2, #16386	; 0x4002
  1c:	6993      	ldr	r3, [r2, #24]
  1e:	ea40 0303 	orr.w	r3, r0, r3
  22:	6193      	str	r3, [r2, #24]
  24:	e7f5      	b.n	12 <RCC_APB2PeriphClockCmd+0x12>
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_APB1PeriphClockCmd:

00000000 <RCC_APB1PeriphClockCmd>:
RCC_APB1PeriphClockCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1111
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b941      	cbnz	r1, 14 <RCC_APB1PeriphClockCmd+0x14>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1117
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
   2:	f241 0300 	movw	r3, #4096	; 0x1000
   6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   a:	69d9      	ldr	r1, [r3, #28]
   c:	43c2      	mvns	r2, r0
   e:	400a      	ands	r2, r1
  10:	61da      	str	r2, [r3, #28]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1119
  }
}
  12:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1113
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  14:	f241 0200 	movw	r2, #4096	; 0x1000
  18:	f2c4 0202 	movt	r2, #16386	; 0x4002
  1c:	69d3      	ldr	r3, [r2, #28]
  1e:	ea40 0303 	orr.w	r3, r0, r3
  22:	61d3      	str	r3, [r2, #28]
  24:	e7f5      	b.n	12 <RCC_APB1PeriphClockCmd+0x12>
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_AHBPeriphResetCmd:

00000000 <RCC_AHBPeriphResetCmd>:
RCC_AHBPeriphResetCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1134
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
   0:	b941      	cbnz	r1, 14 <RCC_AHBPeriphResetCmd+0x14>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1145
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
   2:	f241 0300 	movw	r3, #4096	; 0x1000
   6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   a:	6a99      	ldr	r1, [r3, #40]
   c:	43c2      	mvns	r2, r0
   e:	400a      	ands	r2, r1
  10:	629a      	str	r2, [r3, #40]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1147
  }
}
  12:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1141
  assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  14:	f241 0200 	movw	r2, #4096	; 0x1000
  18:	f2c4 0202 	movt	r2, #16386	; 0x4002
  1c:	6a93      	ldr	r3, [r2, #40]
  1e:	ea40 0303 	orr.w	r3, r0, r3
  22:	6293      	str	r3, [r2, #40]
  24:	e7f5      	b.n	12 <RCC_AHBPeriphResetCmd+0x12>
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_APB2PeriphResetCmd:

00000000 <RCC_APB2PeriphResetCmd>:
RCC_APB2PeriphResetCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1164
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
   0:	b941      	cbnz	r1, 14 <RCC_APB2PeriphResetCmd+0x14>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1174
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
   2:	f241 0300 	movw	r3, #4096	; 0x1000
   6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   a:	68d9      	ldr	r1, [r3, #12]
   c:	43c2      	mvns	r2, r0
   e:	400a      	ands	r2, r1
  10:	60da      	str	r2, [r3, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1176
  }
}
  12:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1170
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  14:	f241 0200 	movw	r2, #4096	; 0x1000
  18:	f2c4 0202 	movt	r2, #16386	; 0x4002
  1c:	68d3      	ldr	r3, [r2, #12]
  1e:	ea40 0303 	orr.w	r3, r0, r3
  22:	60d3      	str	r3, [r2, #12]
  24:	e7f5      	b.n	12 <RCC_APB2PeriphResetCmd+0x12>
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_APB1PeriphResetCmd:

00000000 <RCC_APB1PeriphResetCmd>:
RCC_APB1PeriphResetCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1194
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
   0:	b941      	cbnz	r1, 14 <RCC_APB1PeriphResetCmd+0x14>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1204
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
   2:	f241 0300 	movw	r3, #4096	; 0x1000
   6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   a:	6919      	ldr	r1, [r3, #16]
   c:	43c2      	mvns	r2, r0
   e:	400a      	ands	r2, r1
  10:	611a      	str	r2, [r3, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1206
  }
}
  12:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1200
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  14:	f241 0200 	movw	r2, #4096	; 0x1000
  18:	f2c4 0202 	movt	r2, #16386	; 0x4002
  1c:	6913      	ldr	r3, [r2, #16]
  1e:	ea40 0303 	orr.w	r3, r0, r3
  22:	6113      	str	r3, [r2, #16]
  24:	e7f5      	b.n	12 <RCC_APB1PeriphResetCmd+0x12>
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_BackupResetCmd:

00000000 <RCC_BackupResetCmd>:
RCC_BackupResetCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1215
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
   0:	f240 4340 	movw	r3, #1088	; 0x440
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1219
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_ClockSecuritySystemCmd:

00000000 <RCC_ClockSecuritySystemCmd>:
RCC_ClockSecuritySystemCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1228
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
   0:	f240 034c 	movw	r3, #76	; 0x4c
   4:	f2c4 2342 	movt	r3, #16962	; 0x4242
   8:	6018      	str	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1232
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_MCOConfig:

00000000 <RCC_MCOConfig>:
RCC_MCOConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1260
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
   0:	f241 0307 	movw	r3, #4103	; 0x1007
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	7018      	strb	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1266
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
}
   a:	4770      	bx	lr
Disassembly of section .text.RCC_GetFlagStatus:

00000000 <RCC_GetFlagStatus>:
RCC_GetFlagStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1304
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
   0:	0943      	lsrs	r3, r0, #5
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1313
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
   2:	2b01      	cmp	r3, #1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1315
  {
    statusreg = RCC->CR;
   4:	bf02      	ittt	eq
   6:	f241 0300 	movweq	r3, #4096	; 0x1000
   a:	f2c4 0302 	movteq	r3, #16386	; 0x4002
   e:	681b      	ldreq	r3, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1313
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  10:	d00c      	beq.n	2c <RCC_GetFlagStatus+0x2c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1317
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
  12:	2b02      	cmp	r3, #2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1319
  {
    statusreg = RCC->BDCR;
  14:	bf0b      	itete	eq
  16:	f241 0300 	movweq	r3, #4096	; 0x1000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1323
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
  1a:	f241 0300 	movwne	r3, #4096	; 0x1000
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1319
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
  1e:	f2c4 0302 	movteq	r3, #16386	; 0x4002
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1323
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
  22:	f2c4 0302 	movtne	r3, #16386	; 0x4002
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1319
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
  26:	bf0c      	ite	eq
  28:	6a1b      	ldreq	r3, [r3, #32]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1323
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
  2a:	6a5b      	ldrne	r3, [r3, #36]
  2c:	f000 001f 	and.w	r0, r0, #31	; 0x1f
  30:	fa33 f000 	lsrs.w	r0, r3, r0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1339
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
  34:	f000 0001 	and.w	r0, r0, #1	; 0x1
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_ClearFlag:

00000000 <RCC_ClearFlag>:
RCC_ClearFlag():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1349
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
   0:	f241 0200 	movw	r2, #4096	; 0x1000
   4:	f2c4 0202 	movt	r2, #16386	; 0x4002
   8:	6a53      	ldr	r3, [r2, #36]
   a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   e:	6253      	str	r3, [r2, #36]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1352
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_GetITStatus:

00000000 <RCC_GetITStatus>:
RCC_GetITStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1380
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
   0:	f241 0300 	movw	r3, #4096	; 0x1000
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	689a      	ldr	r2, [r3, #8]
   a:	4210      	tst	r0, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1397
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
   c:	bf0c      	ite	eq
   e:	2000      	moveq	r0, #0
  10:	2001      	movne	r0, #1
  12:	4770      	bx	lr
Disassembly of section .text.RCC_ClearITPendingBit:

00000000 <RCC_ClearITPendingBit>:
RCC_ClearITPendingBit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1426
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
   0:	f241 030a 	movw	r3, #4106	; 0x100a
   4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   8:	7018      	strb	r0, [r3, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_rcc.c:1433
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
}
   a:	4770      	bx	lr
