
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\stm32f10x_usart.o:     file format elf32-littlearm
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\stm32f10x_usart.o

Disassembly of section .text.USART_StructInit:

00000000 <USART_StructInit>:
USART_StructInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:252
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
   0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:253
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
   4:	2200      	movs	r2, #0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:252
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
   6:	6003      	str	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:256
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   8:	f04f 030c 	mov.w	r3, #12	; 0xc
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:253
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
   c:	8082      	strh	r2, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:254
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
   e:	80c2      	strh	r2, [r0, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:255
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  10:	8102      	strh	r2, [r0, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:256
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  12:	8143      	strh	r3, [r0, #10]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:257
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
  14:	8182      	strh	r2, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:258
}
  16:	4770      	bx	lr
Disassembly of section .text.USART_ClockInit:

00000000 <USART_ClockInit>:
USART_ClockInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:271
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
   0:	b430      	push	{r4, r5}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:292
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   2:	884b      	ldrh	r3, [r1, #2]
   4:	880c      	ldrh	r4, [r1, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:281
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
   6:	8a02      	ldrh	r2, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:292
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   8:	888d      	ldrh	r5, [r1, #4]
   a:	4323      	orrs	r3, r4
   c:	88cc      	ldrh	r4, [r1, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:283
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
   e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:292
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
  12:	432b      	orrs	r3, r5
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:283
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
  14:	0412      	lsls	r2, r2, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:292
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
  16:	4323      	orrs	r3, r4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:283
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
  18:	0c12      	lsrs	r2, r2, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:292
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
  1a:	b29b      	uxth	r3, r3
  1c:	4313      	orrs	r3, r2
  1e:	8203      	strh	r3, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:293
}
  20:	bc30      	pop	{r4, r5}
  22:	4770      	bx	lr
Disassembly of section .text.USART_ClockStructInit:

00000000 <USART_ClockStructInit>:
USART_ClockStructInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:304
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
   0:	2300      	movs	r3, #0
   2:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:305
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
   4:	8043      	strh	r3, [r0, #2]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:306
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
   6:	8083      	strh	r3, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:307
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
   8:	80c3      	strh	r3, [r0, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:308
}
   a:	4770      	bx	lr
Disassembly of section .text.USART_Cmd:

00000000 <USART_Cmd>:
USART_Cmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:325
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <USART_Cmd+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:333
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8183      	strh	r3, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:335
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:328
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
  10:	8983      	ldrh	r3, [r0, #12]
  12:	b29b      	uxth	r3, r3
  14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  18:	8183      	strh	r3, [r0, #12]
  1a:	e7f8      	b.n	e <USART_Cmd+0xe>
Disassembly of section .text.USART_ITConfig:

00000000 <USART_ITConfig>:
USART_ITConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:373
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
   0:	b2cb      	uxtb	r3, r1
   2:	ea4f 1c53 	mov.w	ip, r3, lsr #5
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:377

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
   6:	f001 011f 	and.w	r1, r1, #31	; 0x1f
   a:	2301      	movs	r3, #1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:357
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
   c:	b410      	push	{r4}
   e:	4614      	mov	r4, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:377
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
  10:	fa13 f201 	lsls.w	r2, r3, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:379
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  14:	459c      	cmp	ip, r3
  16:	d011      	beq.n	3c <USART_ITConfig+0x3c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:383
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  18:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
  1c:	d007      	beq.n	2e <USART_ITConfig+0x2e>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:389
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  1e:	3014      	adds	r0, #20
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:391
  }
  if (NewState != DISABLE)
  20:	b944      	cbnz	r4, 34 <USART_ITConfig+0x34>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:397
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  22:	6803      	ldr	r3, [r0, #0]
  24:	43d2      	mvns	r2, r2
  26:	4013      	ands	r3, r2
  28:	6003      	str	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:399
  }
}
  2a:	bc10      	pop	{r4}
  2c:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:385
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
  2e:	3010      	adds	r0, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:391
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  30:	2c00      	cmp	r4, #0
  32:	d0f6      	beq.n	22 <USART_ITConfig+0x22>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:393
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  34:	6803      	ldr	r3, [r0, #0]
  36:	4313      	orrs	r3, r2
  38:	6003      	str	r3, [r0, #0]
  3a:	e7f6      	b.n	2a <USART_ITConfig+0x2a>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:381
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
  3c:	300c      	adds	r0, #12
  3e:	e7ef      	b.n	20 <USART_ITConfig+0x20>
Disassembly of section .text.USART_DMACmd:

00000000 <USART_DMACmd>:
USART_DMACmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:421
{
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
   0:	b92a      	cbnz	r2, e <USART_DMACmd+0xe>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:431
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	43ca      	mvns	r2, r1
   6:	b29b      	uxth	r3, r3
   8:	4013      	ands	r3, r2
   a:	8283      	strh	r3, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:433
  }
}
   c:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:425
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
   e:	8a83      	ldrh	r3, [r0, #20]
  10:	b29b      	uxth	r3, r3
  12:	ea41 0303 	orr.w	r3, r1, r3
  16:	8283      	strh	r3, [r0, #20]
  18:	e7f8      	b.n	c <USART_DMACmd+0xc>
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_SetAddress:

00000000 <USART_SetAddress>:
USART_SetAddress():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:450
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
   0:	8a03      	ldrh	r3, [r0, #16]
   2:	f023 030f 	bic.w	r3, r3, #15	; 0xf
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8203      	strh	r3, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:452
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
   c:	8a02      	ldrh	r2, [r0, #16]
   e:	b292      	uxth	r2, r2
  10:	430a      	orrs	r2, r1
  12:	8202      	strh	r2, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:453
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_WakeUpConfig:

00000000 <USART_WakeUpConfig>:
USART_WakeUpConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:472
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
   0:	8983      	ldrh	r3, [r0, #12]
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8183      	strh	r3, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:473
  USARTx->CR1 |= USART_WakeUp;
   c:	8982      	ldrh	r2, [r0, #12]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8181      	strh	r1, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:474
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_ReceiverWakeUpCmd:

00000000 <USART_ReceiverWakeUpCmd>:
USART_ReceiverWakeUpCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:491
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <USART_ReceiverWakeUpCmd+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:499
    USARTx->CR1 |= CR1_RWU_Set;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	f023 0302 	bic.w	r3, r3, #2	; 0x2
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8183      	strh	r3, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:501
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:494
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
  10:	8983      	ldrh	r3, [r0, #12]
  12:	b29b      	uxth	r3, r3
  14:	f043 0302 	orr.w	r3, r3, #2	; 0x2
  18:	8183      	strh	r3, [r0, #12]
  1a:	e7f8      	b.n	e <USART_ReceiverWakeUpCmd+0xe>
Disassembly of section .text.USART_LINBreakDetectLengthConfig:

00000000 <USART_LINBreakDetectLengthConfig>:
USART_LINBreakDetectLengthConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:520
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
   0:	8a03      	ldrh	r3, [r0, #16]
   2:	f023 0320 	bic.w	r3, r3, #32	; 0x20
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8203      	strh	r3, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:521
  USARTx->CR2 |= USART_LINBreakDetectLength;  
   c:	8a02      	ldrh	r2, [r0, #16]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8201      	strh	r1, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:522
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_LINCmd:

00000000 <USART_LINCmd>:
USART_LINCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:539
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <USART_LINCmd+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:547
    USARTx->CR2 |= CR2_LINEN_Set;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
   2:	8a03      	ldrh	r3, [r0, #16]
   4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8203      	strh	r3, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:549
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:542
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
  10:	8a03      	ldrh	r3, [r0, #16]
  12:	b29b      	uxth	r3, r3
  14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  18:	8203      	strh	r3, [r0, #16]
  1a:	e7f8      	b.n	e <USART_LINCmd+0xe>
Disassembly of section .text.USART_SendData:

00000000 <USART_SendData>:
USART_SendData():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:566
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
   0:	05c9      	lsls	r1, r1, #23
   2:	0dc9      	lsrs	r1, r1, #23
   4:	8081      	strh	r1, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:567
}
   6:	4770      	bx	lr
Disassembly of section .text.USART_ReceiveData:

00000000 <USART_ReceiveData>:
USART_ReceiveData():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:582
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
   0:	8880      	ldrh	r0, [r0, #4]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:583
}
   2:	05c0      	lsls	r0, r0, #23
   4:	0dc0      	lsrs	r0, r0, #23
   6:	4770      	bx	lr
Disassembly of section .text.USART_SendBreak:

00000000 <USART_SendBreak>:
USART_SendBreak():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:598
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
   0:	8983      	ldrh	r3, [r0, #12]
   2:	b29b      	uxth	r3, r3
   4:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   8:	8183      	strh	r3, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:599
}
   a:	4770      	bx	lr
Disassembly of section .text.USART_SetGuardTime:

00000000 <USART_SetGuardTime>:
USART_SetGuardTime():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:614
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	b2db      	uxtb	r3, r3
   4:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:616
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
   6:	8b02      	ldrh	r2, [r0, #24]
   8:	b292      	uxth	r2, r2
   a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   e:	8302      	strh	r2, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:617
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_SetPrescaler:

00000000 <USART_SetPrescaler>:
USART_SetPrescaler():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:634
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   6:	8303      	strh	r3, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:636
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
   8:	8b02      	ldrh	r2, [r0, #24]
   a:	b292      	uxth	r2, r2
   c:	430a      	orrs	r2, r1
   e:	8302      	strh	r2, [r0, #24]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:637
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_SmartCardCmd:

00000000 <USART_SmartCardCmd>:
USART_SmartCardCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:652
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <USART_SmartCardCmd+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:660
    USARTx->CR3 |= CR3_SCEN_Set;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	f023 0320 	bic.w	r3, r3, #32	; 0x20
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8283      	strh	r3, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:662
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:655
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
  10:	8a83      	ldrh	r3, [r0, #20]
  12:	b29b      	uxth	r3, r3
  14:	f043 0320 	orr.w	r3, r3, #32	; 0x20
  18:	8283      	strh	r3, [r0, #20]
  1a:	e7f8      	b.n	e <USART_SmartCardCmd+0xe>
Disassembly of section .text.USART_SmartCardNACKCmd:

00000000 <USART_SmartCardNACKCmd>:
USART_SmartCardNACKCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:677
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <USART_SmartCardNACKCmd+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:685
    USARTx->CR3 |= CR3_NACK_Set;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8283      	strh	r3, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:687
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:680
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
  10:	8a83      	ldrh	r3, [r0, #20]
  12:	b29b      	uxth	r3, r3
  14:	f043 0310 	orr.w	r3, r3, #16	; 0x10
  18:	8283      	strh	r3, [r0, #20]
  1a:	e7f8      	b.n	e <USART_SmartCardNACKCmd+0xe>
Disassembly of section .text.USART_HalfDuplexCmd:

00000000 <USART_HalfDuplexCmd>:
USART_HalfDuplexCmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:704
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <USART_HalfDuplexCmd+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:712
    USARTx->CR3 |= CR3_HDSEL_Set;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8283      	strh	r3, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:714
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:707
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
  10:	8a83      	ldrh	r3, [r0, #20]
  12:	b29b      	uxth	r3, r3
  14:	f043 0308 	orr.w	r3, r3, #8	; 0x8
  18:	8283      	strh	r3, [r0, #20]
  1a:	e7f8      	b.n	e <USART_HalfDuplexCmd+0xe>
Disassembly of section .text.USART_IrDAConfig:

00000000 <USART_IrDAConfig>:
USART_IrDAConfig():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:733
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
   0:	8a83      	ldrh	r3, [r0, #20]
   2:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8283      	strh	r3, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:734
  USARTx->CR3 |= USART_IrDAMode;
   c:	8a82      	ldrh	r2, [r0, #20]
   e:	b292      	uxth	r2, r2
  10:	4311      	orrs	r1, r2
  12:	8281      	strh	r1, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:735
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_IrDACmd:

00000000 <USART_IrDACmd>:
USART_IrDACmd():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:752
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
   0:	b931      	cbnz	r1, 10 <USART_IrDACmd+0x10>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:760
    USARTx->CR3 |= CR3_IREN_Set;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
   2:	8a83      	ldrh	r3, [r0, #20]
   4:	f023 0302 	bic.w	r3, r3, #2	; 0x2
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8283      	strh	r3, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:762
  }
}
   e:	4770      	bx	lr
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:755
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
  10:	8a83      	ldrh	r3, [r0, #20]
  12:	b29b      	uxth	r3, r3
  14:	f043 0302 	orr.w	r3, r3, #2	; 0x2
  18:	8283      	strh	r3, [r0, #20]
  1a:	e7f8      	b.n	e <USART_IrDACmd+0xe>
Disassembly of section .text.USART_GetFlagStatus:

00000000 <USART_GetFlagStatus>:
USART_GetFlagStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:795
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
   0:	8803      	ldrh	r3, [r0, #0]
   2:	4219      	tst	r1, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:804
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr
Disassembly of section .text.USART_ClearFlag:

00000000 <USART_ClearFlag>:
USART_ClearFlag():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:843
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
   0:	43c9      	mvns	r1, r1
   2:	b289      	uxth	r1, r1
   4:	8001      	strh	r1, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:844
}
   6:	4770      	bx	lr
Disassembly of section .text.USART_GetITStatus:

00000000 <USART_GetITStatus>:
USART_GetITStatus():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:879
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
   0:	b2cb      	uxtb	r3, r1
   2:	ea4f 1c53 	mov.w	ip, r3, lsr #5
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:882
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
   6:	f001 021f 	and.w	r2, r1, #31	; 0x1f
   a:	2301      	movs	r3, #1
   c:	fa13 f202 	lsls.w	r2, r3, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:884
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  10:	459c      	cmp	ip, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:886
  {
    itmask &= USARTx->CR1;
  12:	bf02      	ittt	eq
  14:	8983      	ldrheq	r3, [r0, #12]
  16:	b29b      	uxtheq	r3, r3
  18:	ea02 0c03 	andeq.w	ip, r2, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:884
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  1c:	d00b      	beq.n	36 <USART_GetITStatus+0x36>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:888
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  1e:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:890
  {
    itmask &= USARTx->CR2;
  22:	bf0b      	itete	eq
  24:	8a03      	ldrheq	r3, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:894
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  26:	8a83      	ldrhne	r3, [r0, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:890
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  {
    itmask &= USARTx->CR2;
  28:	b29b      	uxtheq	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:894
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  2a:	b29b      	uxthne	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:890
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  {
    itmask &= USARTx->CR2;
  2c:	bf0c      	ite	eq
  2e:	ea02 0c03 	andeq.w	ip, r2, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:894
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  32:	ea02 0c03 	andne.w	ip, r2, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:898
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  36:	0a09      	lsrs	r1, r1, #8
  38:	2201      	movs	r2, #1
  3a:	408a      	lsls	r2, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:899
  bitpos &= USARTx->SR;
  3c:	8803      	ldrh	r3, [r0, #0]
  3e:	b29b      	uxth	r3, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:900
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  40:	421a      	tst	r2, r3
  42:	bf0c      	ite	eq
  44:	2000      	moveq	r0, #0
  46:	2001      	movne	r0, #1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:910
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
  48:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
  4c:	bf0c      	ite	eq
  4e:	2000      	moveq	r0, #0
  50:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  54:	4770      	bx	lr
  56:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_ClearITPendingBit:

00000000 <USART_ClearITPendingBit>:
USART_ClearITPendingBit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:953
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
  USARTx->SR = (uint16_t)~itmask;
   0:	0a09      	lsrs	r1, r1, #8
   2:	2301      	movs	r3, #1
   4:	408b      	lsls	r3, r1
   6:	43db      	mvns	r3, r3
   8:	b29b      	uxth	r3, r3
   a:	8003      	strh	r3, [r0, #0]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:954
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_Init:

00000000 <USART_Init>:
USART_Init():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:189
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
   0:	8a03      	ldrh	r3, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:197
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   2:	88ca      	ldrh	r2, [r1, #6]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:191
  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
   4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:197
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   c:	4313      	orrs	r3, r2
   e:	8203      	strh	r3, [r0, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:166
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
  10:	b570      	push	{r4, r5, r6, lr}
  12:	460c      	mov	r4, r1
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:200
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  14:	8981      	ldrh	r1, [r0, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:210
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  16:	88a3      	ldrh	r3, [r4, #4]
  18:	8922      	ldrh	r2, [r4, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:166
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
  1a:	4606      	mov	r6, r0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:202
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  1c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:210
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  20:	8960      	ldrh	r0, [r4, #10]
  22:	431a      	orrs	r2, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:202
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  24:	f021 010c 	bic.w	r1, r1, #12	; 0xc
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:210
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  28:	4302      	orrs	r2, r0
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:202
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  2a:	0409      	lsls	r1, r1, #16
  2c:	0c09      	lsrs	r1, r1, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:210
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  2e:	b292      	uxth	r2, r2
  30:	430a      	orrs	r2, r1
  32:	81b2      	strh	r2, [r6, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:213

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  34:	8ab3      	ldrh	r3, [r6, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:220
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  36:	89a2      	ldrh	r2, [r4, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:215
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  3c:	041b      	lsls	r3, r3, #16
  3e:	0c1b      	lsrs	r3, r3, #16
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:220
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  40:	4313      	orrs	r3, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:166
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
  42:	b086      	sub	sp, #24
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:220
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  44:	82b3      	strh	r3, [r6, #20]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:224

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  46:	a801      	add	r0, sp, #4
  48:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:225
  if (usartxbase == USART1_BASE)
  4c:	f643 0300 	movw	r3, #14336	; 0x3800
  50:	f2c4 0301 	movt	r3, #16385	; 0x4001
  54:	429e      	cmp	r6, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:227
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  56:	bf0c      	ite	eq
  58:	9904      	ldreq	r1, [sp, #16]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:231
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  5a:	9903      	ldrne	r1, [sp, #12]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:235
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
  5c:	f248 551f 	movw	r5, #34079	; 0x851f
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:234
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  60:	00ca      	lsls	r2, r1, #3
  62:	014b      	lsls	r3, r1, #5
  64:	1a9b      	subs	r3, r3, r2
  66:	6822      	ldr	r2, [r4, #0]
  68:	185b      	adds	r3, r3, r1
  6a:	0092      	lsls	r2, r2, #2
  6c:	fbb3 f3f2 	udiv	r3, r3, r2
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:235
  tmpreg = (integerdivider / 0x64) << 0x04;
  70:	f2c5 15eb 	movt	r5, #20971	; 0x51eb
  74:	fba5 2403 	umull	r2, r4, r5, r3
  78:	0964      	lsrs	r4, r4, #5
  7a:	0124      	lsls	r4, r4, #4
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:238
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
  7c:	0922      	lsrs	r2, r4, #4
  7e:	0091      	lsls	r1, r2, #2
  80:	0112      	lsls	r2, r2, #4
  82:	1889      	adds	r1, r1, r2
  84:	0088      	lsls	r0, r1, #2
  86:	1809      	adds	r1, r1, r0
  88:	1a5b      	subs	r3, r3, r1
  8a:	011b      	lsls	r3, r3, #4
  8c:	3332      	adds	r3, #50
  8e:	fba5 2303 	umull	r2, r3, r5, r3
  92:	095b      	lsrs	r3, r3, #5
  94:	f003 030f 	and.w	r3, r3, #15	; 0xf
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:240
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
  98:	4323      	orrs	r3, r4
  9a:	b29b      	uxth	r3, r3
  9c:	8133      	strh	r3, [r6, #8]
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:241
}
  9e:	b006      	add	sp, #24
  a0:	bd70      	pop	{r4, r5, r6, pc}
  a2:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_DeInit:

00000000 <USART_DeInit>:
USART_DeInit():
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:125
void USART_DeInit(USART_TypeDef* USARTx)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
   0:	f643 0300 	movw	r3, #14336	; 0x3800
   4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   8:	4298      	cmp	r0, r3
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:121
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
   a:	b510      	push	{r4, lr}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:125
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
   c:	d023      	beq.n	56 <USART_DeInit+0x56>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:130
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
   e:	f244 4300 	movw	r3, #17408	; 0x4400
  12:	f2c4 0300 	movt	r3, #16384	; 0x4000
  16:	4298      	cmp	r0, r3
  18:	d028      	beq.n	6c <USART_DeInit+0x6c>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:135
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  1a:	f644 0300 	movw	r3, #18432	; 0x4800
  1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  22:	4298      	cmp	r0, r3
  24:	d02d      	beq.n	82 <USART_DeInit+0x82>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:140
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  26:	f644 4300 	movw	r3, #19456	; 0x4c00
  2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  2e:	4298      	cmp	r0, r3
  30:	d032      	beq.n	98 <USART_DeInit+0x98>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:147
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }    
  else
  {
    if (USARTx == UART5)
  32:	f245 0300 	movw	r3, #20480	; 0x5000
  36:	f2c4 0300 	movt	r3, #16384	; 0x4000
  3a:	4298      	cmp	r0, r3
  3c:	d000      	beq.n	40 <USART_DeInit+0x40>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:153
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
  3e:	bd10      	pop	{r4, pc}
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:149
  }    
  else
  {
    if (USARTx == UART5)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
  40:	2101      	movs	r1, #1
  42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  46:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:150
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4e:	2100      	movs	r1, #0
  50:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  54:	e7f3      	b.n	3e <USART_DeInit+0x3e>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:127
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  56:	2101      	movs	r1, #1
  58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  5c:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:128
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  64:	2100      	movs	r1, #0
  66:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  6a:	e7e8      	b.n	3e <USART_DeInit+0x3e>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:132
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  6c:	2101      	movs	r1, #1
  6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  72:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:133
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  76:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  7a:	2100      	movs	r1, #0
  7c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  80:	e7dd      	b.n	3e <USART_DeInit+0x3e>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:137
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  82:	2101      	movs	r1, #1
  84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  88:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:138
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  8c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  90:	2100      	movs	r1, #0
  92:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  96:	e7d2      	b.n	3e <USART_DeInit+0x3e>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:142
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  98:	2101      	movs	r1, #1
  9a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  9e:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Program Files (x86)\Raisonance\Ride\lib\ARM\STM32F10x_LIB_V3.0.1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_usart.c:143
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  a6:	2100      	movs	r1, #0
  a8:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  ac:	e7c7      	b.n	3e <RCC_APB1PeriphResetCmd+0x3e>
  ae:	46c0      	nop			(mov r8, r8)
