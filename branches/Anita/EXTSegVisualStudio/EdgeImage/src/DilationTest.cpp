#include <stdio.h>
#include <stdlib.h>
#include <tut/tut.hpp>
#include <tut/tut_reporter.hpp>

extern "C" {
#include "EdgeImage_private.h"
#include "test_fw.h"
};

#define MAX2(a,b) (a)>(b)?(a):(b)
#define MAX3(a,b,c) MAX2(MAX2((a),(b)),(c))
#define CONTENT(ptr,step,i,j) (*((int*)ptr + j*step +i))



void test_compute_pdilation_basic(void);
//segment("sdram0")
static unsigned int out_asm[200*200],temp[200*5],param[10];

int w1 =9;
int h1 = 9;
int inpws1 = 44;
int outws1 = 36;
unsigned int inp1[]={
2,9,2,3,4,5,12,15,3,1,3,
2,4,2,1,12,6,5,8,9,4,9,
2,3,2,5,4,7,8,9,10,9,10,
1,4,1,6,6,5,12,10,11,15,11,
6,5,6,7,9,9,10,11,12,13,12,
8,6,8,8,9,10,11,12,13,2,13,
9,7,9,9,10,11,12,13,14,7,14,
11,8,11,1,11,3,13,14,15,13,15,
10,9,10,11,12,13,14,15,16,0,16,
};

unsigned int out1[]={
9,9,12,12,12,15,15,15,9,
9,9,12,12,12,15,15,15,10,
4,6,12,12,12,12,12,15,15,
6,7,9,9,12,12,12,15,15,
8,8,9,10,12,12,13,15,15,
9,9,10,11,12,13,14,14,14,
11,11,11,11,13,14,15,15,15,
11,11,12,13,14,15,16,16,16,
11,11,12,13,14,15,16,16,16,
};

int w2 =9;
int h2 = 9;

unsigned int inp2[]={
1883776,2127872,2128320,2128768,2129216,2129664,2130112,2130560,2131008,
2152320,2986816,3113344,2170112,2261600,3719104,2284160,3185152,2811264,
3477792,3640480,2428704,3636160,2921504,3379456,1383488,3993408,2565152,
4160128,2777024,2280992,3543712,2434784,3819200,2327168,3689632,3719328,
3625920,3280992,3714560,2557440,1321088,3215808,2158784,2508320,2531584,
1555584,2820544,3014144,3145216,3372896,2459808,1182656,2995520,2436768,
3284256,1964864,1357152,2914880,3215552,1987424,2192096,2777504,2845600,
3279904,2909280,2686656,2229952,3173120,1939424,1243232,2296448,3735904,
3995392,3468096,2559744,1253824,2977856,1843552,1674496,1690912,1682848,
};


unsigned int out2[]={
2986816,3113344,3113344,3113344,3719104,3719104,3719104,3185152,3185152,
3640480,3640480,3640480,3636160,3719104,3719104,3993408,3993408,3993408,
4160128,4160128,3640480,3636160,3819200,3819200,3993408,3993408,3993408,
4160128,4160128,3714560,3714560,3819200,3819200,3993408,3993408,3993408,
4160128,4160128,3714560,3714560,3819200,3819200,3819200,3719328,3719328,
3625920,3714560,3714560,3714560,3372896,3372896,3215808,2995520,2995520,
3284256,3284256,3145216,3372896,3372896,3372896,2995520,3735904,3735904,
3995392,3995392,3468096,3215552,3215552,3215552,2777504,3735904,3735904,
3995392,3995392,3468096,3173120,3173120,3173120,2296448,3735904,3735904,
};



int w3 =9;
int h3 = 9;

unsigned int inp3[]={
107190681,10688921,141072793,44656230,144932863,171389746,31568691,146925157,1631846,
20230963,127467519,138726604,7326924,158839602,54689791,45593395,95721881,48503193,
6855065,28383641,78466252,25545932,200166604,180518911,171756748,81179442,211196312,
44407193,7169638,179162316,117440511,103324057,175393996,66571468,36562534,16665804,
209053285,150444441,62731058,24923340,201516645,92471295,100302847,46720614,2313420,
20722483,121470975,125376921,62423039,44787302,95191039,72882585,210278808,50613452,
205370162,37329305,133634457,31627673,135593983,145575116,156414770,78748057,84829798,
194327346,211248741,40848588,86730342,53280767,129446706,122381925,109274725,149756313,
160006143,94489804,81670962,10544742,68485119,158007295,79645900,145909349,98474393,
};


unsigned int out3[]={
127467519,141072793,141072793,158839602,171389746,171389746,171389746,146925157,146925157,
127467519,141072793,141072793,200166604,200166604,200166604,180518911,211196312,211196312,
127467519,179162316,179162316,200166604,200166604,200166604,180518911,211196312,211196312,
209053285,209053285,179162316,201516645,201516645,201516645,180518911,211196312,211196312,
209053285,209053285,179162316,201516645,201516645,201516645,210278808,210278808,210278808,
209053285,209053285,150444441,201516645,201516645,201516645,210278808,210278808,210278808,
211248741,211248741,211248741,135593983,145575116,156414770,210278808,210278808,210278808,
211248741,211248741,211248741,135593983,158007295,158007295,158007295,156414770,149756313,
211248741,211248741,211248741,86730342,158007295,158007295,158007295,149756313,149756313,
};

int w4 = 3;
int h4 = 3;

unsigned int inp4[]={
105938943,203633458,86166732,
166356581,72771174,209623448,
161113701,164534680,5544345,
};


unsigned int out4[]={
203633458,209623448,209623448,
203633458,209623448,209623448,
166356581,209623448,209623448,
};


void test_compute_dilation()
{
	unsigned int *inp,*out,w,h,inp_ws,out_ws;
	int j;
	char *func1="Compute_Dilation %d",func[30];

	for(j=0;j<4;j++)
	{
		switch(j)
		{
			case 0:
				w = w1;
				h = h1;
				inp_ws = inpws1>>2;
				out_ws = outws1>>2;
				inp = &inp1[1];
				out = out1;
				break;
			case 1:
				w = w2;
				h = h2;
				inp_ws = w2;
				out_ws = w2;
				inp = inp2;
				out = out2;
				break;
			case 2:
				w = w3;
				h = h3;
				inp_ws = w3;
				out_ws = w3;
				inp = inp3;
				out = out3;
				break;
			case 3:
				w = w4;
				h = h4;
				inp_ws = w4;
				out_ws = w4;
				inp = inp4;
				out = out4;
				break;

		}
		sprintf(func,func1,j+1);

		param[0] = w;//width
		param[1] = h;//height
		param[2] = inp_ws*4;//inp widthstep
		param[3] = out_ws*4;//out widthstep
		param[4] = (unsigned int)&temp[0];

		dilate_i(inp,out_asm,param);

		tut::ensure(ensure_results_int(func,(int*)out_asm,(int*)out,param[0]*param[1]));
	}
}


void test_compute_pdilation3_advance(void)
{

unsigned int inpA[]={
2,9,2,3,4,5,12,15,3,1,3,
2,4,2,1,12,6,5,8,9,4,9,
2,3,2,5,4,7,8,9,10,9,10,
1,4,1,6,6,5,12,10,11,15,11,
6,5,6,7,9,9,10,11,12,13,12,
8,6,8,8,9,10,11,12,13,2,13,
9,7,9,9,10,11,12,13,14,7,14,
11,8,11,1,11,3,13,14,15,13,15,
10,9,10,11,12,13,14,15,16,0,16,
};
unsigned int inpB[]={
9,2,3,4,5,12,15,3,1,3,
4,2,1,12,6,5,8,9,4,9,
3,2,5,4,7,8,9,10,9,10,
4,1,6,6,5,12,10,11,15,11,
5,6,7,9,9,10,11,12,13,12,
6,8,8,9,10,11,12,13,2,13,
7,9,9,10,11,12,13,14,7,14,
8,11,1,11,3,13,14,15,13,15,
9,10,11,12,13,14,15,16,0,16,
};
unsigned int inpC[]={
2,9,2,3,4,5,12,15,3,1,
2,4,2,1,12,6,5,8,9,4,
2,3,2,5,4,7,8,9,10,9,
1,4,1,6,6,5,12,10,11,15,
6,5,6,7,9,9,10,11,12,13,
8,6,8,8,9,10,11,12,13,2,
9,7,9,9,10,11,12,13,14,7,
11,8,11,1,11,3,13,14,15,13,
10,9,10,11,12,13,14,15,16,0,
};
unsigned int inpD[]={
0,1,2,3,4,5,6,7,8,
0,2,1,12,6,5,8,9,4,
3,0,5,4,7,8,9,10,9,
0,1,0,6,5,0,10,0,15,
5,6,7,9,9,10,0,12,13,
6,8,8,9,0,11,0,13,2,
7,9,9,0,11,12,13,14,7,
8,0,1,0,3,13,0,15,13,
9,10,11,0,13,0,15,16,0,
};

Point2D16i pArr[]=
{

{1,1},{2,1},{3,1},{4,1},{5,1},{6,1},{7,1},{8,1},
{0,2},{2,2},{3,2},{4,2},{5,2},{6,2},{7,2},{8,2},
{1,3},{3,3},{4,3},{6,3},{8,3},
{0,4},{1,4},{2,4},{3,4},{4,4},{5,4},{7,4},{8,4},
{0,5},{1,5},{2,5},{3,5},{5,5},{7,5},{8,5},
{0,6},{1,6},{2,6},{4,6},{5,6},{6,6},{7,6},{8,6},
{0,7},{2,7},{4,7},{5,7},{7,7},{8,7},
{0,8},{1,8},{2,8},{4,8},{6,8},{7,8},{8,8},
};

unsigned int maxscore[]=
{

2,1,12,6,5,8,9,4,
3,5,4,7,8,9,10,9,
1,6,5,10,15,
5,6,7,9,9,10,12,13,
6,8,8,9,11,13,2,
7,9,9,11,12,13,14,7,
8,1,3,13,15,13,
9,10,11,13,15,16,0,
};

	Point2D16i Outasm[100];
	unsigned int outscore[100];
	short res;
	int *inputs[4],params[10];

	inputs[0] = (int*)&inpA[1];
	inputs[1] = (int*)&inpB[0];
	inputs[2] = (int*)&inpC[1];
	inputs[3] = (int*)&inpD[0];

	params[0] = 9;//w
	params[1] = 9;//h
	params[2] = 44;//stepA
	params[3] = 40;//stepB
	params[4] = 40;//stepC
	params[5] = 36;//stepD
	params[6] = 90;//MAX
	params[7] = (int)outscore;//MAX
	params[8] = 0;//inp x offset
	params[9] = 0;//inp y offset

//	res = pdilate_i_c(inputs, Outasm, params);
	res = pdilate_i_3(inputs, Outasm, params);

	tut::ensure(ensure_results_short("pDilation3 test advance",(short*) Outasm,(short*)pArr ,res<<1));
	tut::ensure(ensure_results_int("pDilation3 test advance",(int*)maxscore,(int*)outscore ,res));
}

void test_compute_pdilation3_basic()
{
unsigned int inpA[]={
60856729,18395955,152390860,211078348,165989580,109314047,48345907,147521535,77240729,
43587993,175236709,191732120,158315314,19411763,178795314,119550770,107806719,30572543,
67698687,199806156,161474149,135148338,117610905,26863206,102576946,122145996,40724070,
13434879,51458867,55030578,64009010,169449880,83178290,212762623,140692684,141105561,
137311026,154782924,172104088,144238181,213660466,41877503,96849100,20597964,43450367,
119367269,98205695,83361791,172628376,189051698,25500057,207624600,181102181,191751781,
49564876,116077362,18605670,180577893,63353650,160130661,119668735,98258124,96901529,
76257689,165380095,73649356,171697765,133568921,130947481,123568127,40868249,74068786,
83256934,90053017,175079423,45180518,30349721,25618022,11154227,88185241,191076760,
};
unsigned int inpB[]={
14483455,35402547,64002457,148701183,7687372,166415564,96737689,145575116,208548658,
130161049,124498738,187806514,76441190,183081368,30067916,71650508,59113471,42762239,
204242943,92379545,190827724,153465650,11095244,176173874,47146598,108698009,162018098,
33436467,64133529,76375654,63360204,197669682,196372069,182484991,116083916,114845285,
119465573,167300300,174902476,108081970,86507519,30028595,94876466,196994661,190303436,
28947251,145863474,207034776,30756044,100060364,194130738,18579455,98317106,122073906,
122454015,194242149,214361701,191050546,67620044,109320601,11265638,166526975,104248114,
173191986,119164108,5885132,26404454,118397337,58720255,13638041,7903641,130482175,
15636889,57062194,130534604,6710886,137291365,182530866,139558911,28206694,94181785,
};
unsigned int inpC[]={
27223654,132028825,209525144,184215141,106358374,208089906,167673855,175525068,180132248,
55699046,25519718,67777330,214420684,144939417,115133644,15492710,65955430,46753382,
208725605,129158348,22590259,25500057,24117247,42860543,134361906,12497715,81218764,
134368460,146112511,104706866,46235647,41438412,197407538,137186508,180794162,186777599,
90688716,126530354,10603724,95721881,66001305,31902924,44787302,4082892,81978982,
185112984,124931276,182484991,115730021,169902079,156499967,60266905,103592754,143563161,
52717158,49394483,140227378,113285529,144067788,175276031,84606975,107341414,105650585,
196391730,4351590,31234457,125442457,21928345,107184127,117060402,104916582,3165388,
35874406,33174323,196771839,51956940,194412543,55915314,145666866,54244146,179037797,
};
unsigned int inpD[]={
60856729,206805400,209525144,167883570,165989580,202224434,167673855,153445989,208548658,
130161049,179326156,191732120,14181990,183081368,78689074,119550770,144375807,46753382,
208725605,15571353,190827724,129151794,117610905,59428044,134361906,131602841,162018098,
134368460,123364965,104706866,23887871,197669682,159200050,212762623,24392499,186777599,
137311026,162666904,174902476,85668658,213660466,148268645,96849100,185355468,190303436,
185112984,132900453,207034776,168270232,189051698,157522329,207624600,178703564,191751781,
122454015,74855218,214361701,190958796,144067788,196922572,119668735,134466764,105650585,
196391730,85078834,73649356,14765260,133568921,123948236,123568127,118331801,130482175,
83256934,85747302,196771839,52376371,194412543,203063295,145666866,90760806,191076760,
};

Point2D16i pArr[]=
{
{0,0},{2,0},{4,0},{6,0},{8,0},
{0,1},{2,1},{4,1},{6,1},{8,1},
{0,2},{2,2},{4,2},{6,2},{8,2},
{0,3},{2,3},{4,3},{6,3},{8,3},
{0,4},{2,4},{4,4},{6,4},{8,4},
{0,5},{2,5},{4,5},{6,5},{8,5},
{0,6},{2,6},{4,6},{6,6},{8,6},
{0,7},{2,7},{4,7},{6,7},{8,7},
{0,8},{2,8},{4,8},{6,8},{8,8},
};

unsigned int maxscore[]=
{
60856729,209525144,165989580,167673855,208548658,
130161049,191732120,183081368,119550770,46753382,
208725605,190827724,117610905,134361906,162018098,
134368460,104706866,197669682,212762623,186777599,
137311026,174902476,213660466,96849100,190303436,
185112984,207034776,189051698,207624600,191751781,
122454015,214361701,144067788,119668735,105650585,
196391730,73649356,133568921,123568127,130482175,
83256934,196771839,194412543,145666866,191076760,
};




	Point2D16i Outasm[100];
	unsigned int outscore[100];
	short res;
	int *inputs[4],params[10];

	inputs[0] = ( int*)&inpA[0];
	inputs[1] = ( int*)&inpB[0];
	inputs[2] = ( int*)&inpC[0];
	inputs[3] = ( int*)&inpD[0];

	params[0] = 9;//w
	params[1] = 9;//h
	params[2] = 36;//stepA
	params[3] = 36;//stepB
	params[4] = 36;//stepC
	params[5] = 36;//stepD
	params[6] = 90;//MAX
	params[7] = (int)outscore;//MAX
	params[8] = 0;//inp x offset
	params[9] = 0;//inp y offset


//	res = pdilate_i_c(inputs, Outasm, params);
	res = pdilate_i_3(inputs, Outasm, params);

	tut::ensure(ensure_results_short("pDilation3 test basic",(short*) Outasm,(short*)pArr ,res<<1));
	tut::ensure(ensure_results_int("pDilation3 test basic",(int*) maxscore,(int*)outscore ,res));

}


void test_compute_pdilation3()
{
	test_compute_pdilation3_basic();
	test_compute_pdilation3_advance();
}


void test_detect_single_specularity_basic()
{

	Point2D16i Outasm[100];
	short res;
	int params[10];

	unsigned char input[]={
	0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,10,35,0,40,45,0,60,0,0,0,0,0,
	0,0,0,0,15,30,0,41,44,0,70,0,0,0,0,0,
	0,0,0,0,20,25,0,42,43,0,80,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,
	};

	Point2D16i pArr[]={
	{7,4},{8,4},{10,4},
	{7,6},{8,6},
	};

	params[0] = 16;//w
	params[1] = 11;//h
	params[2] = 16;//step
	params[3] = 0x000F000F;//THRESHOLD IN TERMS OF HALF WORD
	params[4] = 30;//max size;
	params[5] = 4;//specradius
	res = detect_single_specularity(&input[4*params[2]+4], Outasm, params);
	tut::ensure(5==res);
	tut::ensure(ensure_results_short("test_detect_single_specularity basic",(short*) Outasm,(short*)pArr ,res<<1));

}

void test_detect_single_specularity_advance()
{

	Point2D16i Outasm[100];
	short res;
	int params[10];

	unsigned char input[]={
	0,2,3,4,5,12,15,3,1,12,15,3,
	1,0,1,2,0,0,1,2,4,0,1,2,
	2,1,2,3,0,1,2,3,9,1,2,3,
	3,2,3,4,0,2,3,4,15,2,3,4,
	5,0,0,0,255,10,40,0,10,0,0,0,
	0,0,1,2,0,200,50,2,2,0,1,2,
	1,1,2,3,0,1,10,3,7,1,2,3,
	2,2,3,4,0,2,3,4,13,2,3,4,
	3,10,11,12,13,14,15,16,0,14,15,16,
	4,11,12,13,14,15,16,17,1,15,16,17,
	5,12,13,14,15,16,17,18,2,16,17,18,
	};

	Point2D16i pArr[]={
	{4,4},{6,4},
	{5,5},{6,5},

	};

	params[0] = 12;//w
	params[1] = 11;//h
	params[2] = 12;//step
	params[3] = 0x000F000F;//THRESHOLD IN TERMS OF HALF WORD
	params[4] = 30;//max size;
	params[5] = 4;//specradius

	res = detect_single_specularity(&input[4*params[2]+4], Outasm, params);
	tut::ensure(4==res);
	tut::ensure(ensure_results_short("test_detect_single_specularity advance",(short*) Outasm,(short*)pArr ,res<<1));

}

void test_detect_single_specularity_advance1()
{

	Point2D16i Outasm[100];
	short res;
	int params[10];

	unsigned char input[]={
	0,2,3,4,5,12,15,3,1,0,23,13,12,1,15,3,
	1,0,1,2,0,0,1,2,4,0,23,231,0,1,1,2,
	2,1,2,3,0,1,2,3,9,0,23,20,1,21,2,3,
	3,2,3,4,0,2,3,4,15,35,12,32,2,2,3,4,
	5,0,0,0,255,10,40,0,10,200,3,2,0,3,0,0,
	0,0,1,2,0,50,50,246,2,121,21,6,0,8,1,2,
	1,1,2,3,0,1,10,250,60,200,255,4,1,53,2,3,
	2,2,3,4,0,2,3,4,13,5,21,4,2,9,3,4,
	0,10,11,12,13,14,15,16,241,3,50,4,14,34,15,16,
	4,11,12,13,14,15,16,17,1,4,65,232,15,4,16,17,
	5,12,13,14,15,16,17,18,2,8,3,6,16,5,17,18,
	};

	Point2D16i pArr[]={
			{7,6},{9,6},{10,6},
	};

	params[0] = 16;//w
	params[1] = 11;//h
	params[2] = 16;//step
	params[3] = 0x000F000F;//THRESHOLD IN TERMS OF HALF WORD
	params[4] = 30;//max size;
	params[5] = 4;//specradius

	res = detect_single_specularity(&input[4*params[2]+4], Outasm, params);
	tut::ensure(3==res);
	tut::ensure(ensure_results_short("test_detect_single_specularity advance1",(short*) Outasm,(short*)pArr ,res<<1));

}

void test_detect_single_specularity_advance2()
{
	Point2D16i Outasm[100];
	short res;
	int params[10];

	unsigned char input[]={
	0,2,3,4,5,12,15,3,1,12,15,3,
	1,0,1,2,0,0,1,2,4,0,1,2,
	2,1,2,3,0,1,2,3,9,1,2,3,
	3,2,3,4,0,2,3,4,15,2,3,4,
	5,0,0,0,255,10,40,0,10,0,0,0,
	0,0,1,2,0,200,50,2,2,0,1,2,
	1,1,2,3,0,1,10,3,7,1,2,3,
	2,2,3,4,0,2,3,4,13,2,3,4,
	3,10,11,12,13,14,15,16,0,14,15,16,
	4,11,12,13,14,15,16,17,1,15,16,17,
	5,12,13,14,15,16,17,18,2,16,17,18,
	};

	Point2D16i pArr[]={
			{4,4},{6,4},{5,5},{6,5}
	};

	params[0] = 12;//w
	params[1] = 11;//h
	params[2] = 12;//step
	params[3] = 0x000F000F;//THRESHOLD IN TERMS OF HALF WORD
	params[4] = 30;//max size;
	params[5] = 4;//spec radius

	res = detect_single_specularity(&input[4*params[2]+4], Outasm, params);
	tut::ensure(4==res);
	tut::ensure(ensure_results_short("test_detect_single_specularity advance2",(short*) Outasm,(short*)pArr ,res<<1));

}


void test_detect_single_specularity_advance3()
{

	Point2D16i Outasm[100];
	short res;
	int params[10];

	unsigned char input[]={
	0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,
	47,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,
	25,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,
	20,0,0,0,0,0,1,2,55,4,5,0,0,0,0,0,
	40,0,0,0,234,1,2,3,71,5,6,0,0,0,0,0,
	137,0,0,0,0,2,3,4,50,6,7,0,0,0,0,0,
	171,0,0,0,0,3,4,5,85,7,8,0,0,0,0,0,
	119,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,
	47,0,0,0,149,0,0,0,211,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,
	};


	Point2D16i pArr[]={
			{4,4}
	};

	params[0] = 16;//w
	params[1] = 11;//h
	params[2] = 16;//step
	params[3] = 0x000F000F;//THRESHOLD IN TERMS OF HALF WORD
	params[4] = 30;//max size;
	params[5] = 4;//spec radius

	res = detect_single_specularity(&input[4*params[2]+4], Outasm, params);
	tut::ensure(1==res);
	tut::ensure(ensure_results_short("test_detect_single_specularity advance3",(short*) Outasm,(short*)pArr ,res<<1));

}



void test_detect_single_specularity_advance4()
{
	Point2D16i Outasm[100];
	short res;
	int params[10];

	unsigned char input[]={
	0,2,3,4,5,12,15,3,1,12,15,3,
	1,0,1,2,0,0,1,2,4,0,1,2,
	2,1,2,3,0,1,2,3,9,1,2,3,
	3,2,3,4,0,2,3,4,15,2,3,4,
	5,0,0,0,255,10,40,0,10,0,0,0,
	0,0,1,2,0,200,50,2,2,0,1,2,
	1,1,2,3,0,1,10,3,7,1,2,3,
	2,2,3,4,255,254,3,4,13,2,3,4,
	3,10,11,12,13,14,15,16,0,14,15,16,
	4,11,12,13,14,15,16,17,1,15,16,17,
	5,12,13,14,15,16,17,18,2,16,17,18,
	5,12,13,14,15,16,17,18,2,16,17,18,
	};

	Point2D16i pArr[]={
		{4,4},{6,4},{5,5},{6,5},{4,7},{5,7}
	};

	params[0] = 12;//w
	params[1] = 12;//h
	params[2] = 12;//step
	params[3] = 0x000F000F;//THRESHOLD IN TERMS OF HALF WORD
	params[4] = 30;//max size;
	params[5] = 4;//spec radius

	res = detect_single_specularity(&input[4*params[2]+4], Outasm, params);
	tut::ensure(6==res);
	tut::ensure(ensure_results_short("test_detect_single_specularity advance4",(short*) Outasm,(short*)pArr ,res<<1));
}

void test_detect_single_specularity_advance5()
{
	Point2D16i Outasm[100];
	short res;
	int params[10];

	unsigned char input[]={
	0,2,3,4,5,12,15,3,1,12,15,3,
	1,0,1,2,0,0,1,2,4,0,1,2,
	2,1,2,3,0,1,2,3,9,1,2,3,
	3,2,3,4,0,2,3,4,15,2,3,4,
	5,0,0,0,255,10,40,0,10,0,0,0,
	0,0,1,2,0,200,50,2,2,0,1,2,
	1,1,2,3,0,1,10,3,7,1,2,3,
	2,2,3,4,255,254,3,4,13,2,3,4,
	3,10,11,12,13,14,15,16,0,14,15,16,
	4,11,12,13,14,15,16,17,1,15,16,17,
	5,12,13,14,15,16,17,18,2,16,17,18,
	5,12,13,14,15,16,17,18,2,16,17,18,
	};

	Point2D16i pArr[]={
		{4,4},{4,7},{5,7}
	};

	params[0] = 12;//w
	params[1] = 12;//h
	params[2] = 12;//step
	params[3] = 0x000F000F;//THRESHOLD IN TERMS OF HALF WORD
	params[4] = 30;//max size;
	params[5] = 2;//spec radius

	res = detect_single_specularity(&input[params[5]*params[2]+params[5]], Outasm, params);
	tut::ensure(3==res);
	tut::ensure(ensure_results_short("test_detect_single_specularity advance5",(short*) Outasm,(short*)pArr ,res<<1));
}


void FindMax(unsigned int *ptr,int* params);

void test_compute_max_basic()
{

unsigned int inpD[]={
60856729,132028825,209525144,211078348,165989580,208089906,167673855,175525068,208548658,
130161049,175236709,191732120,214420684,183081368,178795314,119550770,107806719,46753382,
208725605,199806156,190827724,153465650,117610905,176173874,134361906,122145996,162018098,
134368460,146112511,104706866,64009010,197669682,197407538,212762623,180794162,186777599,
137311026,167300300,174902476,144238181,213660466,41877503,96849100,196994661,190303436,
185112984,145863474,207034776,172628376,189051698,194130738,207624600,181102181,191751781,
122454015,194242149,214361701,191050546,144067788,175276031,119668735,166526975,105650585,
196391730,165380095,73649356,171697765,133568921,130947481,123568127,104916582,130482175,
83256934,90053017,196771839,51956940,194412543,182530866,145666866,88185241,191076760,
};

int params[10];
int maxX = 3;
int maxY = 1;
int maxscore = 214420684;



	params[0] = 9;//w
	params[1] = 9;//h
	params[2] = 36;//stepA
	params[3] = -1;//MAX x
	params[4] = -1;//MAX y
	params[5] = -1;//MAX val

	FindMax(inpD, params);

	tut::ensure(ensure_results_int("test_compute_max_basic x", &params[3],&maxX ,1));
	tut::ensure(ensure_results_int("test_compute_max_basic y", &params[4],&maxY ,1));
	tut::ensure(ensure_results_int("test_compute_max_basic score", &params[5],&maxscore ,1));

}

void test_compute_max_advance()
{

unsigned int inpD[]={
0,1,2,3,4,5,6,7,8,
0,2,1,12,6,5,8,9,4,
3,0,5,4,7,8,9,10,9,
0,1,0,6,5,0,10,0,15,
5,6,7,9,9,10,0,12,13,
6,8,8,9,0,11,0,13,2,
7,9,9,0,11,12,13,14,7,
8,0,1,0,3,13,0,15,13,
9,10,11,0,13,0,15,16,0,
};

	int params[10];
	int maxX = 7;
	int maxY = 8;
	int maxscore = 16;

	params[0] = 9;//w
	params[1] = 9;//h
	params[2] = 36;//stepA
	params[3] = -1;//MAX x
	params[4] = -1;//MAX y
	params[5] = -1;//MAX val

	FindMax(inpD, params);

	tut::ensure(ensure_results_int("test_compute_max_advance x", &params[3],&maxX ,1));
	tut::ensure(ensure_results_int("test_compute_max_advance y", &params[4],&maxY ,1));
	tut::ensure(ensure_results_int("test_compute_max_advance score", &params[5],&maxscore ,1));

}

void test_compute_FindMax(void)
{
	test_compute_max_basic();
	test_compute_max_advance();
}



void test_compute_pdilation2_advance(void)
{

unsigned int inpA[]={
2,9,2,3,4,5,12,15,3,1,3,
2,4,2,1,12,6,5,8,9,4,9,
2,3,2,5,4,7,8,9,10,9,10,
1,4,1,6,6,5,12,10,11,15,11,
6,5,6,7,9,9,10,11,12,13,12,
8,6,8,8,9,10,11,12,13,2,13,
9,7,9,9,10,11,12,13,14,7,14,
11,8,11,1,11,3,13,14,15,13,15,
10,9,10,11,12,13,14,15,16,0,16,
};
unsigned int inpB[]={
9,2,3,4,5,12,15,3,1,3,
4,2,1,12,6,5,8,9,4,9,
3,2,5,4,7,8,9,10,9,10,
4,1,6,6,5,12,10,11,15,11,
5,6,7,9,9,10,11,12,13,12,
6,8,8,9,10,11,12,13,2,13,
7,9,9,10,11,12,13,14,7,14,
8,11,1,11,3,13,14,15,13,15,
9,10,11,12,13,14,15,16,0,16,
};
unsigned int inpD[]={
0,1,2,3,4,5,6,7,8,
0,2,1,12,6,5,8,9,4,
3,0,5,4,7,8,9,10,9,
0,1,0,6,5,0,10,0,15,
5,6,7,9,9,10,0,12,13,
6,8,8,9,0,11,0,13,2,
7,9,9,0,11,12,13,14,7,
8,0,1,0,3,13,0,15,13,
9,10,11,0,13,0,15,16,0,
};


Point2D16i pArr[]=
{

{1,1},{2,1},{3,1},{4,1},{5,1},{6,1},{7,1},{8,1},
{0,2},{2,2},{3,2},{4,2},{5,2},{6,2},{7,2},{8,2},
{1,3},{3,3},{4,3},{6,3},{8,3},
{0,4},{1,4},{2,4},{3,4},{4,4},{5,4},{7,4},{8,4},
{0,5},{1,5},{2,5},{3,5},{5,5},{7,5},{8,5},
{0,6},{1,6},{2,6},{4,6},{5,6},{6,6},{7,6},{8,6},
{0,7},{2,7},{4,7},{5,7},{7,7},{8,7},
{0,8},{1,8},{2,8},{4,8},{6,8},{7,8},{8,8},
};
unsigned int maxscore[]=
{

2,1,12,6,5,8,9,4,
3,5,4,7,8,9,10,9,
1,6,5,10,15,
5,6,7,9,9,10,12,13,
6,8,8,9,11,13,2,
7,9,9,11,12,13,14,7,
8,1,3,13,15,13,
9,10,11,13,15,16,0,
};

	Point2D16i Outasm[100];
	unsigned int outscore[100];
	short res;
	int *inputs[4],params[10];

	inputs[0] = (int*)&inpA[1];
	inputs[1] = (int*)&inpB[0];
	inputs[2] = (int*)&inpD[0];

	params[0] = 9;//w
	params[1] = 9;//h
	params[2] = 44;//stepA
	params[3] = 40;//stepB
	params[4] = 36;//stepD
	params[5] = 90;//MAX
	params[6] = (int)outscore;//MAX
	params[7] = 0;//inp x offset
	params[8] = 0;//inp y offset

	res = pdilate_i_2(inputs, Outasm, params);

	tut::ensure(ensure_results_short("pDilation2 test advance x,y",(short*) Outasm,(short*)pArr ,res<<1));
	tut::ensure(ensure_results_int("pDilation2 test advance score",(int*)maxscore,(int*)outscore ,res));
}

void test_compute_pdilation2_basic()
{
unsigned int inpA[]={
60856729,18395955,152390860,211078348,165989580,109314047,48345907,147521535,77240729,
43587993,175236709,191732120,158315314,19411763,178795314,119550770,107806719,30572543,
67698687,199806156,161474149,135148338,117610905,26863206,102576946,122145996,40724070,
13434879,51458867,55030578,64009010,169449880,83178290,212762623,140692684,141105561,
137311026,154782924,172104088,144238181,213660466,41877503,96849100,20597964,43450367,
119367269,98205695,83361791,172628376,189051698,25500057,207624600,181102181,191751781,
49564876,116077362,18605670,180577893,63353650,160130661,119668735,98258124,96901529,
76257689,165380095,73649356,171697765,133568921,130947481,123568127,40868249,74068786,
83256934,90053017,175079423,45180518,30349721,25618022,11154227,88185241,191076760,
};
unsigned int inpB[]={
14483455,35402547,64002457,148701183,7687372,166415564,96737689,145575116,208548658,
130161049,124498738,187806514,76441190,183081368,30067916,71650508,59113471,42762239,
204242943,92379545,190827724,153465650,11095244,176173874,47146598,108698009,162018098,
33436467,64133529,76375654,63360204,197669682,196372069,182484991,116083916,114845285,
119465573,167300300,174902476,108081970,86507519,30028595,94876466,196994661,190303436,
28947251,145863474,207034776,30756044,100060364,194130738,18579455,98317106,122073906,
122454015,194242149,214361701,191050546,67620044,109320601,11265638,166526975,104248114,
173191986,119164108,5885132,26404454,118397337,58720255,13638041,7903641,130482175,
15636889,57062194,130534604,6710886,137291365,182530866,139558911,28206694,94181785,
};

unsigned int inpD[]={
60856729,206805400,209525144,167883570,165989580,202224434,167673855,153445989,208548658,
130161049,179326156,191732120,14181990,183081368,78689074,119550770,144375807,46753382,
208725605,15571353,190827724,129151794,117610905,59428044,134361906,131602841,162018098,
134368460,123364965,104706866,23887871,197669682,159200050,212762623,24392499,186777599,
137311026,162666904,174902476,85668658,213660466,148268645,96849100,185355468,190303436,
185112984,132900453,207034776,168270232,189051698,157522329,207624600,178703564,191751781,
122454015,74855218,214361701,190958796,144067788,196922572,119668735,134466764,105650585,
196391730,85078834,73649356,14765260,133568921,123948236,123568127,118331801,130482175,
83256934,85747302,196771839,52376371,194412543,203063295,145666866,90760806,191076760,
};

Point2D16i pArr[]=
{
{0,0},{4,0},{8,0},
{0,1},{2,1},{4,1},{6,1},
{2,2},{4,2},{8,2},
{4,3},{6,3},
{0,4},{2,4},{4,4},{6,4},{8,4},
{2,5},{4,5},{6,5},{8,5},
{0,6},{2,6},{6,6},
{2,7},{4,7},{6,7},{8,7},
{0,8},{8,8},
};
unsigned int maxscore[]=
{
60856729,165989580,208548658,
130161049,191732120,183081368,119550770,
190827724,117610905,162018098,
197669682,212762623,
137311026,174902476,213660466,96849100,190303436,
207034776,189051698,207624600,191751781,
122454015,214361701,119668735,
73649356,133568921,123568127,130482175,
83256934,191076760,
};



	Point2D16i Outasm[100];
	unsigned int outscore[100];
	short res;
	int *inputs[4],params[10];

	inputs[0] = ( int*)&inpA[0];
	inputs[1] = ( int*)&inpB[0];
	inputs[2] = ( int*)&inpD[0];

	params[0] = 9;//w
	params[1] = 9;//h
	params[2] = 36;//stepA
	params[3] = 36;//stepB
	params[4] = 36;//stepC
	params[5] = 90;//MAX
	params[6] = (int)outscore;//MAX
	params[7] = 0;//inp x offset
	params[8] = 0;//inp y offset

	res = pdilate_i_2(inputs, Outasm, params);

	tut::ensure(ensure_results_short("pDilation2 test basic x,y",(short*) Outasm,(short*)pArr ,res<<1));
	tut::ensure(ensure_results_int("pDilation2 test basic score",(int*) maxscore,(int*)outscore ,res));

}

void test_compute_pdilation2()
{
	test_compute_pdilation2_basic();
	test_compute_pdilation2_advance();
}

