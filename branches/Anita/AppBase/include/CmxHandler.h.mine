/*
 * CmxHandler.h
 * Accepts connection over TCP/IP and saves data to the queue
 * Created on: 18 Aug, 2009
 *      Author: akhil
 */

#ifndef CMXHANDLER_H_
#define CMXHANDLER_H_

#include "HThread.h"
#include "HTTPPOSTMsg.h"
#include "CommonDefs.h"
#include "socket.h"
#include <map>
#include <string>
#include <vector>
#include "ProcessorChain.h"
#include "Synchronization.h"
#include "ImageProcessor.h"

#define WAIT_PONG_TIME 	1000	// in ms
#define SEND_PING_TIME 	3000	// in ms
//#define IMAGE_SIZE		307216
#define IMAGE_SIZE		1152000

enum CMXMESSAGETYPE {CMX_INIT_CMD, CMX_SEND_CMD, CMX_PING_CMD, CMX_LED_CMD, CMX_SOUND_CMD, CMX_PONG, CMX_IMAGE};

using namespace std;
//fwd decl
//class HostAddress;
class Configuration;
class SocketFactory;
class ImageProcessor;


class CmxHandler: public HThread, public ProcessorChain{
#ifdef CMX_C1
public:
	CmxHandler(Configuration& pConf);
	virtual ~CmxHandler();
	virtual int End();

	virtual unsigned int MainLoop();
	const char *getName(){
		return "CmxHandler";
	}
	//bool do_serv_task(Socket & client);
	void HandleSendMsg(char *msg);
	void SetImageProcessor(ImageProcessor *ptr) {pImageProcessor = ptr;}
	static void onConnect(Socket & client, void *arg);
	bool HandleReceiveImage(char *buffer, int length);
	int CreateUDPServer(int port);
	int CreateCMDTCPServer(int port);

	int m_debug;
	bool m_waitPong;
	int m_sock;
	unsigned long m_pingTime;
	pthread_t leftCThread;
	pthread_t rightCThread;
	pthread_t faceThread;
	pthread_t cmdserverThread;



private:


    bool HandleReceiveMsg(Socket & client);
    void SendMessage(char *out_msg, int len);

    ImageProcessor *pImageProcessor;
    struct timeval m_timeOut,m_timeOutSend;

	//std::vector<HTTPPostMessageHandler *> m_MessageHandlers;
    SocketFactory *m_socketFactory;
	pthread_t statusThread;
	HostAddress *m_resultDestAddr;
	BinMessage *m_rcvdMsg;
	//SocketClient m_cmxclient;         // add it in cmxHandler.h

#endif	// CMX_C1

};


void *pingStatus(void *arg);
void *leftCServer(void *arg);
void *rightCServer(void *arg);
void *faceServer(void *arg);
void *cmdServer(void *arg);
extern void DeleteSocketStream(SocketServer *&s);



#endif /* CMXHANDLER_H_ */
