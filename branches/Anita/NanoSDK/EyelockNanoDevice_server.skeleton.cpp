// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "EyelockNanoDevice.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::EyelockNano;

class EyelockNanoDeviceHandler : virtual public EyelockNanoDeviceIf {
 public:
  EyelockNanoDeviceHandler() {
    // Your initialization goes here
  }

  int32_t startImageStream(const std::string& ipaddress, const std::string& portno, const bool secure, const ELKNS_ImageFormats::type format) {
    // Your implementation goes here
    printf("startImageStream\n");
  }

  int32_t stopImageStream(const std::string& ipaddress, const std::string& portno) {
    // Your implementation goes here
    printf("stopImageStream\n");
  }

  int32_t ChangeLedColor(const int8_t mask, const int32_t time) {
    // Your implementation goes here
    printf("ChangeLedColor\n");
  }

  void GetFirmwareRevision(std::map<std::string, std::string> & _return, const int32_t reType) {
    // Your implementation goes here
    printf("GetFirmwareRevision\n");
  }

  int32_t SetAudiolevel(const double vol) {
    // Your implementation goes here
    printf("SetAudiolevel\n");
  }

  double GetAudiolevel() {
    // Your implementation goes here
    printf("GetAudiolevel\n");
  }

  int32_t IsDeviceTampered() {
    // Your implementation goes here
    printf("IsDeviceTampered\n");
  }

  int32_t pushDB(const std::string& fullDB, const ACD_Type::type dbtype) {
    // Your implementation goes here
    printf("pushDB\n");
  }

  int32_t ResetFirmware() {
    // Your implementation goes here
    printf("ResetFirmware\n");
  }

  int32_t PingDevice() {
    // Your implementation goes here
    printf("PingDevice\n");
  }

  int64_t GetTime() {
    // Your implementation goes here
    printf("GetTime\n");
  }

  int32_t SyncTime(const int64_t nanoTime, const int64_t hostTime, const int32_t pingTimeout) {
    // Your implementation goes here
    printf("SyncTime\n");
  }

  int32_t RestartDevice(const ELKNS_RestartTypes::type restart) {
    // Your implementation goes here
    printf("RestartDevice\n");
  }

  int32_t updateDB(const std::string& upDB, const ACD_Type::type dbtype) {
    // Your implementation goes here
    printf("updateDB\n");
  }

  void GetConfigParameters(std::map<int32_t, std::string> & _return) {
    // Your implementation goes here
    printf("GetConfigParameters\n");
  }

  int32_t SetConfigParameters(const std::map<int32_t, std::string> & confMap) {
    // Your implementation goes here
    printf("SetConfigParameters\n");
  }

  void RetreiveAllIDs(std::string& _return) {
    // Your implementation goes here
    printf("RetreiveAllIDs\n");
  }

  void receiveChunkAndAppendFile(std::map<std::string, std::string> & _return, const std::vector<std::string> & chunkList) {
    // Your implementation goes here
    printf("receiveChunkAndAppendFile\n");
  }

  void neededChunkFromFile(std::vector<std::string> & _return, const std::map<std::string, std::string> & neededchunkInfo) {
    // Your implementation goes here
    printf("neededChunkFromFile\n");
  }

  int32_t RegisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event) {
    // Your implementation goes here
    printf("RegisterCallBack\n");
  }

  int32_t UnregisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event) {
    // Your implementation goes here
    printf("UnregisterCallBack\n");
  }

  void RetrieveLogs(std::map<std::string, std::string> & _return) {
    // Your implementation goes here
    printf("RetrieveLogs\n");
  }

  void GetSlaveVersion(std::string& _return) {
    // Your implementation goes here
    printf("GetSlaveVersion\n");
  }

  void getDBCheckSum(std::string& _return) {
    // Your implementation goes here
    printf("getDBCheckSum\n");
  }

  int32_t DeleteDeviceFile(const std::string& path, const bool isDirectory) {
    // Your implementation goes here
    printf("DeleteDeviceFile\n");
  }

  int32_t SendRelayCommand(const ELKNS_RelayTypes::type relayType, const int32_t duration) {
    // Your implementation goes here
    printf("SendRelayCommand\n");
  }

  void getRestorePoints(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getRestorePoints\n");
  }

  int32_t UpdateFirmware(const std::map<std::string, std::string> & filenamemap) {
    // Your implementation goes here
    printf("UpdateFirmware\n");
  }

  int32_t RestoreFirmware(const std::string& restorePointName, const std::map<std::string, std::string> & argMap) {
    // Your implementation goes here
    printf("RestoreFirmware\n");
  }

  int32_t DeleteRestorePoint(const std::string& restorePointName) {
    // Your implementation goes here
    printf("DeleteRestorePoint\n");
  }

  void CreateCustomKey(std::string& _return) {
    // Your implementation goes here
    printf("CreateCustomKey\n");
  }

  int32_t ConfirmCustomKey(const std::string& keyMd5) {
    // Your implementation goes here
    printf("ConfirmCustomKey\n");
  }

  int32_t SwitchToDefaultKey() {
    // Your implementation goes here
    printf("SwitchToDefaultKey\n");
  }

  int32_t GetKeyType() {
    // Your implementation goes here
    printf("GetKeyType\n");
  }

  void GetDeviceId(std::string& _return) {
    // Your implementation goes here
    printf("GetDeviceId\n");
  }

  int32_t SetPassword(const std::string& userName, const std::string& oldPassword, const std::string& newPassword) {
    // Your implementation goes here
    printf("SetPassword\n");
  }

  int32_t GetRecordsCount() {
    // Your implementation goes here
    printf("GetRecordsCount\n");
  }

  void GetFileChecksum(std::string& _return, const std::string& file) {
    // Your implementation goes here
    printf("GetFileChecksum\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<EyelockNanoDeviceHandler> handler(new EyelockNanoDeviceHandler());
  shared_ptr<TProcessor> processor(new EyelockNanoDeviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

