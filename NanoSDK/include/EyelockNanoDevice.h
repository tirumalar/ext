/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EyelockNanoDevice_H
#define EyelockNanoDevice_H

#include <thrift/TDispatchProcessor.h>
#include "NanoDevice_types.h"

namespace EyelockNano {

class EyelockNanoDeviceIf {
 public:
  virtual ~EyelockNanoDeviceIf() {}
  virtual int32_t startImageStream(const std::string& ipaddress, const std::string& portno, const bool secure, const ELKNS_ImageFormats::type format) = 0;
  virtual int32_t stopImageStream(const std::string& ipaddress, const std::string& portno) = 0;
  virtual int32_t ChangeLedColor(const int8_t mask, const int32_t time) = 0;
  virtual void GetFirmwareRevision(std::map<std::string, std::string> & _return, const int32_t reType) = 0;
  virtual int32_t SetAudiolevel(const double vol) = 0;
  virtual double GetAudiolevel() = 0;
  virtual int32_t IsDeviceTampered() = 0;
  virtual int32_t pushDB(const std::string& fullDB, const ACD_Type::type dbtype) = 0;
  virtual int32_t ResetFirmware() = 0;
  virtual int32_t PingDevice() = 0;
  virtual int64_t GetTime() = 0;
  virtual int32_t SyncTime(const int64_t nanoTime, const int64_t hostTime, const int32_t pingTimeout) = 0;
  virtual int32_t RestartDevice(const ELKNS_RestartTypes::type restart) = 0;
  virtual int32_t updateDB(const std::string& upDB, const ACD_Type::type dbtype) = 0;
  virtual void GetConfigParameters(std::map<int32_t, std::string> & _return) = 0;
  virtual int32_t SetConfigParameters(const std::map<int32_t, std::string> & confMap) = 0;
  virtual void RetreiveAllIDs(std::string& _return) = 0;
  virtual void receiveChunkAndAppendFile(std::map<std::string, std::string> & _return, const std::vector<std::string> & chunkList) = 0;
  virtual void neededChunkFromFile(std::vector<std::string> & _return, const std::map<std::string, std::string> & neededchunkInfo) = 0;
  virtual int32_t RegisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event) = 0;
  virtual int32_t UnregisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event) = 0;
  virtual void RetrieveLogs(std::map<std::string, std::string> & _return) = 0;
  virtual void GetSlaveVersion(std::string& _return) = 0;
  virtual void getDBCheckSum(std::string& _return) = 0;
  virtual int32_t DeleteDeviceFile(const std::string& path, const bool isDirectory) = 0;
  virtual int32_t SendRelayCommand(const ELKNS_RelayTypes::type relayType, const int32_t duration) = 0;
  virtual void getRestorePoints(std::vector<std::string> & _return) = 0;
  virtual int32_t UpdateFirmware(const std::map<std::string, std::string> & filenamemap) = 0;
  virtual int32_t RestoreFirmware(const std::string& restorePointName, const std::map<std::string, std::string> & argMap) = 0;
  virtual int32_t DeleteRestorePoint(const std::string& restorePointName) = 0;
  virtual void CreateCustomKey(std::string& _return) = 0;
  virtual int32_t ConfirmCustomKey(const std::string& keyMd5) = 0;
  virtual int32_t SwitchToDefaultKey() = 0;
  virtual int32_t GetKeyType() = 0;
  virtual void GetDeviceId(std::string& _return) = 0;
  virtual int32_t SetPassword(const std::string& userName, const std::string& oldPassword, const std::string& newPassword) = 0;
  virtual int32_t GetRecordsCount() = 0;
  virtual void GetFileChecksum(std::string& _return, const std::string& file) = 0;
  virtual int32_t SetIntParameter(const std::string& paramName, const int64_t value) = 0;
  virtual void GetIntParameter(GetIntReturn& _return, const std::string& paramName) = 0;
  virtual int32_t SetUIntParameter(const std::string& paramName, const int64_t value) = 0;
  virtual void GetUIntParameter(GetIntReturn& _return, const std::string& paramName) = 0;
  virtual int32_t SetDoubleParameter(const std::string& paramName, const double value) = 0;
  virtual void GetDoubleParameter(GetDoubleReturn& _return, const std::string& paramName) = 0;
  virtual int32_t SetBoolParameter(const std::string& paramName, const bool value) = 0;
  virtual void GetBoolParameter(GetBoolReturn& _return, const std::string& paramName) = 0;
  virtual int32_t SetStrParameter(const std::string& paramName, const std::string& value) = 0;
  virtual void GetStrParameter(GetStrReturn& _return, const std::string& paramName) = 0;
  virtual int32_t ResetConfigParameters() = 0;
};

class EyelockNanoDeviceIfFactory {
 public:
  typedef EyelockNanoDeviceIf Handler;

  virtual ~EyelockNanoDeviceIfFactory() {}

  virtual EyelockNanoDeviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EyelockNanoDeviceIf* /* handler */) = 0;
};

class EyelockNanoDeviceIfSingletonFactory : virtual public EyelockNanoDeviceIfFactory {
 public:
  EyelockNanoDeviceIfSingletonFactory(const boost::shared_ptr<EyelockNanoDeviceIf>& iface) : iface_(iface) {}
  virtual ~EyelockNanoDeviceIfSingletonFactory() {}

  virtual EyelockNanoDeviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EyelockNanoDeviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<EyelockNanoDeviceIf> iface_;
};

class EyelockNanoDeviceNull : virtual public EyelockNanoDeviceIf {
 public:
  virtual ~EyelockNanoDeviceNull() {}
  int32_t startImageStream(const std::string& /* ipaddress */, const std::string& /* portno */, const bool /* secure */, const ELKNS_ImageFormats::type /* format */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t stopImageStream(const std::string& /* ipaddress */, const std::string& /* portno */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ChangeLedColor(const int8_t /* mask */, const int32_t /* time */) {
    int32_t _return = 0;
    return _return;
  }
  void GetFirmwareRevision(std::map<std::string, std::string> & /* _return */, const int32_t /* reType */) {
    return;
  }
  int32_t SetAudiolevel(const double /* vol */) {
    int32_t _return = 0;
    return _return;
  }
  double GetAudiolevel() {
    double _return = (double)0;
    return _return;
  }
  int32_t IsDeviceTampered() {
    int32_t _return = 0;
    return _return;
  }
  int32_t pushDB(const std::string& /* fullDB */, const ACD_Type::type /* dbtype */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ResetFirmware() {
    int32_t _return = 0;
    return _return;
  }
  int32_t PingDevice() {
    int32_t _return = 0;
    return _return;
  }
  int64_t GetTime() {
    int64_t _return = 0;
    return _return;
  }
  int32_t SyncTime(const int64_t /* nanoTime */, const int64_t /* hostTime */, const int32_t /* pingTimeout */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RestartDevice(const ELKNS_RestartTypes::type /* restart */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t updateDB(const std::string& /* upDB */, const ACD_Type::type /* dbtype */) {
    int32_t _return = 0;
    return _return;
  }
  void GetConfigParameters(std::map<int32_t, std::string> & /* _return */) {
    return;
  }
  int32_t SetConfigParameters(const std::map<int32_t, std::string> & /* confMap */) {
    int32_t _return = 0;
    return _return;
  }
  void RetreiveAllIDs(std::string& /* _return */) {
    return;
  }
  void receiveChunkAndAppendFile(std::map<std::string, std::string> & /* _return */, const std::vector<std::string> & /* chunkList */) {
    return;
  }
  void neededChunkFromFile(std::vector<std::string> & /* _return */, const std::map<std::string, std::string> & /* neededchunkInfo */) {
    return;
  }
  int32_t RegisterCallBack(const std::string& /* ipaddress */, const std::string& /* portno */, const ELKNS_EventTypes::type /* Event */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t UnregisterCallBack(const std::string& /* ipaddress */, const std::string& /* portno */, const ELKNS_EventTypes::type /* Event */) {
    int32_t _return = 0;
    return _return;
  }
  void RetrieveLogs(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  void GetSlaveVersion(std::string& /* _return */) {
    return;
  }
  void getDBCheckSum(std::string& /* _return */) {
    return;
  }
  int32_t DeleteDeviceFile(const std::string& /* path */, const bool /* isDirectory */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SendRelayCommand(const ELKNS_RelayTypes::type /* relayType */, const int32_t /* duration */) {
    int32_t _return = 0;
    return _return;
  }
  void getRestorePoints(std::vector<std::string> & /* _return */) {
    return;
  }
  int32_t UpdateFirmware(const std::map<std::string, std::string> & /* filenamemap */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RestoreFirmware(const std::string& /* restorePointName */, const std::map<std::string, std::string> & /* argMap */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t DeleteRestorePoint(const std::string& /* restorePointName */) {
    int32_t _return = 0;
    return _return;
  }
  void CreateCustomKey(std::string& /* _return */) {
    return;
  }
  int32_t ConfirmCustomKey(const std::string& /* keyMd5 */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SwitchToDefaultKey() {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetKeyType() {
    int32_t _return = 0;
    return _return;
  }
  void GetDeviceId(std::string& /* _return */) {
    return;
  }
  int32_t SetPassword(const std::string& /* userName */, const std::string& /* oldPassword */, const std::string& /* newPassword */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetRecordsCount() {
    int32_t _return = 0;
    return _return;
  }
  void GetFileChecksum(std::string& /* _return */, const std::string& /* file */) {
    return;
  }
  int32_t SetIntParameter(const std::string& /* paramName */, const int64_t /* value */) {
    int32_t _return = 0;
    return _return;
  }
  void GetIntParameter(GetIntReturn& /* _return */, const std::string& /* paramName */) {
    return;
  }
  int32_t SetUIntParameter(const std::string& /* paramName */, const int64_t /* value */) {
    int32_t _return = 0;
    return _return;
  }
  void GetUIntParameter(GetIntReturn& /* _return */, const std::string& /* paramName */) {
    return;
  }
  int32_t SetDoubleParameter(const std::string& /* paramName */, const double /* value */) {
    int32_t _return = 0;
    return _return;
  }
  void GetDoubleParameter(GetDoubleReturn& /* _return */, const std::string& /* paramName */) {
    return;
  }
  int32_t SetBoolParameter(const std::string& /* paramName */, const bool /* value */) {
    int32_t _return = 0;
    return _return;
  }
  void GetBoolParameter(GetBoolReturn& /* _return */, const std::string& /* paramName */) {
    return;
  }
  int32_t SetStrParameter(const std::string& /* paramName */, const std::string& /* value */) {
    int32_t _return = 0;
    return _return;
  }
  void GetStrParameter(GetStrReturn& /* _return */, const std::string& /* paramName */) {
    return;
  }
  int32_t ResetConfigParameters() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _EyelockNanoDevice_startImageStream_args__isset {
  _EyelockNanoDevice_startImageStream_args__isset() : ipaddress(false), portno(false), secure(false), format(false) {}
  bool ipaddress;
  bool portno;
  bool secure;
  bool format;
} _EyelockNanoDevice_startImageStream_args__isset;

class EyelockNanoDevice_startImageStream_args {
 public:

  EyelockNanoDevice_startImageStream_args() : ipaddress(), portno(), secure(0), format((ELKNS_ImageFormats::type)0) {
  }

  virtual ~EyelockNanoDevice_startImageStream_args() throw() {}

  std::string ipaddress;
  std::string portno;
  bool secure;
  ELKNS_ImageFormats::type format;

  _EyelockNanoDevice_startImageStream_args__isset __isset;

  void __set_ipaddress(const std::string& val) {
    ipaddress = val;
  }

  void __set_portno(const std::string& val) {
    portno = val;
  }

  void __set_secure(const bool val) {
    secure = val;
  }

  void __set_format(const ELKNS_ImageFormats::type val) {
    format = val;
  }

  bool operator == (const EyelockNanoDevice_startImageStream_args & rhs) const
  {
    if (!(ipaddress == rhs.ipaddress))
      return false;
    if (!(portno == rhs.portno))
      return false;
    if (!(secure == rhs.secure))
      return false;
    if (!(format == rhs.format))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_startImageStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_startImageStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_startImageStream_pargs {
 public:


  virtual ~EyelockNanoDevice_startImageStream_pargs() throw() {}

  const std::string* ipaddress;
  const std::string* portno;
  const bool* secure;
  const ELKNS_ImageFormats::type* format;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_startImageStream_result__isset {
  _EyelockNanoDevice_startImageStream_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_startImageStream_result__isset;

class EyelockNanoDevice_startImageStream_result {
 public:

  EyelockNanoDevice_startImageStream_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_startImageStream_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_startImageStream_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_startImageStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_startImageStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_startImageStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_startImageStream_presult__isset {
  _EyelockNanoDevice_startImageStream_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_startImageStream_presult__isset;

class EyelockNanoDevice_startImageStream_presult {
 public:


  virtual ~EyelockNanoDevice_startImageStream_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_startImageStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_stopImageStream_args__isset {
  _EyelockNanoDevice_stopImageStream_args__isset() : ipaddress(false), portno(false) {}
  bool ipaddress;
  bool portno;
} _EyelockNanoDevice_stopImageStream_args__isset;

class EyelockNanoDevice_stopImageStream_args {
 public:

  EyelockNanoDevice_stopImageStream_args() : ipaddress(), portno() {
  }

  virtual ~EyelockNanoDevice_stopImageStream_args() throw() {}

  std::string ipaddress;
  std::string portno;

  _EyelockNanoDevice_stopImageStream_args__isset __isset;

  void __set_ipaddress(const std::string& val) {
    ipaddress = val;
  }

  void __set_portno(const std::string& val) {
    portno = val;
  }

  bool operator == (const EyelockNanoDevice_stopImageStream_args & rhs) const
  {
    if (!(ipaddress == rhs.ipaddress))
      return false;
    if (!(portno == rhs.portno))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_stopImageStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_stopImageStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_stopImageStream_pargs {
 public:


  virtual ~EyelockNanoDevice_stopImageStream_pargs() throw() {}

  const std::string* ipaddress;
  const std::string* portno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_stopImageStream_result__isset {
  _EyelockNanoDevice_stopImageStream_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_stopImageStream_result__isset;

class EyelockNanoDevice_stopImageStream_result {
 public:

  EyelockNanoDevice_stopImageStream_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_stopImageStream_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_stopImageStream_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_stopImageStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_stopImageStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_stopImageStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_stopImageStream_presult__isset {
  _EyelockNanoDevice_stopImageStream_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_stopImageStream_presult__isset;

class EyelockNanoDevice_stopImageStream_presult {
 public:


  virtual ~EyelockNanoDevice_stopImageStream_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_stopImageStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_ChangeLedColor_args__isset {
  _EyelockNanoDevice_ChangeLedColor_args__isset() : mask(false), time(false) {}
  bool mask;
  bool time;
} _EyelockNanoDevice_ChangeLedColor_args__isset;

class EyelockNanoDevice_ChangeLedColor_args {
 public:

  EyelockNanoDevice_ChangeLedColor_args() : mask(0), time(0) {
  }

  virtual ~EyelockNanoDevice_ChangeLedColor_args() throw() {}

  int8_t mask;
  int32_t time;

  _EyelockNanoDevice_ChangeLedColor_args__isset __isset;

  void __set_mask(const int8_t val) {
    mask = val;
  }

  void __set_time(const int32_t val) {
    time = val;
  }

  bool operator == (const EyelockNanoDevice_ChangeLedColor_args & rhs) const
  {
    if (!(mask == rhs.mask))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_ChangeLedColor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_ChangeLedColor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_ChangeLedColor_pargs {
 public:


  virtual ~EyelockNanoDevice_ChangeLedColor_pargs() throw() {}

  const int8_t* mask;
  const int32_t* time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_ChangeLedColor_result__isset {
  _EyelockNanoDevice_ChangeLedColor_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_ChangeLedColor_result__isset;

class EyelockNanoDevice_ChangeLedColor_result {
 public:

  EyelockNanoDevice_ChangeLedColor_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_ChangeLedColor_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_ChangeLedColor_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_ChangeLedColor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_ChangeLedColor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_ChangeLedColor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_ChangeLedColor_presult__isset {
  _EyelockNanoDevice_ChangeLedColor_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_ChangeLedColor_presult__isset;

class EyelockNanoDevice_ChangeLedColor_presult {
 public:


  virtual ~EyelockNanoDevice_ChangeLedColor_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_ChangeLedColor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_GetFirmwareRevision_args__isset {
  _EyelockNanoDevice_GetFirmwareRevision_args__isset() : reType(false) {}
  bool reType;
} _EyelockNanoDevice_GetFirmwareRevision_args__isset;

class EyelockNanoDevice_GetFirmwareRevision_args {
 public:

  EyelockNanoDevice_GetFirmwareRevision_args() : reType(0) {
  }

  virtual ~EyelockNanoDevice_GetFirmwareRevision_args() throw() {}

  int32_t reType;

  _EyelockNanoDevice_GetFirmwareRevision_args__isset __isset;

  void __set_reType(const int32_t val) {
    reType = val;
  }

  bool operator == (const EyelockNanoDevice_GetFirmwareRevision_args & rhs) const
  {
    if (!(reType == rhs.reType))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetFirmwareRevision_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetFirmwareRevision_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetFirmwareRevision_pargs {
 public:


  virtual ~EyelockNanoDevice_GetFirmwareRevision_pargs() throw() {}

  const int32_t* reType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetFirmwareRevision_result__isset {
  _EyelockNanoDevice_GetFirmwareRevision_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetFirmwareRevision_result__isset;

class EyelockNanoDevice_GetFirmwareRevision_result {
 public:

  EyelockNanoDevice_GetFirmwareRevision_result() {
  }

  virtual ~EyelockNanoDevice_GetFirmwareRevision_result() throw() {}

  std::map<std::string, std::string>  success;

  _EyelockNanoDevice_GetFirmwareRevision_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetFirmwareRevision_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetFirmwareRevision_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetFirmwareRevision_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetFirmwareRevision_presult__isset {
  _EyelockNanoDevice_GetFirmwareRevision_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetFirmwareRevision_presult__isset;

class EyelockNanoDevice_GetFirmwareRevision_presult {
 public:


  virtual ~EyelockNanoDevice_GetFirmwareRevision_presult() throw() {}

  std::map<std::string, std::string> * success;

  _EyelockNanoDevice_GetFirmwareRevision_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SetAudiolevel_args__isset {
  _EyelockNanoDevice_SetAudiolevel_args__isset() : vol(false) {}
  bool vol;
} _EyelockNanoDevice_SetAudiolevel_args__isset;

class EyelockNanoDevice_SetAudiolevel_args {
 public:

  EyelockNanoDevice_SetAudiolevel_args() : vol(0) {
  }

  virtual ~EyelockNanoDevice_SetAudiolevel_args() throw() {}

  double vol;

  _EyelockNanoDevice_SetAudiolevel_args__isset __isset;

  void __set_vol(const double val) {
    vol = val;
  }

  bool operator == (const EyelockNanoDevice_SetAudiolevel_args & rhs) const
  {
    if (!(vol == rhs.vol))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetAudiolevel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetAudiolevel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SetAudiolevel_pargs {
 public:


  virtual ~EyelockNanoDevice_SetAudiolevel_pargs() throw() {}

  const double* vol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetAudiolevel_result__isset {
  _EyelockNanoDevice_SetAudiolevel_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetAudiolevel_result__isset;

class EyelockNanoDevice_SetAudiolevel_result {
 public:

  EyelockNanoDevice_SetAudiolevel_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SetAudiolevel_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SetAudiolevel_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SetAudiolevel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetAudiolevel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetAudiolevel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetAudiolevel_presult__isset {
  _EyelockNanoDevice_SetAudiolevel_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetAudiolevel_presult__isset;

class EyelockNanoDevice_SetAudiolevel_presult {
 public:


  virtual ~EyelockNanoDevice_SetAudiolevel_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SetAudiolevel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_GetAudiolevel_args {
 public:

  EyelockNanoDevice_GetAudiolevel_args() {
  }

  virtual ~EyelockNanoDevice_GetAudiolevel_args() throw() {}


  bool operator == (const EyelockNanoDevice_GetAudiolevel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetAudiolevel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetAudiolevel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetAudiolevel_pargs {
 public:


  virtual ~EyelockNanoDevice_GetAudiolevel_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetAudiolevel_result__isset {
  _EyelockNanoDevice_GetAudiolevel_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetAudiolevel_result__isset;

class EyelockNanoDevice_GetAudiolevel_result {
 public:

  EyelockNanoDevice_GetAudiolevel_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_GetAudiolevel_result() throw() {}

  double success;

  _EyelockNanoDevice_GetAudiolevel_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetAudiolevel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetAudiolevel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetAudiolevel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetAudiolevel_presult__isset {
  _EyelockNanoDevice_GetAudiolevel_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetAudiolevel_presult__isset;

class EyelockNanoDevice_GetAudiolevel_presult {
 public:


  virtual ~EyelockNanoDevice_GetAudiolevel_presult() throw() {}

  double* success;

  _EyelockNanoDevice_GetAudiolevel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_IsDeviceTampered_args {
 public:

  EyelockNanoDevice_IsDeviceTampered_args() {
  }

  virtual ~EyelockNanoDevice_IsDeviceTampered_args() throw() {}


  bool operator == (const EyelockNanoDevice_IsDeviceTampered_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_IsDeviceTampered_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_IsDeviceTampered_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_IsDeviceTampered_pargs {
 public:


  virtual ~EyelockNanoDevice_IsDeviceTampered_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_IsDeviceTampered_result__isset {
  _EyelockNanoDevice_IsDeviceTampered_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_IsDeviceTampered_result__isset;

class EyelockNanoDevice_IsDeviceTampered_result {
 public:

  EyelockNanoDevice_IsDeviceTampered_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_IsDeviceTampered_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_IsDeviceTampered_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_IsDeviceTampered_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_IsDeviceTampered_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_IsDeviceTampered_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_IsDeviceTampered_presult__isset {
  _EyelockNanoDevice_IsDeviceTampered_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_IsDeviceTampered_presult__isset;

class EyelockNanoDevice_IsDeviceTampered_presult {
 public:


  virtual ~EyelockNanoDevice_IsDeviceTampered_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_IsDeviceTampered_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_pushDB_args__isset {
  _EyelockNanoDevice_pushDB_args__isset() : fullDB(false), dbtype(false) {}
  bool fullDB;
  bool dbtype;
} _EyelockNanoDevice_pushDB_args__isset;

class EyelockNanoDevice_pushDB_args {
 public:

  EyelockNanoDevice_pushDB_args() : fullDB(), dbtype((ACD_Type::type)0) {
  }

  virtual ~EyelockNanoDevice_pushDB_args() throw() {}

  std::string fullDB;
  ACD_Type::type dbtype;

  _EyelockNanoDevice_pushDB_args__isset __isset;

  void __set_fullDB(const std::string& val) {
    fullDB = val;
  }

  void __set_dbtype(const ACD_Type::type val) {
    dbtype = val;
  }

  bool operator == (const EyelockNanoDevice_pushDB_args & rhs) const
  {
    if (!(fullDB == rhs.fullDB))
      return false;
    if (!(dbtype == rhs.dbtype))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_pushDB_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_pushDB_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_pushDB_pargs {
 public:


  virtual ~EyelockNanoDevice_pushDB_pargs() throw() {}

  const std::string* fullDB;
  const ACD_Type::type* dbtype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_pushDB_result__isset {
  _EyelockNanoDevice_pushDB_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_pushDB_result__isset;

class EyelockNanoDevice_pushDB_result {
 public:

  EyelockNanoDevice_pushDB_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_pushDB_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_pushDB_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_pushDB_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_pushDB_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_pushDB_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_pushDB_presult__isset {
  _EyelockNanoDevice_pushDB_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_pushDB_presult__isset;

class EyelockNanoDevice_pushDB_presult {
 public:


  virtual ~EyelockNanoDevice_pushDB_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_pushDB_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_ResetFirmware_args {
 public:

  EyelockNanoDevice_ResetFirmware_args() {
  }

  virtual ~EyelockNanoDevice_ResetFirmware_args() throw() {}


  bool operator == (const EyelockNanoDevice_ResetFirmware_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_ResetFirmware_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_ResetFirmware_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_ResetFirmware_pargs {
 public:


  virtual ~EyelockNanoDevice_ResetFirmware_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_ResetFirmware_result__isset {
  _EyelockNanoDevice_ResetFirmware_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_ResetFirmware_result__isset;

class EyelockNanoDevice_ResetFirmware_result {
 public:

  EyelockNanoDevice_ResetFirmware_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_ResetFirmware_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_ResetFirmware_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_ResetFirmware_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_ResetFirmware_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_ResetFirmware_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_ResetFirmware_presult__isset {
  _EyelockNanoDevice_ResetFirmware_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_ResetFirmware_presult__isset;

class EyelockNanoDevice_ResetFirmware_presult {
 public:


  virtual ~EyelockNanoDevice_ResetFirmware_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_ResetFirmware_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_PingDevice_args {
 public:

  EyelockNanoDevice_PingDevice_args() {
  }

  virtual ~EyelockNanoDevice_PingDevice_args() throw() {}


  bool operator == (const EyelockNanoDevice_PingDevice_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_PingDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_PingDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_PingDevice_pargs {
 public:


  virtual ~EyelockNanoDevice_PingDevice_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_PingDevice_result__isset {
  _EyelockNanoDevice_PingDevice_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_PingDevice_result__isset;

class EyelockNanoDevice_PingDevice_result {
 public:

  EyelockNanoDevice_PingDevice_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_PingDevice_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_PingDevice_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_PingDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_PingDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_PingDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_PingDevice_presult__isset {
  _EyelockNanoDevice_PingDevice_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_PingDevice_presult__isset;

class EyelockNanoDevice_PingDevice_presult {
 public:


  virtual ~EyelockNanoDevice_PingDevice_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_PingDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_GetTime_args {
 public:

  EyelockNanoDevice_GetTime_args() {
  }

  virtual ~EyelockNanoDevice_GetTime_args() throw() {}


  bool operator == (const EyelockNanoDevice_GetTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetTime_pargs {
 public:


  virtual ~EyelockNanoDevice_GetTime_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetTime_result__isset {
  _EyelockNanoDevice_GetTime_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetTime_result__isset;

class EyelockNanoDevice_GetTime_result {
 public:

  EyelockNanoDevice_GetTime_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_GetTime_result() throw() {}

  int64_t success;

  _EyelockNanoDevice_GetTime_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetTime_presult__isset {
  _EyelockNanoDevice_GetTime_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetTime_presult__isset;

class EyelockNanoDevice_GetTime_presult {
 public:


  virtual ~EyelockNanoDevice_GetTime_presult() throw() {}

  int64_t* success;

  _EyelockNanoDevice_GetTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SyncTime_args__isset {
  _EyelockNanoDevice_SyncTime_args__isset() : nanoTime(false), hostTime(false), pingTimeout(false) {}
  bool nanoTime;
  bool hostTime;
  bool pingTimeout;
} _EyelockNanoDevice_SyncTime_args__isset;

class EyelockNanoDevice_SyncTime_args {
 public:

  EyelockNanoDevice_SyncTime_args() : nanoTime(0), hostTime(0), pingTimeout(0) {
  }

  virtual ~EyelockNanoDevice_SyncTime_args() throw() {}

  int64_t nanoTime;
  int64_t hostTime;
  int32_t pingTimeout;

  _EyelockNanoDevice_SyncTime_args__isset __isset;

  void __set_nanoTime(const int64_t val) {
    nanoTime = val;
  }

  void __set_hostTime(const int64_t val) {
    hostTime = val;
  }

  void __set_pingTimeout(const int32_t val) {
    pingTimeout = val;
  }

  bool operator == (const EyelockNanoDevice_SyncTime_args & rhs) const
  {
    if (!(nanoTime == rhs.nanoTime))
      return false;
    if (!(hostTime == rhs.hostTime))
      return false;
    if (!(pingTimeout == rhs.pingTimeout))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SyncTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SyncTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SyncTime_pargs {
 public:


  virtual ~EyelockNanoDevice_SyncTime_pargs() throw() {}

  const int64_t* nanoTime;
  const int64_t* hostTime;
  const int32_t* pingTimeout;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SyncTime_result__isset {
  _EyelockNanoDevice_SyncTime_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SyncTime_result__isset;

class EyelockNanoDevice_SyncTime_result {
 public:

  EyelockNanoDevice_SyncTime_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SyncTime_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SyncTime_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SyncTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SyncTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SyncTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SyncTime_presult__isset {
  _EyelockNanoDevice_SyncTime_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SyncTime_presult__isset;

class EyelockNanoDevice_SyncTime_presult {
 public:


  virtual ~EyelockNanoDevice_SyncTime_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SyncTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_RestartDevice_args__isset {
  _EyelockNanoDevice_RestartDevice_args__isset() : restart(false) {}
  bool restart;
} _EyelockNanoDevice_RestartDevice_args__isset;

class EyelockNanoDevice_RestartDevice_args {
 public:

  EyelockNanoDevice_RestartDevice_args() : restart((ELKNS_RestartTypes::type)0) {
  }

  virtual ~EyelockNanoDevice_RestartDevice_args() throw() {}

  ELKNS_RestartTypes::type restart;

  _EyelockNanoDevice_RestartDevice_args__isset __isset;

  void __set_restart(const ELKNS_RestartTypes::type val) {
    restart = val;
  }

  bool operator == (const EyelockNanoDevice_RestartDevice_args & rhs) const
  {
    if (!(restart == rhs.restart))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_RestartDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RestartDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_RestartDevice_pargs {
 public:


  virtual ~EyelockNanoDevice_RestartDevice_pargs() throw() {}

  const ELKNS_RestartTypes::type* restart;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RestartDevice_result__isset {
  _EyelockNanoDevice_RestartDevice_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RestartDevice_result__isset;

class EyelockNanoDevice_RestartDevice_result {
 public:

  EyelockNanoDevice_RestartDevice_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_RestartDevice_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_RestartDevice_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_RestartDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_RestartDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RestartDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RestartDevice_presult__isset {
  _EyelockNanoDevice_RestartDevice_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RestartDevice_presult__isset;

class EyelockNanoDevice_RestartDevice_presult {
 public:


  virtual ~EyelockNanoDevice_RestartDevice_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_RestartDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_updateDB_args__isset {
  _EyelockNanoDevice_updateDB_args__isset() : upDB(false), dbtype(false) {}
  bool upDB;
  bool dbtype;
} _EyelockNanoDevice_updateDB_args__isset;

class EyelockNanoDevice_updateDB_args {
 public:

  EyelockNanoDevice_updateDB_args() : upDB(), dbtype((ACD_Type::type)0) {
  }

  virtual ~EyelockNanoDevice_updateDB_args() throw() {}

  std::string upDB;
  ACD_Type::type dbtype;

  _EyelockNanoDevice_updateDB_args__isset __isset;

  void __set_upDB(const std::string& val) {
    upDB = val;
  }

  void __set_dbtype(const ACD_Type::type val) {
    dbtype = val;
  }

  bool operator == (const EyelockNanoDevice_updateDB_args & rhs) const
  {
    if (!(upDB == rhs.upDB))
      return false;
    if (!(dbtype == rhs.dbtype))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_updateDB_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_updateDB_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_updateDB_pargs {
 public:


  virtual ~EyelockNanoDevice_updateDB_pargs() throw() {}

  const std::string* upDB;
  const ACD_Type::type* dbtype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_updateDB_result__isset {
  _EyelockNanoDevice_updateDB_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_updateDB_result__isset;

class EyelockNanoDevice_updateDB_result {
 public:

  EyelockNanoDevice_updateDB_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_updateDB_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_updateDB_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_updateDB_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_updateDB_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_updateDB_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_updateDB_presult__isset {
  _EyelockNanoDevice_updateDB_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_updateDB_presult__isset;

class EyelockNanoDevice_updateDB_presult {
 public:


  virtual ~EyelockNanoDevice_updateDB_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_updateDB_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_GetConfigParameters_args {
 public:

  EyelockNanoDevice_GetConfigParameters_args() {
  }

  virtual ~EyelockNanoDevice_GetConfigParameters_args() throw() {}


  bool operator == (const EyelockNanoDevice_GetConfigParameters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetConfigParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetConfigParameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetConfigParameters_pargs {
 public:


  virtual ~EyelockNanoDevice_GetConfigParameters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetConfigParameters_result__isset {
  _EyelockNanoDevice_GetConfigParameters_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetConfigParameters_result__isset;

class EyelockNanoDevice_GetConfigParameters_result {
 public:

  EyelockNanoDevice_GetConfigParameters_result() {
  }

  virtual ~EyelockNanoDevice_GetConfigParameters_result() throw() {}

  std::map<int32_t, std::string>  success;

  _EyelockNanoDevice_GetConfigParameters_result__isset __isset;

  void __set_success(const std::map<int32_t, std::string> & val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetConfigParameters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetConfigParameters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetConfigParameters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetConfigParameters_presult__isset {
  _EyelockNanoDevice_GetConfigParameters_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetConfigParameters_presult__isset;

class EyelockNanoDevice_GetConfigParameters_presult {
 public:


  virtual ~EyelockNanoDevice_GetConfigParameters_presult() throw() {}

  std::map<int32_t, std::string> * success;

  _EyelockNanoDevice_GetConfigParameters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SetConfigParameters_args__isset {
  _EyelockNanoDevice_SetConfigParameters_args__isset() : confMap(false) {}
  bool confMap;
} _EyelockNanoDevice_SetConfigParameters_args__isset;

class EyelockNanoDevice_SetConfigParameters_args {
 public:

  EyelockNanoDevice_SetConfigParameters_args() {
  }

  virtual ~EyelockNanoDevice_SetConfigParameters_args() throw() {}

  std::map<int32_t, std::string>  confMap;

  _EyelockNanoDevice_SetConfigParameters_args__isset __isset;

  void __set_confMap(const std::map<int32_t, std::string> & val) {
    confMap = val;
  }

  bool operator == (const EyelockNanoDevice_SetConfigParameters_args & rhs) const
  {
    if (!(confMap == rhs.confMap))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetConfigParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetConfigParameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SetConfigParameters_pargs {
 public:


  virtual ~EyelockNanoDevice_SetConfigParameters_pargs() throw() {}

  const std::map<int32_t, std::string> * confMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetConfigParameters_result__isset {
  _EyelockNanoDevice_SetConfigParameters_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetConfigParameters_result__isset;

class EyelockNanoDevice_SetConfigParameters_result {
 public:

  EyelockNanoDevice_SetConfigParameters_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SetConfigParameters_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SetConfigParameters_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SetConfigParameters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetConfigParameters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetConfigParameters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetConfigParameters_presult__isset {
  _EyelockNanoDevice_SetConfigParameters_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetConfigParameters_presult__isset;

class EyelockNanoDevice_SetConfigParameters_presult {
 public:


  virtual ~EyelockNanoDevice_SetConfigParameters_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SetConfigParameters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_RetreiveAllIDs_args {
 public:

  EyelockNanoDevice_RetreiveAllIDs_args() {
  }

  virtual ~EyelockNanoDevice_RetreiveAllIDs_args() throw() {}


  bool operator == (const EyelockNanoDevice_RetreiveAllIDs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_RetreiveAllIDs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RetreiveAllIDs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_RetreiveAllIDs_pargs {
 public:


  virtual ~EyelockNanoDevice_RetreiveAllIDs_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RetreiveAllIDs_result__isset {
  _EyelockNanoDevice_RetreiveAllIDs_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RetreiveAllIDs_result__isset;

class EyelockNanoDevice_RetreiveAllIDs_result {
 public:

  EyelockNanoDevice_RetreiveAllIDs_result() : success() {
  }

  virtual ~EyelockNanoDevice_RetreiveAllIDs_result() throw() {}

  std::string success;

  _EyelockNanoDevice_RetreiveAllIDs_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_RetreiveAllIDs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_RetreiveAllIDs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RetreiveAllIDs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RetreiveAllIDs_presult__isset {
  _EyelockNanoDevice_RetreiveAllIDs_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RetreiveAllIDs_presult__isset;

class EyelockNanoDevice_RetreiveAllIDs_presult {
 public:


  virtual ~EyelockNanoDevice_RetreiveAllIDs_presult() throw() {}

  std::string* success;

  _EyelockNanoDevice_RetreiveAllIDs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_receiveChunkAndAppendFile_args__isset {
  _EyelockNanoDevice_receiveChunkAndAppendFile_args__isset() : chunkList(false) {}
  bool chunkList;
} _EyelockNanoDevice_receiveChunkAndAppendFile_args__isset;

class EyelockNanoDevice_receiveChunkAndAppendFile_args {
 public:

  EyelockNanoDevice_receiveChunkAndAppendFile_args() {
  }

  virtual ~EyelockNanoDevice_receiveChunkAndAppendFile_args() throw() {}

  std::vector<std::string>  chunkList;

  _EyelockNanoDevice_receiveChunkAndAppendFile_args__isset __isset;

  void __set_chunkList(const std::vector<std::string> & val) {
    chunkList = val;
  }

  bool operator == (const EyelockNanoDevice_receiveChunkAndAppendFile_args & rhs) const
  {
    if (!(chunkList == rhs.chunkList))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_receiveChunkAndAppendFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_receiveChunkAndAppendFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_receiveChunkAndAppendFile_pargs {
 public:


  virtual ~EyelockNanoDevice_receiveChunkAndAppendFile_pargs() throw() {}

  const std::vector<std::string> * chunkList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_receiveChunkAndAppendFile_result__isset {
  _EyelockNanoDevice_receiveChunkAndAppendFile_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_receiveChunkAndAppendFile_result__isset;

class EyelockNanoDevice_receiveChunkAndAppendFile_result {
 public:

  EyelockNanoDevice_receiveChunkAndAppendFile_result() {
  }

  virtual ~EyelockNanoDevice_receiveChunkAndAppendFile_result() throw() {}

  std::map<std::string, std::string>  success;

  _EyelockNanoDevice_receiveChunkAndAppendFile_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_receiveChunkAndAppendFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_receiveChunkAndAppendFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_receiveChunkAndAppendFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_receiveChunkAndAppendFile_presult__isset {
  _EyelockNanoDevice_receiveChunkAndAppendFile_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_receiveChunkAndAppendFile_presult__isset;

class EyelockNanoDevice_receiveChunkAndAppendFile_presult {
 public:


  virtual ~EyelockNanoDevice_receiveChunkAndAppendFile_presult() throw() {}

  std::map<std::string, std::string> * success;

  _EyelockNanoDevice_receiveChunkAndAppendFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_neededChunkFromFile_args__isset {
  _EyelockNanoDevice_neededChunkFromFile_args__isset() : neededchunkInfo(false) {}
  bool neededchunkInfo;
} _EyelockNanoDevice_neededChunkFromFile_args__isset;

class EyelockNanoDevice_neededChunkFromFile_args {
 public:

  EyelockNanoDevice_neededChunkFromFile_args() {
  }

  virtual ~EyelockNanoDevice_neededChunkFromFile_args() throw() {}

  std::map<std::string, std::string>  neededchunkInfo;

  _EyelockNanoDevice_neededChunkFromFile_args__isset __isset;

  void __set_neededchunkInfo(const std::map<std::string, std::string> & val) {
    neededchunkInfo = val;
  }

  bool operator == (const EyelockNanoDevice_neededChunkFromFile_args & rhs) const
  {
    if (!(neededchunkInfo == rhs.neededchunkInfo))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_neededChunkFromFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_neededChunkFromFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_neededChunkFromFile_pargs {
 public:


  virtual ~EyelockNanoDevice_neededChunkFromFile_pargs() throw() {}

  const std::map<std::string, std::string> * neededchunkInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_neededChunkFromFile_result__isset {
  _EyelockNanoDevice_neededChunkFromFile_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_neededChunkFromFile_result__isset;

class EyelockNanoDevice_neededChunkFromFile_result {
 public:

  EyelockNanoDevice_neededChunkFromFile_result() {
  }

  virtual ~EyelockNanoDevice_neededChunkFromFile_result() throw() {}

  std::vector<std::string>  success;

  _EyelockNanoDevice_neededChunkFromFile_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_neededChunkFromFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_neededChunkFromFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_neededChunkFromFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_neededChunkFromFile_presult__isset {
  _EyelockNanoDevice_neededChunkFromFile_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_neededChunkFromFile_presult__isset;

class EyelockNanoDevice_neededChunkFromFile_presult {
 public:


  virtual ~EyelockNanoDevice_neededChunkFromFile_presult() throw() {}

  std::vector<std::string> * success;

  _EyelockNanoDevice_neededChunkFromFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_RegisterCallBack_args__isset {
  _EyelockNanoDevice_RegisterCallBack_args__isset() : ipaddress(false), portno(false), Event(false) {}
  bool ipaddress;
  bool portno;
  bool Event;
} _EyelockNanoDevice_RegisterCallBack_args__isset;

class EyelockNanoDevice_RegisterCallBack_args {
 public:

  EyelockNanoDevice_RegisterCallBack_args() : ipaddress(), portno(), Event((ELKNS_EventTypes::type)0) {
  }

  virtual ~EyelockNanoDevice_RegisterCallBack_args() throw() {}

  std::string ipaddress;
  std::string portno;
  ELKNS_EventTypes::type Event;

  _EyelockNanoDevice_RegisterCallBack_args__isset __isset;

  void __set_ipaddress(const std::string& val) {
    ipaddress = val;
  }

  void __set_portno(const std::string& val) {
    portno = val;
  }

  void __set_Event(const ELKNS_EventTypes::type val) {
    Event = val;
  }

  bool operator == (const EyelockNanoDevice_RegisterCallBack_args & rhs) const
  {
    if (!(ipaddress == rhs.ipaddress))
      return false;
    if (!(portno == rhs.portno))
      return false;
    if (!(Event == rhs.Event))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_RegisterCallBack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RegisterCallBack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_RegisterCallBack_pargs {
 public:


  virtual ~EyelockNanoDevice_RegisterCallBack_pargs() throw() {}

  const std::string* ipaddress;
  const std::string* portno;
  const ELKNS_EventTypes::type* Event;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RegisterCallBack_result__isset {
  _EyelockNanoDevice_RegisterCallBack_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RegisterCallBack_result__isset;

class EyelockNanoDevice_RegisterCallBack_result {
 public:

  EyelockNanoDevice_RegisterCallBack_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_RegisterCallBack_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_RegisterCallBack_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_RegisterCallBack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_RegisterCallBack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RegisterCallBack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RegisterCallBack_presult__isset {
  _EyelockNanoDevice_RegisterCallBack_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RegisterCallBack_presult__isset;

class EyelockNanoDevice_RegisterCallBack_presult {
 public:


  virtual ~EyelockNanoDevice_RegisterCallBack_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_RegisterCallBack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_UnregisterCallBack_args__isset {
  _EyelockNanoDevice_UnregisterCallBack_args__isset() : ipaddress(false), portno(false), Event(false) {}
  bool ipaddress;
  bool portno;
  bool Event;
} _EyelockNanoDevice_UnregisterCallBack_args__isset;

class EyelockNanoDevice_UnregisterCallBack_args {
 public:

  EyelockNanoDevice_UnregisterCallBack_args() : ipaddress(), portno(), Event((ELKNS_EventTypes::type)0) {
  }

  virtual ~EyelockNanoDevice_UnregisterCallBack_args() throw() {}

  std::string ipaddress;
  std::string portno;
  ELKNS_EventTypes::type Event;

  _EyelockNanoDevice_UnregisterCallBack_args__isset __isset;

  void __set_ipaddress(const std::string& val) {
    ipaddress = val;
  }

  void __set_portno(const std::string& val) {
    portno = val;
  }

  void __set_Event(const ELKNS_EventTypes::type val) {
    Event = val;
  }

  bool operator == (const EyelockNanoDevice_UnregisterCallBack_args & rhs) const
  {
    if (!(ipaddress == rhs.ipaddress))
      return false;
    if (!(portno == rhs.portno))
      return false;
    if (!(Event == rhs.Event))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_UnregisterCallBack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_UnregisterCallBack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_UnregisterCallBack_pargs {
 public:


  virtual ~EyelockNanoDevice_UnregisterCallBack_pargs() throw() {}

  const std::string* ipaddress;
  const std::string* portno;
  const ELKNS_EventTypes::type* Event;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_UnregisterCallBack_result__isset {
  _EyelockNanoDevice_UnregisterCallBack_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_UnregisterCallBack_result__isset;

class EyelockNanoDevice_UnregisterCallBack_result {
 public:

  EyelockNanoDevice_UnregisterCallBack_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_UnregisterCallBack_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_UnregisterCallBack_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_UnregisterCallBack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_UnregisterCallBack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_UnregisterCallBack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_UnregisterCallBack_presult__isset {
  _EyelockNanoDevice_UnregisterCallBack_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_UnregisterCallBack_presult__isset;

class EyelockNanoDevice_UnregisterCallBack_presult {
 public:


  virtual ~EyelockNanoDevice_UnregisterCallBack_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_UnregisterCallBack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_RetrieveLogs_args {
 public:

  EyelockNanoDevice_RetrieveLogs_args() {
  }

  virtual ~EyelockNanoDevice_RetrieveLogs_args() throw() {}


  bool operator == (const EyelockNanoDevice_RetrieveLogs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_RetrieveLogs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RetrieveLogs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_RetrieveLogs_pargs {
 public:


  virtual ~EyelockNanoDevice_RetrieveLogs_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RetrieveLogs_result__isset {
  _EyelockNanoDevice_RetrieveLogs_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RetrieveLogs_result__isset;

class EyelockNanoDevice_RetrieveLogs_result {
 public:

  EyelockNanoDevice_RetrieveLogs_result() {
  }

  virtual ~EyelockNanoDevice_RetrieveLogs_result() throw() {}

  std::map<std::string, std::string>  success;

  _EyelockNanoDevice_RetrieveLogs_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_RetrieveLogs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_RetrieveLogs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RetrieveLogs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RetrieveLogs_presult__isset {
  _EyelockNanoDevice_RetrieveLogs_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RetrieveLogs_presult__isset;

class EyelockNanoDevice_RetrieveLogs_presult {
 public:


  virtual ~EyelockNanoDevice_RetrieveLogs_presult() throw() {}

  std::map<std::string, std::string> * success;

  _EyelockNanoDevice_RetrieveLogs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_GetSlaveVersion_args {
 public:

  EyelockNanoDevice_GetSlaveVersion_args() {
  }

  virtual ~EyelockNanoDevice_GetSlaveVersion_args() throw() {}


  bool operator == (const EyelockNanoDevice_GetSlaveVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetSlaveVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetSlaveVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetSlaveVersion_pargs {
 public:


  virtual ~EyelockNanoDevice_GetSlaveVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetSlaveVersion_result__isset {
  _EyelockNanoDevice_GetSlaveVersion_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetSlaveVersion_result__isset;

class EyelockNanoDevice_GetSlaveVersion_result {
 public:

  EyelockNanoDevice_GetSlaveVersion_result() : success() {
  }

  virtual ~EyelockNanoDevice_GetSlaveVersion_result() throw() {}

  std::string success;

  _EyelockNanoDevice_GetSlaveVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetSlaveVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetSlaveVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetSlaveVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetSlaveVersion_presult__isset {
  _EyelockNanoDevice_GetSlaveVersion_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetSlaveVersion_presult__isset;

class EyelockNanoDevice_GetSlaveVersion_presult {
 public:


  virtual ~EyelockNanoDevice_GetSlaveVersion_presult() throw() {}

  std::string* success;

  _EyelockNanoDevice_GetSlaveVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_getDBCheckSum_args {
 public:

  EyelockNanoDevice_getDBCheckSum_args() {
  }

  virtual ~EyelockNanoDevice_getDBCheckSum_args() throw() {}


  bool operator == (const EyelockNanoDevice_getDBCheckSum_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_getDBCheckSum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_getDBCheckSum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_getDBCheckSum_pargs {
 public:


  virtual ~EyelockNanoDevice_getDBCheckSum_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_getDBCheckSum_result__isset {
  _EyelockNanoDevice_getDBCheckSum_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_getDBCheckSum_result__isset;

class EyelockNanoDevice_getDBCheckSum_result {
 public:

  EyelockNanoDevice_getDBCheckSum_result() : success() {
  }

  virtual ~EyelockNanoDevice_getDBCheckSum_result() throw() {}

  std::string success;

  _EyelockNanoDevice_getDBCheckSum_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_getDBCheckSum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_getDBCheckSum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_getDBCheckSum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_getDBCheckSum_presult__isset {
  _EyelockNanoDevice_getDBCheckSum_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_getDBCheckSum_presult__isset;

class EyelockNanoDevice_getDBCheckSum_presult {
 public:


  virtual ~EyelockNanoDevice_getDBCheckSum_presult() throw() {}

  std::string* success;

  _EyelockNanoDevice_getDBCheckSum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_DeleteDeviceFile_args__isset {
  _EyelockNanoDevice_DeleteDeviceFile_args__isset() : path(false), isDirectory(false) {}
  bool path;
  bool isDirectory;
} _EyelockNanoDevice_DeleteDeviceFile_args__isset;

class EyelockNanoDevice_DeleteDeviceFile_args {
 public:

  EyelockNanoDevice_DeleteDeviceFile_args() : path(), isDirectory(0) {
  }

  virtual ~EyelockNanoDevice_DeleteDeviceFile_args() throw() {}

  std::string path;
  bool isDirectory;

  _EyelockNanoDevice_DeleteDeviceFile_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_isDirectory(const bool val) {
    isDirectory = val;
  }

  bool operator == (const EyelockNanoDevice_DeleteDeviceFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(isDirectory == rhs.isDirectory))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_DeleteDeviceFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_DeleteDeviceFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_DeleteDeviceFile_pargs {
 public:


  virtual ~EyelockNanoDevice_DeleteDeviceFile_pargs() throw() {}

  const std::string* path;
  const bool* isDirectory;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_DeleteDeviceFile_result__isset {
  _EyelockNanoDevice_DeleteDeviceFile_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_DeleteDeviceFile_result__isset;

class EyelockNanoDevice_DeleteDeviceFile_result {
 public:

  EyelockNanoDevice_DeleteDeviceFile_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_DeleteDeviceFile_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_DeleteDeviceFile_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_DeleteDeviceFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_DeleteDeviceFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_DeleteDeviceFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_DeleteDeviceFile_presult__isset {
  _EyelockNanoDevice_DeleteDeviceFile_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_DeleteDeviceFile_presult__isset;

class EyelockNanoDevice_DeleteDeviceFile_presult {
 public:


  virtual ~EyelockNanoDevice_DeleteDeviceFile_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_DeleteDeviceFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SendRelayCommand_args__isset {
  _EyelockNanoDevice_SendRelayCommand_args__isset() : relayType(false), duration(false) {}
  bool relayType;
  bool duration;
} _EyelockNanoDevice_SendRelayCommand_args__isset;

class EyelockNanoDevice_SendRelayCommand_args {
 public:

  EyelockNanoDevice_SendRelayCommand_args() : relayType((ELKNS_RelayTypes::type)0), duration(0) {
  }

  virtual ~EyelockNanoDevice_SendRelayCommand_args() throw() {}

  ELKNS_RelayTypes::type relayType;
  int32_t duration;

  _EyelockNanoDevice_SendRelayCommand_args__isset __isset;

  void __set_relayType(const ELKNS_RelayTypes::type val) {
    relayType = val;
  }

  void __set_duration(const int32_t val) {
    duration = val;
  }

  bool operator == (const EyelockNanoDevice_SendRelayCommand_args & rhs) const
  {
    if (!(relayType == rhs.relayType))
      return false;
    if (!(duration == rhs.duration))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SendRelayCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SendRelayCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SendRelayCommand_pargs {
 public:


  virtual ~EyelockNanoDevice_SendRelayCommand_pargs() throw() {}

  const ELKNS_RelayTypes::type* relayType;
  const int32_t* duration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SendRelayCommand_result__isset {
  _EyelockNanoDevice_SendRelayCommand_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SendRelayCommand_result__isset;

class EyelockNanoDevice_SendRelayCommand_result {
 public:

  EyelockNanoDevice_SendRelayCommand_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SendRelayCommand_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SendRelayCommand_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SendRelayCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SendRelayCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SendRelayCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SendRelayCommand_presult__isset {
  _EyelockNanoDevice_SendRelayCommand_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SendRelayCommand_presult__isset;

class EyelockNanoDevice_SendRelayCommand_presult {
 public:


  virtual ~EyelockNanoDevice_SendRelayCommand_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SendRelayCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_getRestorePoints_args {
 public:

  EyelockNanoDevice_getRestorePoints_args() {
  }

  virtual ~EyelockNanoDevice_getRestorePoints_args() throw() {}


  bool operator == (const EyelockNanoDevice_getRestorePoints_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_getRestorePoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_getRestorePoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_getRestorePoints_pargs {
 public:


  virtual ~EyelockNanoDevice_getRestorePoints_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_getRestorePoints_result__isset {
  _EyelockNanoDevice_getRestorePoints_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_getRestorePoints_result__isset;

class EyelockNanoDevice_getRestorePoints_result {
 public:

  EyelockNanoDevice_getRestorePoints_result() {
  }

  virtual ~EyelockNanoDevice_getRestorePoints_result() throw() {}

  std::vector<std::string>  success;

  _EyelockNanoDevice_getRestorePoints_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_getRestorePoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_getRestorePoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_getRestorePoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_getRestorePoints_presult__isset {
  _EyelockNanoDevice_getRestorePoints_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_getRestorePoints_presult__isset;

class EyelockNanoDevice_getRestorePoints_presult {
 public:


  virtual ~EyelockNanoDevice_getRestorePoints_presult() throw() {}

  std::vector<std::string> * success;

  _EyelockNanoDevice_getRestorePoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_UpdateFirmware_args__isset {
  _EyelockNanoDevice_UpdateFirmware_args__isset() : filenamemap(false) {}
  bool filenamemap;
} _EyelockNanoDevice_UpdateFirmware_args__isset;

class EyelockNanoDevice_UpdateFirmware_args {
 public:

  EyelockNanoDevice_UpdateFirmware_args() {
  }

  virtual ~EyelockNanoDevice_UpdateFirmware_args() throw() {}

  std::map<std::string, std::string>  filenamemap;

  _EyelockNanoDevice_UpdateFirmware_args__isset __isset;

  void __set_filenamemap(const std::map<std::string, std::string> & val) {
    filenamemap = val;
  }

  bool operator == (const EyelockNanoDevice_UpdateFirmware_args & rhs) const
  {
    if (!(filenamemap == rhs.filenamemap))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_UpdateFirmware_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_UpdateFirmware_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_UpdateFirmware_pargs {
 public:


  virtual ~EyelockNanoDevice_UpdateFirmware_pargs() throw() {}

  const std::map<std::string, std::string> * filenamemap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_UpdateFirmware_result__isset {
  _EyelockNanoDevice_UpdateFirmware_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_UpdateFirmware_result__isset;

class EyelockNanoDevice_UpdateFirmware_result {
 public:

  EyelockNanoDevice_UpdateFirmware_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_UpdateFirmware_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_UpdateFirmware_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_UpdateFirmware_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_UpdateFirmware_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_UpdateFirmware_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_UpdateFirmware_presult__isset {
  _EyelockNanoDevice_UpdateFirmware_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_UpdateFirmware_presult__isset;

class EyelockNanoDevice_UpdateFirmware_presult {
 public:


  virtual ~EyelockNanoDevice_UpdateFirmware_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_UpdateFirmware_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_RestoreFirmware_args__isset {
  _EyelockNanoDevice_RestoreFirmware_args__isset() : restorePointName(false), argMap(false) {}
  bool restorePointName;
  bool argMap;
} _EyelockNanoDevice_RestoreFirmware_args__isset;

class EyelockNanoDevice_RestoreFirmware_args {
 public:

  EyelockNanoDevice_RestoreFirmware_args() : restorePointName() {
  }

  virtual ~EyelockNanoDevice_RestoreFirmware_args() throw() {}

  std::string restorePointName;
  std::map<std::string, std::string>  argMap;

  _EyelockNanoDevice_RestoreFirmware_args__isset __isset;

  void __set_restorePointName(const std::string& val) {
    restorePointName = val;
  }

  void __set_argMap(const std::map<std::string, std::string> & val) {
    argMap = val;
  }

  bool operator == (const EyelockNanoDevice_RestoreFirmware_args & rhs) const
  {
    if (!(restorePointName == rhs.restorePointName))
      return false;
    if (!(argMap == rhs.argMap))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_RestoreFirmware_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RestoreFirmware_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_RestoreFirmware_pargs {
 public:


  virtual ~EyelockNanoDevice_RestoreFirmware_pargs() throw() {}

  const std::string* restorePointName;
  const std::map<std::string, std::string> * argMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RestoreFirmware_result__isset {
  _EyelockNanoDevice_RestoreFirmware_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RestoreFirmware_result__isset;

class EyelockNanoDevice_RestoreFirmware_result {
 public:

  EyelockNanoDevice_RestoreFirmware_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_RestoreFirmware_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_RestoreFirmware_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_RestoreFirmware_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_RestoreFirmware_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_RestoreFirmware_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_RestoreFirmware_presult__isset {
  _EyelockNanoDevice_RestoreFirmware_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_RestoreFirmware_presult__isset;

class EyelockNanoDevice_RestoreFirmware_presult {
 public:


  virtual ~EyelockNanoDevice_RestoreFirmware_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_RestoreFirmware_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_DeleteRestorePoint_args__isset {
  _EyelockNanoDevice_DeleteRestorePoint_args__isset() : restorePointName(false) {}
  bool restorePointName;
} _EyelockNanoDevice_DeleteRestorePoint_args__isset;

class EyelockNanoDevice_DeleteRestorePoint_args {
 public:

  EyelockNanoDevice_DeleteRestorePoint_args() : restorePointName() {
  }

  virtual ~EyelockNanoDevice_DeleteRestorePoint_args() throw() {}

  std::string restorePointName;

  _EyelockNanoDevice_DeleteRestorePoint_args__isset __isset;

  void __set_restorePointName(const std::string& val) {
    restorePointName = val;
  }

  bool operator == (const EyelockNanoDevice_DeleteRestorePoint_args & rhs) const
  {
    if (!(restorePointName == rhs.restorePointName))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_DeleteRestorePoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_DeleteRestorePoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_DeleteRestorePoint_pargs {
 public:


  virtual ~EyelockNanoDevice_DeleteRestorePoint_pargs() throw() {}

  const std::string* restorePointName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_DeleteRestorePoint_result__isset {
  _EyelockNanoDevice_DeleteRestorePoint_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_DeleteRestorePoint_result__isset;

class EyelockNanoDevice_DeleteRestorePoint_result {
 public:

  EyelockNanoDevice_DeleteRestorePoint_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_DeleteRestorePoint_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_DeleteRestorePoint_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_DeleteRestorePoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_DeleteRestorePoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_DeleteRestorePoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_DeleteRestorePoint_presult__isset {
  _EyelockNanoDevice_DeleteRestorePoint_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_DeleteRestorePoint_presult__isset;

class EyelockNanoDevice_DeleteRestorePoint_presult {
 public:


  virtual ~EyelockNanoDevice_DeleteRestorePoint_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_DeleteRestorePoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_CreateCustomKey_args {
 public:

  EyelockNanoDevice_CreateCustomKey_args() {
  }

  virtual ~EyelockNanoDevice_CreateCustomKey_args() throw() {}


  bool operator == (const EyelockNanoDevice_CreateCustomKey_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_CreateCustomKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_CreateCustomKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_CreateCustomKey_pargs {
 public:


  virtual ~EyelockNanoDevice_CreateCustomKey_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_CreateCustomKey_result__isset {
  _EyelockNanoDevice_CreateCustomKey_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_CreateCustomKey_result__isset;

class EyelockNanoDevice_CreateCustomKey_result {
 public:

  EyelockNanoDevice_CreateCustomKey_result() : success() {
  }

  virtual ~EyelockNanoDevice_CreateCustomKey_result() throw() {}

  std::string success;

  _EyelockNanoDevice_CreateCustomKey_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_CreateCustomKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_CreateCustomKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_CreateCustomKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_CreateCustomKey_presult__isset {
  _EyelockNanoDevice_CreateCustomKey_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_CreateCustomKey_presult__isset;

class EyelockNanoDevice_CreateCustomKey_presult {
 public:


  virtual ~EyelockNanoDevice_CreateCustomKey_presult() throw() {}

  std::string* success;

  _EyelockNanoDevice_CreateCustomKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_ConfirmCustomKey_args__isset {
  _EyelockNanoDevice_ConfirmCustomKey_args__isset() : keyMd5(false) {}
  bool keyMd5;
} _EyelockNanoDevice_ConfirmCustomKey_args__isset;

class EyelockNanoDevice_ConfirmCustomKey_args {
 public:

  EyelockNanoDevice_ConfirmCustomKey_args() : keyMd5() {
  }

  virtual ~EyelockNanoDevice_ConfirmCustomKey_args() throw() {}

  std::string keyMd5;

  _EyelockNanoDevice_ConfirmCustomKey_args__isset __isset;

  void __set_keyMd5(const std::string& val) {
    keyMd5 = val;
  }

  bool operator == (const EyelockNanoDevice_ConfirmCustomKey_args & rhs) const
  {
    if (!(keyMd5 == rhs.keyMd5))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_ConfirmCustomKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_ConfirmCustomKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_ConfirmCustomKey_pargs {
 public:


  virtual ~EyelockNanoDevice_ConfirmCustomKey_pargs() throw() {}

  const std::string* keyMd5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_ConfirmCustomKey_result__isset {
  _EyelockNanoDevice_ConfirmCustomKey_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_ConfirmCustomKey_result__isset;

class EyelockNanoDevice_ConfirmCustomKey_result {
 public:

  EyelockNanoDevice_ConfirmCustomKey_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_ConfirmCustomKey_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_ConfirmCustomKey_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_ConfirmCustomKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_ConfirmCustomKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_ConfirmCustomKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_ConfirmCustomKey_presult__isset {
  _EyelockNanoDevice_ConfirmCustomKey_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_ConfirmCustomKey_presult__isset;

class EyelockNanoDevice_ConfirmCustomKey_presult {
 public:


  virtual ~EyelockNanoDevice_ConfirmCustomKey_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_ConfirmCustomKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_SwitchToDefaultKey_args {
 public:

  EyelockNanoDevice_SwitchToDefaultKey_args() {
  }

  virtual ~EyelockNanoDevice_SwitchToDefaultKey_args() throw() {}


  bool operator == (const EyelockNanoDevice_SwitchToDefaultKey_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_SwitchToDefaultKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SwitchToDefaultKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SwitchToDefaultKey_pargs {
 public:


  virtual ~EyelockNanoDevice_SwitchToDefaultKey_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SwitchToDefaultKey_result__isset {
  _EyelockNanoDevice_SwitchToDefaultKey_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SwitchToDefaultKey_result__isset;

class EyelockNanoDevice_SwitchToDefaultKey_result {
 public:

  EyelockNanoDevice_SwitchToDefaultKey_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SwitchToDefaultKey_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SwitchToDefaultKey_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SwitchToDefaultKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SwitchToDefaultKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SwitchToDefaultKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SwitchToDefaultKey_presult__isset {
  _EyelockNanoDevice_SwitchToDefaultKey_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SwitchToDefaultKey_presult__isset;

class EyelockNanoDevice_SwitchToDefaultKey_presult {
 public:


  virtual ~EyelockNanoDevice_SwitchToDefaultKey_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SwitchToDefaultKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_GetKeyType_args {
 public:

  EyelockNanoDevice_GetKeyType_args() {
  }

  virtual ~EyelockNanoDevice_GetKeyType_args() throw() {}


  bool operator == (const EyelockNanoDevice_GetKeyType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetKeyType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetKeyType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetKeyType_pargs {
 public:


  virtual ~EyelockNanoDevice_GetKeyType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetKeyType_result__isset {
  _EyelockNanoDevice_GetKeyType_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetKeyType_result__isset;

class EyelockNanoDevice_GetKeyType_result {
 public:

  EyelockNanoDevice_GetKeyType_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_GetKeyType_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_GetKeyType_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetKeyType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetKeyType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetKeyType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetKeyType_presult__isset {
  _EyelockNanoDevice_GetKeyType_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetKeyType_presult__isset;

class EyelockNanoDevice_GetKeyType_presult {
 public:


  virtual ~EyelockNanoDevice_GetKeyType_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_GetKeyType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_GetDeviceId_args {
 public:

  EyelockNanoDevice_GetDeviceId_args() {
  }

  virtual ~EyelockNanoDevice_GetDeviceId_args() throw() {}


  bool operator == (const EyelockNanoDevice_GetDeviceId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetDeviceId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetDeviceId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetDeviceId_pargs {
 public:


  virtual ~EyelockNanoDevice_GetDeviceId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetDeviceId_result__isset {
  _EyelockNanoDevice_GetDeviceId_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetDeviceId_result__isset;

class EyelockNanoDevice_GetDeviceId_result {
 public:

  EyelockNanoDevice_GetDeviceId_result() : success() {
  }

  virtual ~EyelockNanoDevice_GetDeviceId_result() throw() {}

  std::string success;

  _EyelockNanoDevice_GetDeviceId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetDeviceId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetDeviceId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetDeviceId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetDeviceId_presult__isset {
  _EyelockNanoDevice_GetDeviceId_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetDeviceId_presult__isset;

class EyelockNanoDevice_GetDeviceId_presult {
 public:


  virtual ~EyelockNanoDevice_GetDeviceId_presult() throw() {}

  std::string* success;

  _EyelockNanoDevice_GetDeviceId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SetPassword_args__isset {
  _EyelockNanoDevice_SetPassword_args__isset() : userName(false), oldPassword(false), newPassword(false) {}
  bool userName;
  bool oldPassword;
  bool newPassword;
} _EyelockNanoDevice_SetPassword_args__isset;

class EyelockNanoDevice_SetPassword_args {
 public:

  EyelockNanoDevice_SetPassword_args() : userName(), oldPassword(), newPassword() {
  }

  virtual ~EyelockNanoDevice_SetPassword_args() throw() {}

  std::string userName;
  std::string oldPassword;
  std::string newPassword;

  _EyelockNanoDevice_SetPassword_args__isset __isset;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_oldPassword(const std::string& val) {
    oldPassword = val;
  }

  void __set_newPassword(const std::string& val) {
    newPassword = val;
  }

  bool operator == (const EyelockNanoDevice_SetPassword_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(oldPassword == rhs.oldPassword))
      return false;
    if (!(newPassword == rhs.newPassword))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetPassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetPassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SetPassword_pargs {
 public:


  virtual ~EyelockNanoDevice_SetPassword_pargs() throw() {}

  const std::string* userName;
  const std::string* oldPassword;
  const std::string* newPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetPassword_result__isset {
  _EyelockNanoDevice_SetPassword_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetPassword_result__isset;

class EyelockNanoDevice_SetPassword_result {
 public:

  EyelockNanoDevice_SetPassword_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SetPassword_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SetPassword_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SetPassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetPassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetPassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetPassword_presult__isset {
  _EyelockNanoDevice_SetPassword_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetPassword_presult__isset;

class EyelockNanoDevice_SetPassword_presult {
 public:


  virtual ~EyelockNanoDevice_SetPassword_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SetPassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_GetRecordsCount_args {
 public:

  EyelockNanoDevice_GetRecordsCount_args() {
  }

  virtual ~EyelockNanoDevice_GetRecordsCount_args() throw() {}


  bool operator == (const EyelockNanoDevice_GetRecordsCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetRecordsCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetRecordsCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetRecordsCount_pargs {
 public:


  virtual ~EyelockNanoDevice_GetRecordsCount_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetRecordsCount_result__isset {
  _EyelockNanoDevice_GetRecordsCount_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetRecordsCount_result__isset;

class EyelockNanoDevice_GetRecordsCount_result {
 public:

  EyelockNanoDevice_GetRecordsCount_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_GetRecordsCount_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_GetRecordsCount_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetRecordsCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetRecordsCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetRecordsCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetRecordsCount_presult__isset {
  _EyelockNanoDevice_GetRecordsCount_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetRecordsCount_presult__isset;

class EyelockNanoDevice_GetRecordsCount_presult {
 public:


  virtual ~EyelockNanoDevice_GetRecordsCount_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_GetRecordsCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_GetFileChecksum_args__isset {
  _EyelockNanoDevice_GetFileChecksum_args__isset() : file(false) {}
  bool file;
} _EyelockNanoDevice_GetFileChecksum_args__isset;

class EyelockNanoDevice_GetFileChecksum_args {
 public:

  EyelockNanoDevice_GetFileChecksum_args() : file() {
  }

  virtual ~EyelockNanoDevice_GetFileChecksum_args() throw() {}

  std::string file;

  _EyelockNanoDevice_GetFileChecksum_args__isset __isset;

  void __set_file(const std::string& val) {
    file = val;
  }

  bool operator == (const EyelockNanoDevice_GetFileChecksum_args & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetFileChecksum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetFileChecksum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetFileChecksum_pargs {
 public:


  virtual ~EyelockNanoDevice_GetFileChecksum_pargs() throw() {}

  const std::string* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetFileChecksum_result__isset {
  _EyelockNanoDevice_GetFileChecksum_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetFileChecksum_result__isset;

class EyelockNanoDevice_GetFileChecksum_result {
 public:

  EyelockNanoDevice_GetFileChecksum_result() : success() {
  }

  virtual ~EyelockNanoDevice_GetFileChecksum_result() throw() {}

  std::string success;

  _EyelockNanoDevice_GetFileChecksum_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetFileChecksum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetFileChecksum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetFileChecksum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetFileChecksum_presult__isset {
  _EyelockNanoDevice_GetFileChecksum_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetFileChecksum_presult__isset;

class EyelockNanoDevice_GetFileChecksum_presult {
 public:


  virtual ~EyelockNanoDevice_GetFileChecksum_presult() throw() {}

  std::string* success;

  _EyelockNanoDevice_GetFileChecksum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SetIntParameter_args__isset {
  _EyelockNanoDevice_SetIntParameter_args__isset() : paramName(false), value(false) {}
  bool paramName;
  bool value;
} _EyelockNanoDevice_SetIntParameter_args__isset;

class EyelockNanoDevice_SetIntParameter_args {
 public:

  EyelockNanoDevice_SetIntParameter_args() : paramName(), value(0) {
  }

  virtual ~EyelockNanoDevice_SetIntParameter_args() throw() {}

  std::string paramName;
  int64_t value;

  _EyelockNanoDevice_SetIntParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  void __set_value(const int64_t val) {
    value = val;
  }

  bool operator == (const EyelockNanoDevice_SetIntParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetIntParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetIntParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SetIntParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_SetIntParameter_pargs() throw() {}

  const std::string* paramName;
  const int64_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetIntParameter_result__isset {
  _EyelockNanoDevice_SetIntParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetIntParameter_result__isset;

class EyelockNanoDevice_SetIntParameter_result {
 public:

  EyelockNanoDevice_SetIntParameter_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SetIntParameter_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SetIntParameter_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SetIntParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetIntParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetIntParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetIntParameter_presult__isset {
  _EyelockNanoDevice_SetIntParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetIntParameter_presult__isset;

class EyelockNanoDevice_SetIntParameter_presult {
 public:


  virtual ~EyelockNanoDevice_SetIntParameter_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SetIntParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_GetIntParameter_args__isset {
  _EyelockNanoDevice_GetIntParameter_args__isset() : paramName(false) {}
  bool paramName;
} _EyelockNanoDevice_GetIntParameter_args__isset;

class EyelockNanoDevice_GetIntParameter_args {
 public:

  EyelockNanoDevice_GetIntParameter_args() : paramName() {
  }

  virtual ~EyelockNanoDevice_GetIntParameter_args() throw() {}

  std::string paramName;

  _EyelockNanoDevice_GetIntParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  bool operator == (const EyelockNanoDevice_GetIntParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetIntParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetIntParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetIntParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_GetIntParameter_pargs() throw() {}

  const std::string* paramName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetIntParameter_result__isset {
  _EyelockNanoDevice_GetIntParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetIntParameter_result__isset;

class EyelockNanoDevice_GetIntParameter_result {
 public:

  EyelockNanoDevice_GetIntParameter_result() {
  }

  virtual ~EyelockNanoDevice_GetIntParameter_result() throw() {}

  GetIntReturn success;

  _EyelockNanoDevice_GetIntParameter_result__isset __isset;

  void __set_success(const GetIntReturn& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetIntParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetIntParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetIntParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetIntParameter_presult__isset {
  _EyelockNanoDevice_GetIntParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetIntParameter_presult__isset;

class EyelockNanoDevice_GetIntParameter_presult {
 public:


  virtual ~EyelockNanoDevice_GetIntParameter_presult() throw() {}

  GetIntReturn* success;

  _EyelockNanoDevice_GetIntParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SetUIntParameter_args__isset {
  _EyelockNanoDevice_SetUIntParameter_args__isset() : paramName(false), value(false) {}
  bool paramName;
  bool value;
} _EyelockNanoDevice_SetUIntParameter_args__isset;

class EyelockNanoDevice_SetUIntParameter_args {
 public:

  EyelockNanoDevice_SetUIntParameter_args() : paramName(), value(0) {
  }

  virtual ~EyelockNanoDevice_SetUIntParameter_args() throw() {}

  std::string paramName;
  int64_t value;

  _EyelockNanoDevice_SetUIntParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  void __set_value(const int64_t val) {
    value = val;
  }

  bool operator == (const EyelockNanoDevice_SetUIntParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetUIntParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetUIntParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SetUIntParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_SetUIntParameter_pargs() throw() {}

  const std::string* paramName;
  const int64_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetUIntParameter_result__isset {
  _EyelockNanoDevice_SetUIntParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetUIntParameter_result__isset;

class EyelockNanoDevice_SetUIntParameter_result {
 public:

  EyelockNanoDevice_SetUIntParameter_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SetUIntParameter_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SetUIntParameter_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SetUIntParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetUIntParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetUIntParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetUIntParameter_presult__isset {
  _EyelockNanoDevice_SetUIntParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetUIntParameter_presult__isset;

class EyelockNanoDevice_SetUIntParameter_presult {
 public:


  virtual ~EyelockNanoDevice_SetUIntParameter_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SetUIntParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_GetUIntParameter_args__isset {
  _EyelockNanoDevice_GetUIntParameter_args__isset() : paramName(false) {}
  bool paramName;
} _EyelockNanoDevice_GetUIntParameter_args__isset;

class EyelockNanoDevice_GetUIntParameter_args {
 public:

  EyelockNanoDevice_GetUIntParameter_args() : paramName() {
  }

  virtual ~EyelockNanoDevice_GetUIntParameter_args() throw() {}

  std::string paramName;

  _EyelockNanoDevice_GetUIntParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  bool operator == (const EyelockNanoDevice_GetUIntParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetUIntParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetUIntParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetUIntParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_GetUIntParameter_pargs() throw() {}

  const std::string* paramName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetUIntParameter_result__isset {
  _EyelockNanoDevice_GetUIntParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetUIntParameter_result__isset;

class EyelockNanoDevice_GetUIntParameter_result {
 public:

  EyelockNanoDevice_GetUIntParameter_result() {
  }

  virtual ~EyelockNanoDevice_GetUIntParameter_result() throw() {}

  GetIntReturn success;

  _EyelockNanoDevice_GetUIntParameter_result__isset __isset;

  void __set_success(const GetIntReturn& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetUIntParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetUIntParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetUIntParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetUIntParameter_presult__isset {
  _EyelockNanoDevice_GetUIntParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetUIntParameter_presult__isset;

class EyelockNanoDevice_GetUIntParameter_presult {
 public:


  virtual ~EyelockNanoDevice_GetUIntParameter_presult() throw() {}

  GetIntReturn* success;

  _EyelockNanoDevice_GetUIntParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SetDoubleParameter_args__isset {
  _EyelockNanoDevice_SetDoubleParameter_args__isset() : paramName(false), value(false) {}
  bool paramName;
  bool value;
} _EyelockNanoDevice_SetDoubleParameter_args__isset;

class EyelockNanoDevice_SetDoubleParameter_args {
 public:

  EyelockNanoDevice_SetDoubleParameter_args() : paramName(), value(0) {
  }

  virtual ~EyelockNanoDevice_SetDoubleParameter_args() throw() {}

  std::string paramName;
  double value;

  _EyelockNanoDevice_SetDoubleParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const EyelockNanoDevice_SetDoubleParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetDoubleParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetDoubleParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SetDoubleParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_SetDoubleParameter_pargs() throw() {}

  const std::string* paramName;
  const double* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetDoubleParameter_result__isset {
  _EyelockNanoDevice_SetDoubleParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetDoubleParameter_result__isset;

class EyelockNanoDevice_SetDoubleParameter_result {
 public:

  EyelockNanoDevice_SetDoubleParameter_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SetDoubleParameter_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SetDoubleParameter_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SetDoubleParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetDoubleParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetDoubleParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetDoubleParameter_presult__isset {
  _EyelockNanoDevice_SetDoubleParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetDoubleParameter_presult__isset;

class EyelockNanoDevice_SetDoubleParameter_presult {
 public:


  virtual ~EyelockNanoDevice_SetDoubleParameter_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SetDoubleParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_GetDoubleParameter_args__isset {
  _EyelockNanoDevice_GetDoubleParameter_args__isset() : paramName(false) {}
  bool paramName;
} _EyelockNanoDevice_GetDoubleParameter_args__isset;

class EyelockNanoDevice_GetDoubleParameter_args {
 public:

  EyelockNanoDevice_GetDoubleParameter_args() : paramName() {
  }

  virtual ~EyelockNanoDevice_GetDoubleParameter_args() throw() {}

  std::string paramName;

  _EyelockNanoDevice_GetDoubleParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  bool operator == (const EyelockNanoDevice_GetDoubleParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetDoubleParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetDoubleParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetDoubleParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_GetDoubleParameter_pargs() throw() {}

  const std::string* paramName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetDoubleParameter_result__isset {
  _EyelockNanoDevice_GetDoubleParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetDoubleParameter_result__isset;

class EyelockNanoDevice_GetDoubleParameter_result {
 public:

  EyelockNanoDevice_GetDoubleParameter_result() {
  }

  virtual ~EyelockNanoDevice_GetDoubleParameter_result() throw() {}

  GetDoubleReturn success;

  _EyelockNanoDevice_GetDoubleParameter_result__isset __isset;

  void __set_success(const GetDoubleReturn& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetDoubleParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetDoubleParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetDoubleParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetDoubleParameter_presult__isset {
  _EyelockNanoDevice_GetDoubleParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetDoubleParameter_presult__isset;

class EyelockNanoDevice_GetDoubleParameter_presult {
 public:


  virtual ~EyelockNanoDevice_GetDoubleParameter_presult() throw() {}

  GetDoubleReturn* success;

  _EyelockNanoDevice_GetDoubleParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SetBoolParameter_args__isset {
  _EyelockNanoDevice_SetBoolParameter_args__isset() : paramName(false), value(false) {}
  bool paramName;
  bool value;
} _EyelockNanoDevice_SetBoolParameter_args__isset;

class EyelockNanoDevice_SetBoolParameter_args {
 public:

  EyelockNanoDevice_SetBoolParameter_args() : paramName(), value(0) {
  }

  virtual ~EyelockNanoDevice_SetBoolParameter_args() throw() {}

  std::string paramName;
  bool value;

  _EyelockNanoDevice_SetBoolParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  void __set_value(const bool val) {
    value = val;
  }

  bool operator == (const EyelockNanoDevice_SetBoolParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetBoolParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetBoolParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SetBoolParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_SetBoolParameter_pargs() throw() {}

  const std::string* paramName;
  const bool* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetBoolParameter_result__isset {
  _EyelockNanoDevice_SetBoolParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetBoolParameter_result__isset;

class EyelockNanoDevice_SetBoolParameter_result {
 public:

  EyelockNanoDevice_SetBoolParameter_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SetBoolParameter_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SetBoolParameter_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SetBoolParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetBoolParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetBoolParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetBoolParameter_presult__isset {
  _EyelockNanoDevice_SetBoolParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetBoolParameter_presult__isset;

class EyelockNanoDevice_SetBoolParameter_presult {
 public:


  virtual ~EyelockNanoDevice_SetBoolParameter_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SetBoolParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_GetBoolParameter_args__isset {
  _EyelockNanoDevice_GetBoolParameter_args__isset() : paramName(false) {}
  bool paramName;
} _EyelockNanoDevice_GetBoolParameter_args__isset;

class EyelockNanoDevice_GetBoolParameter_args {
 public:

  EyelockNanoDevice_GetBoolParameter_args() : paramName() {
  }

  virtual ~EyelockNanoDevice_GetBoolParameter_args() throw() {}

  std::string paramName;

  _EyelockNanoDevice_GetBoolParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  bool operator == (const EyelockNanoDevice_GetBoolParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetBoolParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetBoolParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetBoolParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_GetBoolParameter_pargs() throw() {}

  const std::string* paramName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetBoolParameter_result__isset {
  _EyelockNanoDevice_GetBoolParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetBoolParameter_result__isset;

class EyelockNanoDevice_GetBoolParameter_result {
 public:

  EyelockNanoDevice_GetBoolParameter_result() {
  }

  virtual ~EyelockNanoDevice_GetBoolParameter_result() throw() {}

  GetBoolReturn success;

  _EyelockNanoDevice_GetBoolParameter_result__isset __isset;

  void __set_success(const GetBoolReturn& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetBoolParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetBoolParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetBoolParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetBoolParameter_presult__isset {
  _EyelockNanoDevice_GetBoolParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetBoolParameter_presult__isset;

class EyelockNanoDevice_GetBoolParameter_presult {
 public:


  virtual ~EyelockNanoDevice_GetBoolParameter_presult() throw() {}

  GetBoolReturn* success;

  _EyelockNanoDevice_GetBoolParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_SetStrParameter_args__isset {
  _EyelockNanoDevice_SetStrParameter_args__isset() : paramName(false), value(false) {}
  bool paramName;
  bool value;
} _EyelockNanoDevice_SetStrParameter_args__isset;

class EyelockNanoDevice_SetStrParameter_args {
 public:

  EyelockNanoDevice_SetStrParameter_args() : paramName(), value() {
  }

  virtual ~EyelockNanoDevice_SetStrParameter_args() throw() {}

  std::string paramName;
  std::string value;

  _EyelockNanoDevice_SetStrParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const EyelockNanoDevice_SetStrParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetStrParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetStrParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_SetStrParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_SetStrParameter_pargs() throw() {}

  const std::string* paramName;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetStrParameter_result__isset {
  _EyelockNanoDevice_SetStrParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetStrParameter_result__isset;

class EyelockNanoDevice_SetStrParameter_result {
 public:

  EyelockNanoDevice_SetStrParameter_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_SetStrParameter_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_SetStrParameter_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_SetStrParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_SetStrParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_SetStrParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_SetStrParameter_presult__isset {
  _EyelockNanoDevice_SetStrParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_SetStrParameter_presult__isset;

class EyelockNanoDevice_SetStrParameter_presult {
 public:


  virtual ~EyelockNanoDevice_SetStrParameter_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_SetStrParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EyelockNanoDevice_GetStrParameter_args__isset {
  _EyelockNanoDevice_GetStrParameter_args__isset() : paramName(false) {}
  bool paramName;
} _EyelockNanoDevice_GetStrParameter_args__isset;

class EyelockNanoDevice_GetStrParameter_args {
 public:

  EyelockNanoDevice_GetStrParameter_args() : paramName() {
  }

  virtual ~EyelockNanoDevice_GetStrParameter_args() throw() {}

  std::string paramName;

  _EyelockNanoDevice_GetStrParameter_args__isset __isset;

  void __set_paramName(const std::string& val) {
    paramName = val;
  }

  bool operator == (const EyelockNanoDevice_GetStrParameter_args & rhs) const
  {
    if (!(paramName == rhs.paramName))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetStrParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetStrParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_GetStrParameter_pargs {
 public:


  virtual ~EyelockNanoDevice_GetStrParameter_pargs() throw() {}

  const std::string* paramName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetStrParameter_result__isset {
  _EyelockNanoDevice_GetStrParameter_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetStrParameter_result__isset;

class EyelockNanoDevice_GetStrParameter_result {
 public:

  EyelockNanoDevice_GetStrParameter_result() {
  }

  virtual ~EyelockNanoDevice_GetStrParameter_result() throw() {}

  GetStrReturn success;

  _EyelockNanoDevice_GetStrParameter_result__isset __isset;

  void __set_success(const GetStrReturn& val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_GetStrParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_GetStrParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_GetStrParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_GetStrParameter_presult__isset {
  _EyelockNanoDevice_GetStrParameter_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_GetStrParameter_presult__isset;

class EyelockNanoDevice_GetStrParameter_presult {
 public:


  virtual ~EyelockNanoDevice_GetStrParameter_presult() throw() {}

  GetStrReturn* success;

  _EyelockNanoDevice_GetStrParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EyelockNanoDevice_ResetConfigParameters_args {
 public:

  EyelockNanoDevice_ResetConfigParameters_args() {
  }

  virtual ~EyelockNanoDevice_ResetConfigParameters_args() throw() {}


  bool operator == (const EyelockNanoDevice_ResetConfigParameters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EyelockNanoDevice_ResetConfigParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_ResetConfigParameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EyelockNanoDevice_ResetConfigParameters_pargs {
 public:


  virtual ~EyelockNanoDevice_ResetConfigParameters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_ResetConfigParameters_result__isset {
  _EyelockNanoDevice_ResetConfigParameters_result__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_ResetConfigParameters_result__isset;

class EyelockNanoDevice_ResetConfigParameters_result {
 public:

  EyelockNanoDevice_ResetConfigParameters_result() : success(0) {
  }

  virtual ~EyelockNanoDevice_ResetConfigParameters_result() throw() {}

  int32_t success;

  _EyelockNanoDevice_ResetConfigParameters_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EyelockNanoDevice_ResetConfigParameters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EyelockNanoDevice_ResetConfigParameters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EyelockNanoDevice_ResetConfigParameters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EyelockNanoDevice_ResetConfigParameters_presult__isset {
  _EyelockNanoDevice_ResetConfigParameters_presult__isset() : success(false) {}
  bool success;
} _EyelockNanoDevice_ResetConfigParameters_presult__isset;

class EyelockNanoDevice_ResetConfigParameters_presult {
 public:


  virtual ~EyelockNanoDevice_ResetConfigParameters_presult() throw() {}

  int32_t* success;

  _EyelockNanoDevice_ResetConfigParameters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EyelockNanoDeviceClient : virtual public EyelockNanoDeviceIf {
 public:
  EyelockNanoDeviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  EyelockNanoDeviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t startImageStream(const std::string& ipaddress, const std::string& portno, const bool secure, const ELKNS_ImageFormats::type format);
  void send_startImageStream(const std::string& ipaddress, const std::string& portno, const bool secure, const ELKNS_ImageFormats::type format);
  int32_t recv_startImageStream();
  int32_t stopImageStream(const std::string& ipaddress, const std::string& portno);
  void send_stopImageStream(const std::string& ipaddress, const std::string& portno);
  int32_t recv_stopImageStream();
  int32_t ChangeLedColor(const int8_t mask, const int32_t time);
  void send_ChangeLedColor(const int8_t mask, const int32_t time);
  int32_t recv_ChangeLedColor();
  void GetFirmwareRevision(std::map<std::string, std::string> & _return, const int32_t reType);
  void send_GetFirmwareRevision(const int32_t reType);
  void recv_GetFirmwareRevision(std::map<std::string, std::string> & _return);
  int32_t SetAudiolevel(const double vol);
  void send_SetAudiolevel(const double vol);
  int32_t recv_SetAudiolevel();
  double GetAudiolevel();
  void send_GetAudiolevel();
  double recv_GetAudiolevel();
  int32_t IsDeviceTampered();
  void send_IsDeviceTampered();
  int32_t recv_IsDeviceTampered();
  int32_t pushDB(const std::string& fullDB, const ACD_Type::type dbtype);
  void send_pushDB(const std::string& fullDB, const ACD_Type::type dbtype);
  int32_t recv_pushDB();
  int32_t ResetFirmware();
  void send_ResetFirmware();
  int32_t recv_ResetFirmware();
  int32_t PingDevice();
  void send_PingDevice();
  int32_t recv_PingDevice();
  int64_t GetTime();
  void send_GetTime();
  int64_t recv_GetTime();
  int32_t SyncTime(const int64_t nanoTime, const int64_t hostTime, const int32_t pingTimeout);
  void send_SyncTime(const int64_t nanoTime, const int64_t hostTime, const int32_t pingTimeout);
  int32_t recv_SyncTime();
  int32_t RestartDevice(const ELKNS_RestartTypes::type restart);
  void send_RestartDevice(const ELKNS_RestartTypes::type restart);
  int32_t recv_RestartDevice();
  int32_t updateDB(const std::string& upDB, const ACD_Type::type dbtype);
  void send_updateDB(const std::string& upDB, const ACD_Type::type dbtype);
  int32_t recv_updateDB();
  void GetConfigParameters(std::map<int32_t, std::string> & _return);
  void send_GetConfigParameters();
  void recv_GetConfigParameters(std::map<int32_t, std::string> & _return);
  int32_t SetConfigParameters(const std::map<int32_t, std::string> & confMap);
  void send_SetConfigParameters(const std::map<int32_t, std::string> & confMap);
  int32_t recv_SetConfigParameters();
  void RetreiveAllIDs(std::string& _return);
  void send_RetreiveAllIDs();
  void recv_RetreiveAllIDs(std::string& _return);
  void receiveChunkAndAppendFile(std::map<std::string, std::string> & _return, const std::vector<std::string> & chunkList);
  void send_receiveChunkAndAppendFile(const std::vector<std::string> & chunkList);
  void recv_receiveChunkAndAppendFile(std::map<std::string, std::string> & _return);
  void neededChunkFromFile(std::vector<std::string> & _return, const std::map<std::string, std::string> & neededchunkInfo);
  void send_neededChunkFromFile(const std::map<std::string, std::string> & neededchunkInfo);
  void recv_neededChunkFromFile(std::vector<std::string> & _return);
  int32_t RegisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event);
  void send_RegisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event);
  int32_t recv_RegisterCallBack();
  int32_t UnregisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event);
  void send_UnregisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event);
  int32_t recv_UnregisterCallBack();
  void RetrieveLogs(std::map<std::string, std::string> & _return);
  void send_RetrieveLogs();
  void recv_RetrieveLogs(std::map<std::string, std::string> & _return);
  void GetSlaveVersion(std::string& _return);
  void send_GetSlaveVersion();
  void recv_GetSlaveVersion(std::string& _return);
  void getDBCheckSum(std::string& _return);
  void send_getDBCheckSum();
  void recv_getDBCheckSum(std::string& _return);
  int32_t DeleteDeviceFile(const std::string& path, const bool isDirectory);
  void send_DeleteDeviceFile(const std::string& path, const bool isDirectory);
  int32_t recv_DeleteDeviceFile();
  int32_t SendRelayCommand(const ELKNS_RelayTypes::type relayType, const int32_t duration);
  void send_SendRelayCommand(const ELKNS_RelayTypes::type relayType, const int32_t duration);
  int32_t recv_SendRelayCommand();
  void getRestorePoints(std::vector<std::string> & _return);
  void send_getRestorePoints();
  void recv_getRestorePoints(std::vector<std::string> & _return);
  int32_t UpdateFirmware(const std::map<std::string, std::string> & filenamemap);
  void send_UpdateFirmware(const std::map<std::string, std::string> & filenamemap);
  int32_t recv_UpdateFirmware();
  int32_t RestoreFirmware(const std::string& restorePointName, const std::map<std::string, std::string> & argMap);
  void send_RestoreFirmware(const std::string& restorePointName, const std::map<std::string, std::string> & argMap);
  int32_t recv_RestoreFirmware();
  int32_t DeleteRestorePoint(const std::string& restorePointName);
  void send_DeleteRestorePoint(const std::string& restorePointName);
  int32_t recv_DeleteRestorePoint();
  void CreateCustomKey(std::string& _return);
  void send_CreateCustomKey();
  void recv_CreateCustomKey(std::string& _return);
  int32_t ConfirmCustomKey(const std::string& keyMd5);
  void send_ConfirmCustomKey(const std::string& keyMd5);
  int32_t recv_ConfirmCustomKey();
  int32_t SwitchToDefaultKey();
  void send_SwitchToDefaultKey();
  int32_t recv_SwitchToDefaultKey();
  int32_t GetKeyType();
  void send_GetKeyType();
  int32_t recv_GetKeyType();
  void GetDeviceId(std::string& _return);
  void send_GetDeviceId();
  void recv_GetDeviceId(std::string& _return);
  int32_t SetPassword(const std::string& userName, const std::string& oldPassword, const std::string& newPassword);
  void send_SetPassword(const std::string& userName, const std::string& oldPassword, const std::string& newPassword);
  int32_t recv_SetPassword();
  int32_t GetRecordsCount();
  void send_GetRecordsCount();
  int32_t recv_GetRecordsCount();
  void GetFileChecksum(std::string& _return, const std::string& file);
  void send_GetFileChecksum(const std::string& file);
  void recv_GetFileChecksum(std::string& _return);
  int32_t SetIntParameter(const std::string& paramName, const int64_t value);
  void send_SetIntParameter(const std::string& paramName, const int64_t value);
  int32_t recv_SetIntParameter();
  void GetIntParameter(GetIntReturn& _return, const std::string& paramName);
  void send_GetIntParameter(const std::string& paramName);
  void recv_GetIntParameter(GetIntReturn& _return);
  int32_t SetUIntParameter(const std::string& paramName, const int64_t value);
  void send_SetUIntParameter(const std::string& paramName, const int64_t value);
  int32_t recv_SetUIntParameter();
  void GetUIntParameter(GetIntReturn& _return, const std::string& paramName);
  void send_GetUIntParameter(const std::string& paramName);
  void recv_GetUIntParameter(GetIntReturn& _return);
  int32_t SetDoubleParameter(const std::string& paramName, const double value);
  void send_SetDoubleParameter(const std::string& paramName, const double value);
  int32_t recv_SetDoubleParameter();
  void GetDoubleParameter(GetDoubleReturn& _return, const std::string& paramName);
  void send_GetDoubleParameter(const std::string& paramName);
  void recv_GetDoubleParameter(GetDoubleReturn& _return);
  int32_t SetBoolParameter(const std::string& paramName, const bool value);
  void send_SetBoolParameter(const std::string& paramName, const bool value);
  int32_t recv_SetBoolParameter();
  void GetBoolParameter(GetBoolReturn& _return, const std::string& paramName);
  void send_GetBoolParameter(const std::string& paramName);
  void recv_GetBoolParameter(GetBoolReturn& _return);
  int32_t SetStrParameter(const std::string& paramName, const std::string& value);
  void send_SetStrParameter(const std::string& paramName, const std::string& value);
  int32_t recv_SetStrParameter();
  void GetStrParameter(GetStrReturn& _return, const std::string& paramName);
  void send_GetStrParameter(const std::string& paramName);
  void recv_GetStrParameter(GetStrReturn& _return);
  int32_t ResetConfigParameters();
  void send_ResetConfigParameters();
  int32_t recv_ResetConfigParameters();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EyelockNanoDeviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<EyelockNanoDeviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EyelockNanoDeviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_startImageStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopImageStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ChangeLedColor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFirmwareRevision(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetAudiolevel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAudiolevel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsDeviceTampered(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushDB(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetFirmware(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PingDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SyncTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RestartDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDB(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetConfigParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetConfigParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RetreiveAllIDs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_receiveChunkAndAppendFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_neededChunkFromFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterCallBack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnregisterCallBack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RetrieveLogs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSlaveVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDBCheckSum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDeviceFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendRelayCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRestorePoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateFirmware(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RestoreFirmware(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteRestorePoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateCustomKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConfirmCustomKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SwitchToDefaultKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetKeyType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDeviceId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetPassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRecordsCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFileChecksum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetIntParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetIntParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetUIntParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUIntParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetDoubleParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDoubleParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetBoolParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBoolParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetStrParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetStrParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetConfigParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EyelockNanoDeviceProcessor(boost::shared_ptr<EyelockNanoDeviceIf> iface) :
    iface_(iface) {
    processMap_["startImageStream"] = &EyelockNanoDeviceProcessor::process_startImageStream;
    processMap_["stopImageStream"] = &EyelockNanoDeviceProcessor::process_stopImageStream;
    processMap_["ChangeLedColor"] = &EyelockNanoDeviceProcessor::process_ChangeLedColor;
    processMap_["GetFirmwareRevision"] = &EyelockNanoDeviceProcessor::process_GetFirmwareRevision;
    processMap_["SetAudiolevel"] = &EyelockNanoDeviceProcessor::process_SetAudiolevel;
    processMap_["GetAudiolevel"] = &EyelockNanoDeviceProcessor::process_GetAudiolevel;
    processMap_["IsDeviceTampered"] = &EyelockNanoDeviceProcessor::process_IsDeviceTampered;
    processMap_["pushDB"] = &EyelockNanoDeviceProcessor::process_pushDB;
    processMap_["ResetFirmware"] = &EyelockNanoDeviceProcessor::process_ResetFirmware;
    processMap_["PingDevice"] = &EyelockNanoDeviceProcessor::process_PingDevice;
    processMap_["GetTime"] = &EyelockNanoDeviceProcessor::process_GetTime;
    processMap_["SyncTime"] = &EyelockNanoDeviceProcessor::process_SyncTime;
    processMap_["RestartDevice"] = &EyelockNanoDeviceProcessor::process_RestartDevice;
    processMap_["updateDB"] = &EyelockNanoDeviceProcessor::process_updateDB;
    processMap_["GetConfigParameters"] = &EyelockNanoDeviceProcessor::process_GetConfigParameters;
    processMap_["SetConfigParameters"] = &EyelockNanoDeviceProcessor::process_SetConfigParameters;
    processMap_["RetreiveAllIDs"] = &EyelockNanoDeviceProcessor::process_RetreiveAllIDs;
    processMap_["receiveChunkAndAppendFile"] = &EyelockNanoDeviceProcessor::process_receiveChunkAndAppendFile;
    processMap_["neededChunkFromFile"] = &EyelockNanoDeviceProcessor::process_neededChunkFromFile;
    processMap_["RegisterCallBack"] = &EyelockNanoDeviceProcessor::process_RegisterCallBack;
    processMap_["UnregisterCallBack"] = &EyelockNanoDeviceProcessor::process_UnregisterCallBack;
    processMap_["RetrieveLogs"] = &EyelockNanoDeviceProcessor::process_RetrieveLogs;
    processMap_["GetSlaveVersion"] = &EyelockNanoDeviceProcessor::process_GetSlaveVersion;
    processMap_["getDBCheckSum"] = &EyelockNanoDeviceProcessor::process_getDBCheckSum;
    processMap_["DeleteDeviceFile"] = &EyelockNanoDeviceProcessor::process_DeleteDeviceFile;
    processMap_["SendRelayCommand"] = &EyelockNanoDeviceProcessor::process_SendRelayCommand;
    processMap_["getRestorePoints"] = &EyelockNanoDeviceProcessor::process_getRestorePoints;
    processMap_["UpdateFirmware"] = &EyelockNanoDeviceProcessor::process_UpdateFirmware;
    processMap_["RestoreFirmware"] = &EyelockNanoDeviceProcessor::process_RestoreFirmware;
    processMap_["DeleteRestorePoint"] = &EyelockNanoDeviceProcessor::process_DeleteRestorePoint;
    processMap_["CreateCustomKey"] = &EyelockNanoDeviceProcessor::process_CreateCustomKey;
    processMap_["ConfirmCustomKey"] = &EyelockNanoDeviceProcessor::process_ConfirmCustomKey;
    processMap_["SwitchToDefaultKey"] = &EyelockNanoDeviceProcessor::process_SwitchToDefaultKey;
    processMap_["GetKeyType"] = &EyelockNanoDeviceProcessor::process_GetKeyType;
    processMap_["GetDeviceId"] = &EyelockNanoDeviceProcessor::process_GetDeviceId;
    processMap_["SetPassword"] = &EyelockNanoDeviceProcessor::process_SetPassword;
    processMap_["GetRecordsCount"] = &EyelockNanoDeviceProcessor::process_GetRecordsCount;
    processMap_["GetFileChecksum"] = &EyelockNanoDeviceProcessor::process_GetFileChecksum;
    processMap_["SetIntParameter"] = &EyelockNanoDeviceProcessor::process_SetIntParameter;
    processMap_["GetIntParameter"] = &EyelockNanoDeviceProcessor::process_GetIntParameter;
    processMap_["SetUIntParameter"] = &EyelockNanoDeviceProcessor::process_SetUIntParameter;
    processMap_["GetUIntParameter"] = &EyelockNanoDeviceProcessor::process_GetUIntParameter;
    processMap_["SetDoubleParameter"] = &EyelockNanoDeviceProcessor::process_SetDoubleParameter;
    processMap_["GetDoubleParameter"] = &EyelockNanoDeviceProcessor::process_GetDoubleParameter;
    processMap_["SetBoolParameter"] = &EyelockNanoDeviceProcessor::process_SetBoolParameter;
    processMap_["GetBoolParameter"] = &EyelockNanoDeviceProcessor::process_GetBoolParameter;
    processMap_["SetStrParameter"] = &EyelockNanoDeviceProcessor::process_SetStrParameter;
    processMap_["GetStrParameter"] = &EyelockNanoDeviceProcessor::process_GetStrParameter;
    processMap_["ResetConfigParameters"] = &EyelockNanoDeviceProcessor::process_ResetConfigParameters;
  }

  virtual ~EyelockNanoDeviceProcessor() {}
};

class EyelockNanoDeviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EyelockNanoDeviceProcessorFactory(const ::boost::shared_ptr< EyelockNanoDeviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EyelockNanoDeviceIfFactory > handlerFactory_;
};

class EyelockNanoDeviceMultiface : virtual public EyelockNanoDeviceIf {
 public:
  EyelockNanoDeviceMultiface(std::vector<boost::shared_ptr<EyelockNanoDeviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EyelockNanoDeviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EyelockNanoDeviceIf> > ifaces_;
  EyelockNanoDeviceMultiface() {}
  void add(boost::shared_ptr<EyelockNanoDeviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t startImageStream(const std::string& ipaddress, const std::string& portno, const bool secure, const ELKNS_ImageFormats::type format) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startImageStream(ipaddress, portno, secure, format);
    }
    return ifaces_[i]->startImageStream(ipaddress, portno, secure, format);
  }

  int32_t stopImageStream(const std::string& ipaddress, const std::string& portno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopImageStream(ipaddress, portno);
    }
    return ifaces_[i]->stopImageStream(ipaddress, portno);
  }

  int32_t ChangeLedColor(const int8_t mask, const int32_t time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ChangeLedColor(mask, time);
    }
    return ifaces_[i]->ChangeLedColor(mask, time);
  }

  void GetFirmwareRevision(std::map<std::string, std::string> & _return, const int32_t reType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFirmwareRevision(_return, reType);
    }
    ifaces_[i]->GetFirmwareRevision(_return, reType);
    return;
  }

  int32_t SetAudiolevel(const double vol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetAudiolevel(vol);
    }
    return ifaces_[i]->SetAudiolevel(vol);
  }

  double GetAudiolevel() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAudiolevel();
    }
    return ifaces_[i]->GetAudiolevel();
  }

  int32_t IsDeviceTampered() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsDeviceTampered();
    }
    return ifaces_[i]->IsDeviceTampered();
  }

  int32_t pushDB(const std::string& fullDB, const ACD_Type::type dbtype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushDB(fullDB, dbtype);
    }
    return ifaces_[i]->pushDB(fullDB, dbtype);
  }

  int32_t ResetFirmware() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResetFirmware();
    }
    return ifaces_[i]->ResetFirmware();
  }

  int32_t PingDevice() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PingDevice();
    }
    return ifaces_[i]->PingDevice();
  }

  int64_t GetTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTime();
    }
    return ifaces_[i]->GetTime();
  }

  int32_t SyncTime(const int64_t nanoTime, const int64_t hostTime, const int32_t pingTimeout) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SyncTime(nanoTime, hostTime, pingTimeout);
    }
    return ifaces_[i]->SyncTime(nanoTime, hostTime, pingTimeout);
  }

  int32_t RestartDevice(const ELKNS_RestartTypes::type restart) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RestartDevice(restart);
    }
    return ifaces_[i]->RestartDevice(restart);
  }

  int32_t updateDB(const std::string& upDB, const ACD_Type::type dbtype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDB(upDB, dbtype);
    }
    return ifaces_[i]->updateDB(upDB, dbtype);
  }

  void GetConfigParameters(std::map<int32_t, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetConfigParameters(_return);
    }
    ifaces_[i]->GetConfigParameters(_return);
    return;
  }

  int32_t SetConfigParameters(const std::map<int32_t, std::string> & confMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetConfigParameters(confMap);
    }
    return ifaces_[i]->SetConfigParameters(confMap);
  }

  void RetreiveAllIDs(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RetreiveAllIDs(_return);
    }
    ifaces_[i]->RetreiveAllIDs(_return);
    return;
  }

  void receiveChunkAndAppendFile(std::map<std::string, std::string> & _return, const std::vector<std::string> & chunkList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->receiveChunkAndAppendFile(_return, chunkList);
    }
    ifaces_[i]->receiveChunkAndAppendFile(_return, chunkList);
    return;
  }

  void neededChunkFromFile(std::vector<std::string> & _return, const std::map<std::string, std::string> & neededchunkInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->neededChunkFromFile(_return, neededchunkInfo);
    }
    ifaces_[i]->neededChunkFromFile(_return, neededchunkInfo);
    return;
  }

  int32_t RegisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterCallBack(ipaddress, portno, Event);
    }
    return ifaces_[i]->RegisterCallBack(ipaddress, portno, Event);
  }

  int32_t UnregisterCallBack(const std::string& ipaddress, const std::string& portno, const ELKNS_EventTypes::type Event) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnregisterCallBack(ipaddress, portno, Event);
    }
    return ifaces_[i]->UnregisterCallBack(ipaddress, portno, Event);
  }

  void RetrieveLogs(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RetrieveLogs(_return);
    }
    ifaces_[i]->RetrieveLogs(_return);
    return;
  }

  void GetSlaveVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSlaveVersion(_return);
    }
    ifaces_[i]->GetSlaveVersion(_return);
    return;
  }

  void getDBCheckSum(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDBCheckSum(_return);
    }
    ifaces_[i]->getDBCheckSum(_return);
    return;
  }

  int32_t DeleteDeviceFile(const std::string& path, const bool isDirectory) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDeviceFile(path, isDirectory);
    }
    return ifaces_[i]->DeleteDeviceFile(path, isDirectory);
  }

  int32_t SendRelayCommand(const ELKNS_RelayTypes::type relayType, const int32_t duration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendRelayCommand(relayType, duration);
    }
    return ifaces_[i]->SendRelayCommand(relayType, duration);
  }

  void getRestorePoints(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRestorePoints(_return);
    }
    ifaces_[i]->getRestorePoints(_return);
    return;
  }

  int32_t UpdateFirmware(const std::map<std::string, std::string> & filenamemap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateFirmware(filenamemap);
    }
    return ifaces_[i]->UpdateFirmware(filenamemap);
  }

  int32_t RestoreFirmware(const std::string& restorePointName, const std::map<std::string, std::string> & argMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RestoreFirmware(restorePointName, argMap);
    }
    return ifaces_[i]->RestoreFirmware(restorePointName, argMap);
  }

  int32_t DeleteRestorePoint(const std::string& restorePointName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteRestorePoint(restorePointName);
    }
    return ifaces_[i]->DeleteRestorePoint(restorePointName);
  }

  void CreateCustomKey(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateCustomKey(_return);
    }
    ifaces_[i]->CreateCustomKey(_return);
    return;
  }

  int32_t ConfirmCustomKey(const std::string& keyMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConfirmCustomKey(keyMd5);
    }
    return ifaces_[i]->ConfirmCustomKey(keyMd5);
  }

  int32_t SwitchToDefaultKey() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SwitchToDefaultKey();
    }
    return ifaces_[i]->SwitchToDefaultKey();
  }

  int32_t GetKeyType() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetKeyType();
    }
    return ifaces_[i]->GetKeyType();
  }

  void GetDeviceId(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDeviceId(_return);
    }
    ifaces_[i]->GetDeviceId(_return);
    return;
  }

  int32_t SetPassword(const std::string& userName, const std::string& oldPassword, const std::string& newPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetPassword(userName, oldPassword, newPassword);
    }
    return ifaces_[i]->SetPassword(userName, oldPassword, newPassword);
  }

  int32_t GetRecordsCount() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRecordsCount();
    }
    return ifaces_[i]->GetRecordsCount();
  }

  void GetFileChecksum(std::string& _return, const std::string& file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFileChecksum(_return, file);
    }
    ifaces_[i]->GetFileChecksum(_return, file);
    return;
  }

  int32_t SetIntParameter(const std::string& paramName, const int64_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetIntParameter(paramName, value);
    }
    return ifaces_[i]->SetIntParameter(paramName, value);
  }

  void GetIntParameter(GetIntReturn& _return, const std::string& paramName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetIntParameter(_return, paramName);
    }
    ifaces_[i]->GetIntParameter(_return, paramName);
    return;
  }

  int32_t SetUIntParameter(const std::string& paramName, const int64_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetUIntParameter(paramName, value);
    }
    return ifaces_[i]->SetUIntParameter(paramName, value);
  }

  void GetUIntParameter(GetIntReturn& _return, const std::string& paramName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUIntParameter(_return, paramName);
    }
    ifaces_[i]->GetUIntParameter(_return, paramName);
    return;
  }

  int32_t SetDoubleParameter(const std::string& paramName, const double value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetDoubleParameter(paramName, value);
    }
    return ifaces_[i]->SetDoubleParameter(paramName, value);
  }

  void GetDoubleParameter(GetDoubleReturn& _return, const std::string& paramName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDoubleParameter(_return, paramName);
    }
    ifaces_[i]->GetDoubleParameter(_return, paramName);
    return;
  }

  int32_t SetBoolParameter(const std::string& paramName, const bool value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetBoolParameter(paramName, value);
    }
    return ifaces_[i]->SetBoolParameter(paramName, value);
  }

  void GetBoolParameter(GetBoolReturn& _return, const std::string& paramName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBoolParameter(_return, paramName);
    }
    ifaces_[i]->GetBoolParameter(_return, paramName);
    return;
  }

  int32_t SetStrParameter(const std::string& paramName, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetStrParameter(paramName, value);
    }
    return ifaces_[i]->SetStrParameter(paramName, value);
  }

  void GetStrParameter(GetStrReturn& _return, const std::string& paramName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetStrParameter(_return, paramName);
    }
    ifaces_[i]->GetStrParameter(_return, paramName);
    return;
  }

  int32_t ResetConfigParameters() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResetConfigParameters();
    }
    return ifaces_[i]->ResetConfigParameters();
  }

};

} // namespace

#endif
