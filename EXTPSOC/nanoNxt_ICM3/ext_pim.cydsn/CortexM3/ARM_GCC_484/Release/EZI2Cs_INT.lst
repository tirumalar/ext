ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"EZI2Cs_INT.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.EZI2Cs_ISR,"ax",%progbits
  19              		.align	1
  20              		.global	EZI2Cs_ISR
  21              		.thumb
  22              		.thumb_func
  23              		.type	EZI2Cs_ISR, %function
  24              	EZI2Cs_ISR:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\EZI2Cs_INT.c"
   1:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * File Name: EZI2CsINT.c
   3:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * Version 2.0
   4:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
   5:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * Description:
   6:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  This file contains the code that operates during the interrupt service
   7:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  routine.  For this component, most of the runtime code is located in
   8:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  the ISR.
   9:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  10:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *******************************************************************************
  11:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
  17:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** #include "EZI2Cs_PVT.h"
  18:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
  19:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
  20:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** /*******************************************************************************
  21:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * Function Name: EZI2Cs_ISR
  22:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** ********************************************************************************
  23:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  24:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * Summary:
  25:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  Handle Interrupt Service Routine.
  26:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  27:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * Parameters:
  28:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_dataPtrS1 - The global variable which stores the pointer to the
  29:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  data exposed to an I2C master for the first slave address.
  30:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  31:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwOffsetS1 - The global variable which stores an offset for read
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 2


  32:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  and write operations, is set at each write sequence of the first slave
  33:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  address.
  34:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  35:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwIndexS1: global variable, which stores pointer to the next
  36:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  value to be read or written for the first slave address.
  37:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  38:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * EZI2Cs_wrProtectS1 - The global variable which stores an offset where data
  39:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  is read only for the first slave address.
  40:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  41:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * EZI2Cs_bufSizeS1 - The global variable which stores the size of a data array
  42:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  exposed to the I2C master for the first slave address.
  43:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  44:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_dataPtrS2 - The global variable which stores a pointer to the
  45:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  data exposed to the I2C master for the second slave address.
  46:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  47:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwOffsetS2 - The global variable which stores an offset for read
  48:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  and write operations, is set at each write sequence of the second slave
  49:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  device.
  50:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  51:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwIndexS2 - The global variable which stores a pointer to the next
  52:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  value to be read or written for the second slave address.
  53:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  54:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * EZI2Cs_wrProtectS2 - The global variable which stores an offset where data
  55:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  is "Read only" for the second slave address.  ??
  56:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  57:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * EZI2Cs_bufSizeS2 - The global variable which stores the size of a data array
  58:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  exposed to the I2C master for the second slave address.
  59:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  60:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * EZI2Cs_curState - The global variable which stores a current state of an
  61:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  I2C state machine.
  62:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  63:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_curStatus - The global variable which stores the current status of
  64:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  the component.
  65:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  66:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** * Return:
  67:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwOffsetS1 - The global variable which stores an offset for read
  68:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  and write operations, is set at each write sequence of the first slave
  69:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  address and is reset if a received slave address matches the first slave address
  70:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  and a next operation will be read.
  71:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  72:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwIndexS1 - The global variable which stores a pointer to the next
  73:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  value to be read or written for the first slave address. Is set to
  74:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwOffsetS1 and than incremented if a received slave address
  75:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  matches the first slave address and a next operation will be read.
  76:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  77:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwOffsetS2 - The global variable which stores an offset for read
  78:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  and write operations, is set at each write sequence of the second slave
  79:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  address. This variable changes if a new sub-address is passed to the slave.
  80:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  81:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  EZI2Cs_rwIndexS2 - The global variable which stores a pointer to the next
  82:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  value to be read or written for the second slave address. This variable
  83:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *  changes if a new sub-address is passed to the slave.
  84:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *
  85:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** *******************************************************************************/
  86:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** CY_ISR(EZI2Cs_ISR)
  87:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** {
  27              		.loc 1 87 0
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 3


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  88:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     static uint8  tmp8;
  89:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     static uint8  tmpCsr;
  90:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
  91:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** #if (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_16BIT)
  92:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     static uint16 tmp16;
  93:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** #endif /* (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_16BIT) */
  94:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
  95:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     /* Entry from interrupt
  96:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     *  In the hardware address compare mode, we can assume we only get interrupted
  97:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     *  when a valid address is recognized. In the software address compare mode,
  98:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     *  we have to check every address after a start condition.
  99:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     */
 100:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 101:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     /* Make copy to check Stop condition after bus has been released */
 102:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     tmpCsr = EZI2Cs_CSR_REG;
  37              		.loc 1 102 0
  38 0002 534B     		ldr	r3, .L25
  39 0004 5349     		ldr	r1, .L25+4
  40 0006 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
  41 0008 E4B2     		uxtb	r4, r4
 103:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 104:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     /* Check for address phase of the transaction */
 105:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     if (EZI2Cs_IS_BIT_SET(tmpCsr, EZI2Cs_CSR_ADDRESS))
  42              		.loc 1 105 0
  43 000a 04F00800 		and	r0, r4, #8
 102:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     tmpCsr = EZI2Cs_CSR_REG;
  44              		.loc 1 102 0
  45 000e 0C70     		strb	r4, [r1]
  46              		.loc 1 105 0
  47 0010 00F0FF02 		and	r2, r0, #255
  48 0014 58B3     		cbz	r0, .L2
 106:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     {
 107:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         #if (EZI2Cs_ADDRESSES == EZI2Cs_TWO_ADDRESSES)
 108:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 109:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             /* Get slave address from data register */
 110:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             tmp8 = ((EZI2Cs_DATA_REG >> EZI2Cs_ADDRESS_SHIFT) & EZI2Cs_SADDR_MASK);
 111:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 112:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             if (tmp8 == EZI2Cs_addrS1)   /* Check for address 1  */
 113:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             {
 114:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 if (EZI2Cs_IS_BIT_SET(EZI2Cs_DATA_REG, EZI2Cs_READ_FLAG))
 115:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 {  /* Prepare next read op, get data and place in register */
 116:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 117:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Load first data byte  */
 118:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_DATA_REG = EZI2Cs_dataPtrS1[EZI2Cs_rwOffsetS1];
 119:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 120:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* ACK and transmit */
 121:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = (EZI2Cs_CSR_ACK | EZI2Cs_CSR_TRANSMIT);
 122:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 4


 123:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Set index to offset */
 124:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_rwIndexS1 = EZI2Cs_rwOffsetS1;
 125:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 126:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Advance to data location */
 127:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     ++EZI2Cs_rwIndexS1;
 128:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 129:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Set Read busy status */
 130:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curStatus |= EZI2Cs_STATUS_RD1BUSY;
 131:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 132:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Prepare for read transaction */
 133:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curState = EZI2Cs_SM_DEV1_RD_DATA;
 134:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 }
 135:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 else  /* Start of a Write transaction, reset pointers, first byte is address */
 136:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 {  /* Prepare next operation to write offset */
 137:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 138:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* ACK and ready to receive sub address */
 139:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 140:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 141:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Set Write busy status */
 142:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curStatus |= EZI2Cs_STATUS_WR1BUSY;
 143:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 144:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Prepare for read transaction */
 145:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curState = EZI2Cs_SM_DEV1_WR_ADDR;
 146:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 147:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Stop Interrupt Enable */
 148:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CFG_REG  |= EZI2Cs_CFG_STOP_IE;
 149:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 150:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 }  /* Prepared for next Write transaction */
 151:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             }   /* Slave address #1 is processed */
 152:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             else if (tmp8 == EZI2Cs_addrS2)   /* Check for address 2  */
 153:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             {
 154:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 if (EZI2Cs_IS_BIT_SET(EZI2Cs_DATA_REG, EZI2Cs_READ_FLAG))
 155:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 {  /* Prepare next read op, get data and place in register */
 156:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 157:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Load first data byte  */
 158:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_DATA_REG = EZI2Cs_dataPtrS2[EZI2Cs_rwOffsetS2];
 159:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 160:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* ACK and transmit */
 161:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = (EZI2Cs_CSR_ACK | EZI2Cs_CSR_TRANSMIT);
 162:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 163:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Reset pointer to previous offset */
 164:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_rwIndexS2 = EZI2Cs_rwOffsetS2;
 165:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 166:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Advance to data location */
 167:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     ++EZI2Cs_rwIndexS2;
 168:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 169:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Set read busy status */
 170:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curStatus |= EZI2Cs_STATUS_RD2BUSY;
 171:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 172:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Prepare for read transaction */
 173:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curState = EZI2Cs_SM_DEV2_RD_DATA;
 174:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 175:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 }  /* Prepared for next Read transaction */
 176:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 else  /* Start of write transfer, reset ptrs, 1st byte is address */
 177:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 {  /* Prepare next operation to write offset */
 178:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 179:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* ACK and ready to receive address */
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 5


 180:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 181:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 182:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Set Write busy status */
 183:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curStatus |= EZI2Cs_STATUS_WR2BUSY;
 184:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 185:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Prepare for read transaction */
 186:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curState = EZI2Cs_SM_DEV2_WR_ADDR;
 187:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 188:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Enable interrupt on Stop */
 189:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CFG_REG  |= EZI2Cs_CFG_STOP_IE;
 190:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 } /* Prepared for the next Write transaction */
 191:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             }
 192:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             else   /* No address match */
 193:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             {   /* NAK address Match  */
 194:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 195:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             }
 196:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         #else /* One slave address - hardware address matching */
 197:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 198:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             if (EZI2Cs_IS_BIT_SET(EZI2Cs_DATA_REG, EZI2Cs_READ_FLAG))
  49              		.loc 1 198 0
  50 0016 504C     		ldr	r4, .L25+8
  51 0018 5048     		ldr	r0, .L25+12
  52 001a 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
  53 001c 12F0010F 		tst	r2, #1
  54 0020 4F4A     		ldr	r2, .L25+16
  55 0022 17D0     		beq	.L3
 199:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             {   /* Prepare next read op, get data and place in register */
 200:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 201:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Load first data byte  */
 202:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_DATA_REG = EZI2Cs_dataPtrS1[EZI2Cs_rwOffsetS1];
  56              		.loc 1 202 0
  57 0024 4F49     		ldr	r1, .L25+20
  58 0026 504E     		ldr	r6, .L25+24
  59 0028 0D78     		ldrb	r5, [r1]	@ zero_extendqisi2
  60 002a 3668     		ldr	r6, [r6]
  61 002c EDB2     		uxtb	r5, r5
  62 002e 755D     		ldrb	r5, [r6, r5]	@ zero_extendqisi2
  63 0030 EDB2     		uxtb	r5, r5
  64 0032 2570     		strb	r5, [r4]
 203:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 204:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* ACK and transmit */
 205:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_CSR_REG = (EZI2Cs_CSR_ACK | EZI2Cs_CSR_TRANSMIT);
  65              		.loc 1 205 0
  66 0034 1424     		movs	r4, #20
  67 0036 1C70     		strb	r4, [r3]
 206:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 207:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Reset pointer to previous offset */
 208:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_rwIndexS1 = EZI2Cs_rwOffsetS1;
  68              		.loc 1 208 0
  69 0038 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
  70 003a 4C49     		ldr	r1, .L25+28
  71 003c E4B2     		uxtb	r4, r4
  72 003e 0C70     		strb	r4, [r1]
 209:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 210:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Advance to data location */
 211:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 ++EZI2Cs_rwIndexS1;
  73              		.loc 1 211 0
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 6


  74 0040 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
  75 0042 0134     		adds	r4, r4, #1
  76 0044 E4B2     		uxtb	r4, r4
  77 0046 0C70     		strb	r4, [r1]
 212:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 213:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Set read busy status */
 214:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_curStatus |= EZI2Cs_STATUS_RD1BUSY;
  78              		.loc 1 214 0
  79 0048 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
  80 004a 41F01101 		orr	r1, r1, #17
  81 004e 1170     		strb	r1, [r2]
 215:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 216:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Prepare for read transaction */
 217:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_curState = EZI2Cs_SM_DEV1_RD_DATA;
  82              		.loc 1 217 0
  83 0050 0822     		movs	r2, #8
  84 0052 3EE0     		b	.L21
  85              	.L3:
 218:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             }
 219:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             else  /* Start of write transfer, reset ptrs, 1st byte is address */
 220:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             {   /* Prepare next operation to write offset */
 221:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 222:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* ACK and ready to receive address */
 223:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
  86              		.loc 1 223 0
  87 0054 1021     		movs	r1, #16
  88 0056 1970     		strb	r1, [r3]
 224:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 225:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Set Write activity */
 226:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_curStatus |= EZI2Cs_STATUS_WR1BUSY;
  89              		.loc 1 226 0
  90 0058 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
  91 005a 41F01201 		orr	r1, r1, #18
  92 005e 1170     		strb	r1, [r2]
 227:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 228:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Prepare for read transaction */
 229:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_curState = EZI2Cs_SM_DEV1_WR_ADDR;
  93              		.loc 1 229 0
  94 0060 0122     		movs	r2, #1
  95 0062 0270     		strb	r2, [r0]
 230:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 231:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Enable interrupt on stop */
 232:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_CFG_REG |= EZI2Cs_CFG_STOP_IE;
  96              		.loc 1 232 0
  97 0064 424A     		ldr	r2, .L25+32
  98 0066 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
  99 0068 41F01001 		orr	r1, r1, #16
 100 006c 4AE0     		b	.L23
 101              	.L2:
 233:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             }
 234:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         #endif  /* (EZI2Cs_ADDRESSES == EZI2Cs_TWO_ADDRESSES) */
 235:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     }
 236:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     else if (EZI2Cs_IS_BIT_SET(tmpCsr, EZI2Cs_CSR_BYTE_COMPLETE))
 102              		.loc 1 236 0
 103 006e E007     		lsls	r0, r4, #31
 104 0070 5DD5     		bpl	.L4
 237:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     {   /* Check for data transfer */
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 7


 238:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 239:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         /* Data transfer state machine */
 240:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         switch (EZI2Cs_curState)
 105              		.loc 1 240 0
 106 0072 3A48     		ldr	r0, .L25+12
 107 0074 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
 108 0076 EDB2     		uxtb	r5, r5
 109 0078 042D     		cmp	r5, #4
 110 007a 15D0     		beq	.L6
 111 007c 082D     		cmp	r5, #8
 112 007e 2AD0     		beq	.L7
 113 0080 012D     		cmp	r5, #1
 114 0082 4ED1     		bne	.L20
 241:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         {
 242:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             /* Address written from Master to Slave. */
 243:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             case EZI2Cs_SM_DEV1_WR_ADDR:
 244:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 245:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* If 8-bit interface, Advance to WR_Data, else to ADDR2 */
 246:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 #if (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_8BIT)
 247:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     tmp8 = EZI2Cs_DATA_REG;
 115              		.loc 1 247 0
 116 0084 344C     		ldr	r4, .L25+8
 248:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     if (tmp8 < EZI2Cs_bufSizeS1)
 117              		.loc 1 248 0
 118 0086 3B4D     		ldr	r5, .L25+36
 247:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     tmp8 = EZI2Cs_DATA_REG;
 119              		.loc 1 247 0
 120 0088 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 121              		.loc 1 248 0
 122 008a 2D88     		ldrh	r5, [r5]
 247:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     tmp8 = EZI2Cs_DATA_REG;
 123              		.loc 1 247 0
 124 008c E4B2     		uxtb	r4, r4
 125              		.loc 1 248 0
 126 008e ADB2     		uxth	r5, r5
 127 0090 AC42     		cmp	r4, r5
 247:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     tmp8 = EZI2Cs_DATA_REG;
 128              		.loc 1 247 0
 129 0092 4C70     		strb	r4, [r1, #1]
 130              		.loc 1 248 0
 131 0094 4AD2     		bcs	.L22
 249:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     {
 250:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* ACK and ready to receive data */
 251:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 132              		.loc 1 251 0
 133 0096 1022     		movs	r2, #16
 134 0098 1A70     		strb	r2, [r3]
 252:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 253:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Set offset to new value */
 254:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_rwOffsetS1 = tmp8;
 135              		.loc 1 254 0
 136 009a 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 137 009c 3149     		ldr	r1, .L25+20
 138 009e 0A70     		strb	r2, [r1]
 255:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 256:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Reset index to offset value */
 257:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_rwIndexS1 = tmp8;
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 8


 139              		.loc 1 257 0
 140 00a0 3249     		ldr	r1, .L25+28
 141 00a2 0A70     		strb	r2, [r1]
 258:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 259:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Prepare for write transaction */
 260:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_curState = EZI2Cs_SM_DEV1_WR_DATA;
 142              		.loc 1 260 0
 143 00a4 0422     		movs	r2, #4
 144 00a6 14E0     		b	.L21
 145              	.L6:
 261:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     }
 262:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     else    /* Out of range, NAK data and don't set offset */
 263:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     {
 264:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* NAK master */
 265:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 266:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     }
 267:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 268:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 #else   /* 16-bit */
 269:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Save MSB of address */
 270:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     tmp16 = EZI2Cs_DATA_REG;
 271:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 272:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* ACK and ready to receive address */
 273:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 274:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 275:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Prepare to get LSB of address */
 276:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curState = EZI2Cs_SM_DEV1_WR_ADDR_LSB;
 277:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 278:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 #endif  /* (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_8BIT) */
 279:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 280:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             break;  /* case EZI2Cs_SM_DEV1_WR_ADDR */
 281:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 282:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             #if (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_16BIT)
 283:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 284:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Only used with 16-bit interface */
 285:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 case EZI2Cs_SM_DEV1_WR_ADDR_LSB:
 286:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 287:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Create offset */
 288:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     tmp16 = (uint16) (tmp16 << EZI2Cs_ADDRESS_LSB_SHIFT) | EZI2Cs_DATA_REG;
 289:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 290:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Check range */
 291:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     if(tmp16 < EZI2Cs_bufSizeS1)
 292:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     {
 293:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* ACK and ready to receive address */
 294:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 295:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 296:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Set offset to new value */
 297:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_rwOffsetS1 = tmp16;
 298:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 299:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Reset index to offset value */
 300:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_rwIndexS1 = tmp16;
 301:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 302:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Prepare for write transaction */
 303:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_curState = EZI2Cs_SM_DEV1_WR_DATA;
 304:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     }
 305:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     else    /* Out of range, NAK data and don't set offset */
 306:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     {
 307:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* NAK master */
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 9


 308:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 309:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     }
 310:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 break; /* case EZI2Cs_SM_DEV1_WR_ADDR_LSB */
 311:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 312:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             #endif  /* (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_16BIT) */
 313:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 314:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 315:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             /* Data written from master to slave. */
 316:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             case EZI2Cs_SM_DEV1_WR_DATA:
 317:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 318:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Check for valid range */
 319:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 if (EZI2Cs_rwIndexS1 < EZI2Cs_wrProtectS1)
 146              		.loc 1 319 0
 147 00a8 3048     		ldr	r0, .L25+28
 148 00aa 334C     		ldr	r4, .L25+40
 149 00ac 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
 150 00ae 2488     		ldrh	r4, [r4]
 151 00b0 A4B2     		uxth	r4, r4
 152 00b2 A542     		cmp	r5, r4
 153 00b4 3AD2     		bcs	.L22
 320:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 {
 321:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Get data, to ACK quickly */
 322:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     tmp8 = EZI2Cs_DATA_REG;
 154              		.loc 1 322 0
 155 00b6 284A     		ldr	r2, .L25+8
 323:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 324:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* ACK and ready to receive sub address */
 325:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 326:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 327:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Write data to array */
 328:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_dataPtrS1[EZI2Cs_rwIndexS1] = tmp8;
 156              		.loc 1 328 0
 157 00b8 2B4C     		ldr	r4, .L25+24
 322:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     tmp8 = EZI2Cs_DATA_REG;
 158              		.loc 1 322 0
 159 00ba 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 160 00bc 4A70     		strb	r2, [r1, #1]
 325:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 161              		.loc 1 325 0
 162 00be 1022     		movs	r2, #16
 163 00c0 1A70     		strb	r2, [r3]
 164              		.loc 1 328 0
 165 00c2 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 166 00c4 2468     		ldr	r4, [r4]
 167 00c6 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 168 00c8 D2B2     		uxtb	r2, r2
 169 00ca A154     		strb	r1, [r4, r2]
 329:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 330:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Increment pointer */
 331:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_rwIndexS1++;
 170              		.loc 1 331 0
 171 00cc 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 172 00ce 0132     		adds	r2, r2, #1
 173 00d0 D2B2     		uxtb	r2, r2
 174              	.L21:
 175 00d2 0270     		strb	r2, [r0]
 176 00d4 2BE0     		b	.L4
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 10


 177              	.L7:
 332:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 }
 333:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 else
 334:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 {
 335:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* NAK cause beyond write area */
 336:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 337:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 }
 338:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             break;  /* EZI2Cs_SM_DEV1_WR_DATA */
 339:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 340:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 341:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             /* Data read by master from slave */
 342:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             case EZI2Cs_SM_DEV1_RD_DATA:
 343:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 344:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Check ACK/NAK */
 345:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 if ((tmpCsr & EZI2Cs_CSR_LRB) == EZI2Cs_CSR_LRB_ACK)
 178              		.loc 1 345 0
 179 00d6 14F0020F 		tst	r4, #2
 180 00da 1F49     		ldr	r1, .L25+8
 181 00dc 18D1     		bne	.L11
 346:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 {
 347:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Check for valid range */
 348:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     if (EZI2Cs_rwIndexS1 < EZI2Cs_bufSizeS1)
 182              		.loc 1 348 0
 183 00de 234A     		ldr	r2, .L25+28
 184 00e0 2448     		ldr	r0, .L25+36
 185 00e2 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 186 00e4 0088     		ldrh	r0, [r0]
 187 00e6 80B2     		uxth	r0, r0
 188 00e8 8442     		cmp	r4, r0
 189 00ea 0DD2     		bcs	.L12
 349:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     {
 350:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Get data from array */
 351:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_DATA_REG = EZI2Cs_dataPtrS1[EZI2Cs_rwIndexS1];
 190              		.loc 1 351 0
 191 00ec 1E4C     		ldr	r4, .L25+24
 192 00ee 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 193 00f0 2468     		ldr	r4, [r4]
 194 00f2 C0B2     		uxtb	r0, r0
 195 00f4 205C     		ldrb	r0, [r4, r0]	@ zero_extendqisi2
 196 00f6 C0B2     		uxtb	r0, r0
 197 00f8 0870     		strb	r0, [r1]
 352:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 353:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Send Data */
 354:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_TRANSMIT;
 198              		.loc 1 354 0
 199 00fa 0421     		movs	r1, #4
 200 00fc 1970     		strb	r1, [r3]
 355:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 356:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Increment pointer */
 357:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         ++EZI2Cs_rwIndexS1;
 201              		.loc 1 357 0
 202 00fe 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 203 0100 0131     		adds	r1, r1, #1
 204 0102 C9B2     		uxtb	r1, r1
 205              	.L23:
 206 0104 1170     		strb	r1, [r2]
 207 0106 12E0     		b	.L4
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 11


 208              	.L12:
 358:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     }
 359:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     else    /* No valid range */
 360:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     {
 361:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Out of range send FFs */
 362:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_DATA_REG = EZI2Cs_DUMMY_DATA;
 209              		.loc 1 362 0
 210 0108 FF22     		movs	r2, #255
 211 010a 0A70     		strb	r2, [r1]
 363:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 364:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Send Data */
 365:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_TRANSMIT;
 212              		.loc 1 365 0
 213 010c 0422     		movs	r2, #4
 214 010e 0DE0     		b	.L22
 215              	.L11:
 366:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     }
 367:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 }
 368:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 else    /* Data was NAKed */
 369:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 {
 370:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Send dummy data at the end of read transaction */
 371:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_DATA_REG = EZI2Cs_DUMMY_DATA;
 216              		.loc 1 371 0
 217 0110 FF24     		movs	r4, #255
 218 0112 0C70     		strb	r4, [r1]
 372:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 373:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Clear transmit bit at the end of read transaction */
 374:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 375:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 376:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Clear Busy Flag */
 377:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curStatus &= ((uint8) ~EZI2Cs_STATUS_BUSY);
 219              		.loc 1 377 0
 220 0114 1249     		ldr	r1, .L25+16
 374:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 221              		.loc 1 374 0
 222 0116 1A70     		strb	r2, [r3]
 223              		.loc 1 377 0
 224 0118 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 225 011a 04F0EF04 		and	r4, r4, #239
 226 011e 0C70     		strb	r4, [r1]
 227 0120 D7E7     		b	.L21
 228              	.L20:
 378:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 379:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Error or Stop, reset state */
 380:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     EZI2Cs_curState = EZI2Cs_SM_IDLE;
 381:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 382:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 }
 383:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             break;  /* EZI2Cs_SM_DEV1_RD_DATA */
 384:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 385:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             /* Second Device Address */
 386:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             #if (EZI2Cs_ADDRESSES == EZI2Cs_TWO_ADDRESSES)
 387:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 388:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 case EZI2Cs_SM_DEV2_WR_ADDR:
 389:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 390:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* If 8-bit interface, Advance to WR_Data, else to ADDR2 */
 391:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     #if (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_8BIT)
 392:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 12


 393:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         tmp8 = EZI2Cs_DATA_REG;
 394:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         if (tmp8 < EZI2Cs_bufSizeS2)
 395:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         {
 396:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* ACK and ready to receive address */
 397:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 398:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 399:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Set offset to new value */
 400:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_rwOffsetS2 = tmp8;
 401:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 402:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Reset index to offset value */
 403:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_rwIndexS2 = tmp8;
 404:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 405:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Prepare for write transaction */
 406:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_curState = EZI2Cs_SM_DEV2_WR_DATA;
 407:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         }
 408:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         else    /* Out of range, NAK data and don't set offset */
 409:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         {
 410:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* NAK master */
 411:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 412:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         }
 413:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     #else
 414:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Save LSB of address */
 415:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         tmp16 = EZI2Cs_DATA_REG;
 416:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 417:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* ACK and ready to receive address */
 418:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 419:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 420:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Prepare to get LSB of address */
 421:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_curState = EZI2Cs_SM_DEV2_WR_ADDR_LSB;
 422:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     #endif  /* (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_8BIT) */
 423:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 424:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 break;  /* EZI2Cs_SM_DEV2_WR_ADDR */
 425:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 426:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 #if (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_16BIT)
 427:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 428:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Only used with 16-bit interface */
 429:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     case EZI2Cs_SM_DEV2_WR_ADDR_LSB:
 430:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Create offset */
 431:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         tmp16 = (uint16) (tmp16 << 8u) | EZI2Cs_DATA_REG;
 432:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         if (tmp16 < EZI2Cs_bufSizeS2)
 433:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         {
 434:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* ACK and ready to receive address */
 435:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 436:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 437:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Set offset to new value */
 438:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_rwOffsetS2 = tmp16;
 439:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 440:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Reset index to offset value */
 441:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_rwIndexS2 = tmp16;
 442:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 443:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Prepare for write transaction */
 444:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_curState = EZI2Cs_SM_DEV2_WR_DATA;
 445:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         }
 446:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         else    /* Out of range, NAK data and don't set offset */
 447:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         {
 448:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* NAK master */
 449:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 13


 450:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         }
 451:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         break; /* EZI2Cs_SM_DEV2_WR_ADDR_LSB */
 452:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 453:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 #endif   /* (EZI2Cs_SUBADDR_WIDTH == EZI2Cs_SUBADDR_16BIT) */
 454:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 455:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 456:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Data written from master to slave. */
 457:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 case EZI2Cs_SM_DEV2_WR_DATA:
 458:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 459:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Check for valid range */
 460:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     if (EZI2Cs_rwIndexS2 < EZI2Cs_wrProtectS2)
 461:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     {
 462:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Get data, to ACK quickly */
 463:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         tmp8 = EZI2Cs_DATA_REG;
 464:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 465:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* ACK and ready to receive sub address */
 466:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_ACK;
 467:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 468:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Write data to array */
 469:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_dataPtrS2[EZI2Cs_rwIndexS2] = tmp8;
 470:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 471:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* Inc pointer */
 472:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         ++EZI2Cs_rwIndexS2;
 473:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     }
 474:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     else
 475:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     {
 476:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         /* NAK cause beyond write area */
 477:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 478:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     }
 479:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     break;  /* EZI2Cs_SM_DEV2_WR_DATA */
 480:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 481:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     /* Data read by master from slave */
 482:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                     case EZI2Cs_SM_DEV2_RD_DATA:
 483:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 484:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         if ((tmpCsr & EZI2Cs_CSR_LRB) == EZI2Cs_CSR_LRB_ACK)
 485:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         {   /* ACKed */
 486:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Check for valid range */
 487:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             if (EZI2Cs_rwIndexS2 < EZI2Cs_bufSizeS2)
 488:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             {   /* Check ACK/NAK */
 489:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 /* Get data from array */
 490:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 EZI2Cs_DATA_REG = EZI2Cs_dataPtrS2[EZI2Cs_rwIndexS2];
 491:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 492:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 /* Send Data */
 493:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 EZI2Cs_CSR_REG = EZI2Cs_CSR_TRANSMIT;
 494:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 495:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 /* Increment pointer */
 496:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 EZI2Cs_rwIndexS2++;
 497:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             }
 498:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             else    /* Not valid range */
 499:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             {
 500:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 /* Out of range send FFs */
 501:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 EZI2Cs_DATA_REG = EZI2Cs_DUMMY_DATA;
 502:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 503:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 /* Send Data */
 504:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                                 EZI2Cs_CSR_REG = EZI2Cs_CSR_TRANSMIT;
 505:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             }
 506:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         }
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 14


 507:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         else    /* NAKed */
 508:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         {
 509:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Out of range send FFs */
 510:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_DATA_REG = EZI2Cs_DUMMY_DATA;
 511:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 512:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Send Data */
 513:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_CSR_REG = EZI2Cs_CSR_TRANSMIT;
 514:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 515:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Clear busy status */
 516:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_curStatus &= ((uint8) ~EZI2Cs_STATUS_BUSY);
 517:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 518:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             /* Error or Stop, reset state */
 519:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                             EZI2Cs_curState = EZI2Cs_SM_IDLE;
 520:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         }   /* End if ACK/NAK */
 521:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 522:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                         break;  /* EZI2Cs_SM_DEV2_RD_DATA */
 523:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 524:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             #endif  /* (EZI2Cs_ADDRESSES == EZI2Cs_TWO_ADDRESSES) */
 525:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 526:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****             default:
 527:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Invalid state, reset state to idle */
 528:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_curState = EZI2Cs_SM_IDLE;
 529:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 530:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Reset offsets and index */
 531:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_rwOffsetS1 = 0u;
 229              		.loc 1 531 0
 230 0122 1049     		ldr	r1, .L25+20
 528:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_curState = EZI2Cs_SM_IDLE;
 231              		.loc 1 528 0
 232 0124 0270     		strb	r2, [r0]
 233              		.loc 1 531 0
 234 0126 0A70     		strb	r2, [r1]
 532:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_rwIndexS1  = 0u;
 235              		.loc 1 532 0
 236 0128 1049     		ldr	r1, .L25+28
 237 012a 0A70     		strb	r2, [r1]
 238              	.L22:
 533:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 534:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 /* Dummy NAK to release bus */
 535:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 EZI2Cs_CSR_REG = EZI2Cs_CSR_NAK;
 239              		.loc 1 535 0
 240 012c 1A70     		strb	r2, [r3]
 241              	.L4:
 536:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****                 break;
 537:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 538:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         }  /* End switch/case EZI2Cs_curState */
 539:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     }
 540:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     else
 541:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     {
 542:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         /* Intentional blank line */
 543:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     }
 544:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 545:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     /* Check if Stop was detected */
 546:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     if (EZI2Cs_IS_BIT_SET(EZI2Cs_CSR_REG, EZI2Cs_CSR_STOP_STATUS))
 242              		.loc 1 546 0
 243 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 244 0130 9B06     		lsls	r3, r3, #26
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 15


 245 0132 0CD5     		bpl	.L1
 547:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****     {
 548:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         /* Clear Busy flag */
 549:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         EZI2Cs_curStatus &= ((uint8) ~EZI2Cs_STATUS_BUSY);
 246              		.loc 1 549 0
 247 0134 0A4B     		ldr	r3, .L25+16
 248 0136 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 249 0138 02F0EF02 		and	r2, r2, #239
 250 013c 1A70     		strb	r2, [r3]
 550:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 551:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         /* error or stop - reset state */
 552:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         EZI2Cs_curState = EZI2Cs_SM_IDLE;
 251              		.loc 1 552 0
 252 013e 074B     		ldr	r3, .L25+12
 253 0140 0022     		movs	r2, #0
 254 0142 1A70     		strb	r2, [r3]
 553:.\Generated_Source\PSoC5/EZI2Cs_INT.c **** 
 554:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         /* Disable interrupt on Stop */
 555:.\Generated_Source\PSoC5/EZI2Cs_INT.c ****         EZI2Cs_CFG_REG &= ((uint8) ~EZI2Cs_CFG_STOP_IE);
 255              		.loc 1 555 0
 256 0144 0A4B     		ldr	r3, .L25+32
 257 0146 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 258 0148 02F0EF02 		and	r2, r2, #239
 259 014c 1A70     		strb	r2, [r3]
 260              	.L1:
 261 014e 70BD     		pop	{r4, r5, r6, pc}
 262              	.L26:
 263              		.align	2
 264              	.L25:
 265 0150 D7490040 		.word	1073760727
 266 0154 00000000 		.word	.LANCHOR0
 267 0158 D8490040 		.word	1073760728
 268 015c 00000000 		.word	EZI2Cs_curState
 269 0160 00000000 		.word	EZI2Cs_curStatus
 270 0164 00000000 		.word	EZI2Cs_rwOffsetS1
 271 0168 00000000 		.word	EZI2Cs_dataPtrS1
 272 016c 00000000 		.word	EZI2Cs_rwIndexS1
 273 0170 D6490040 		.word	1073760726
 274 0174 00000000 		.word	EZI2Cs_bufSizeS1
 275 0178 00000000 		.word	EZI2Cs_wrProtectS1
 276              		.cfi_endproc
 277              	.LFE0:
 278              		.size	EZI2Cs_ISR, .-EZI2Cs_ISR
 279              		.bss
 280              		.set	.LANCHOR0,. + 0
 281              		.type	tmpCsr.4853, %object
 282              		.size	tmpCsr.4853, 1
 283              	tmpCsr.4853:
 284 0000 00       		.space	1
 285              		.type	tmp8.4852, %object
 286              		.size	tmp8.4852, 1
 287              	tmp8.4852:
 288 0001 00       		.space	1
 289              		.text
 290              	.Letext0:
 291              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 292              		.file 3 ".\\Generated_Source\\PSoC5\\EZI2Cs_PVT.h"
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 16


 293              		.section	.debug_info,"",%progbits
 294              	.Ldebug_info0:
 295 0000 3B010000 		.4byte	0x13b
 296 0004 0400     		.2byte	0x4
 297 0006 00000000 		.4byte	.Ldebug_abbrev0
 298 000a 04       		.byte	0x4
 299 000b 01       		.uleb128 0x1
 300 000c 94000000 		.4byte	.LASF25
 301 0010 01       		.byte	0x1
 302 0011 A9010000 		.4byte	.LASF26
 303 0015 22010000 		.4byte	.LASF27
 304 0019 00000000 		.4byte	.Ldebug_ranges0+0
 305 001d 00000000 		.4byte	0
 306 0021 00000000 		.4byte	.Ldebug_line0
 307 0025 02       		.uleb128 0x2
 308 0026 01       		.byte	0x1
 309 0027 06       		.byte	0x6
 310 0028 E2010000 		.4byte	.LASF0
 311 002c 02       		.uleb128 0x2
 312 002d 01       		.byte	0x1
 313 002e 08       		.byte	0x8
 314 002f 70010000 		.4byte	.LASF1
 315 0033 02       		.uleb128 0x2
 316 0034 02       		.byte	0x2
 317 0035 05       		.byte	0x5
 318 0036 05020000 		.4byte	.LASF2
 319 003a 02       		.uleb128 0x2
 320 003b 02       		.byte	0x2
 321 003c 07       		.byte	0x7
 322 003d CF010000 		.4byte	.LASF3
 323 0041 02       		.uleb128 0x2
 324 0042 04       		.byte	0x4
 325 0043 05       		.byte	0x5
 326 0044 94010000 		.4byte	.LASF4
 327 0048 02       		.uleb128 0x2
 328 0049 04       		.byte	0x4
 329 004a 07       		.byte	0x7
 330 004b 6B000000 		.4byte	.LASF5
 331 004f 02       		.uleb128 0x2
 332 0050 08       		.byte	0x8
 333 0051 05       		.byte	0x5
 334 0052 00000000 		.4byte	.LASF6
 335 0056 02       		.uleb128 0x2
 336 0057 08       		.byte	0x8
 337 0058 07       		.byte	0x7
 338 0059 7D000000 		.4byte	.LASF7
 339 005d 03       		.uleb128 0x3
 340 005e 04       		.byte	0x4
 341 005f 05       		.byte	0x5
 342 0060 696E7400 		.ascii	"int\000"
 343 0064 02       		.uleb128 0x2
 344 0065 04       		.byte	0x4
 345 0066 07       		.byte	0x7
 346 0067 1E000000 		.4byte	.LASF8
 347 006b 04       		.uleb128 0x4
 348 006c 65000000 		.4byte	.LASF9
 349 0070 02       		.byte	0x2
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 17


 350 0071 B3       		.byte	0xb3
 351 0072 2C000000 		.4byte	0x2c
 352 0076 04       		.uleb128 0x4
 353 0077 0F020000 		.4byte	.LASF10
 354 007b 02       		.byte	0x2
 355 007c B4       		.byte	0xb4
 356 007d 3A000000 		.4byte	0x3a
 357 0081 02       		.uleb128 0x2
 358 0082 04       		.byte	0x4
 359 0083 04       		.byte	0x4
 360 0084 EE010000 		.4byte	.LASF11
 361 0088 02       		.uleb128 0x2
 362 0089 08       		.byte	0x8
 363 008a 04       		.byte	0x4
 364 008b A2010000 		.4byte	.LASF12
 365 008f 02       		.uleb128 0x2
 366 0090 01       		.byte	0x1
 367 0091 08       		.byte	0x8
 368 0092 7E010000 		.4byte	.LASF13
 369 0096 05       		.uleb128 0x5
 370 0097 9D010000 		.4byte	.LASF14
 371 009b 02       		.byte	0x2
 372 009c 5D01     		.2byte	0x15d
 373 009e A2000000 		.4byte	0xa2
 374 00a2 06       		.uleb128 0x6
 375 00a3 6B000000 		.4byte	0x6b
 376 00a7 06       		.uleb128 0x6
 377 00a8 76000000 		.4byte	0x76
 378 00ac 02       		.uleb128 0x2
 379 00ad 04       		.byte	0x4
 380 00ae 07       		.byte	0x7
 381 00af 21020000 		.4byte	.LASF15
 382 00b3 07       		.uleb128 0x7
 383 00b4 16020000 		.4byte	.LASF28
 384 00b8 01       		.byte	0x1
 385 00b9 56       		.byte	0x56
 386 00ba 00000000 		.4byte	.LFB0
 387 00be 7C010000 		.4byte	.LFE0-.LFB0
 388 00c2 01       		.uleb128 0x1
 389 00c3 9C       		.byte	0x9c
 390 00c4 EB000000 		.4byte	0xeb
 391 00c8 08       		.uleb128 0x8
 392 00c9 60000000 		.4byte	.LASF16
 393 00cd 01       		.byte	0x1
 394 00ce 58       		.byte	0x58
 395 00cf 6B000000 		.4byte	0x6b
 396 00d3 05       		.uleb128 0x5
 397 00d4 03       		.byte	0x3
 398 00d5 01000000 		.4byte	tmp8.4852
 399 00d9 08       		.uleb128 0x8
 400 00da 2A020000 		.4byte	.LASF17
 401 00de 01       		.byte	0x1
 402 00df 59       		.byte	0x59
 403 00e0 6B000000 		.4byte	0x6b
 404 00e4 05       		.uleb128 0x5
 405 00e5 03       		.byte	0x3
 406 00e6 00000000 		.4byte	tmpCsr.4853
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 18


 407 00ea 00       		.byte	0
 408 00eb 09       		.uleb128 0x9
 409 00ec 4F000000 		.4byte	.LASF18
 410 00f0 03       		.byte	0x3
 411 00f1 1D       		.byte	0x1d
 412 00f2 A2000000 		.4byte	0xa2
 413 00f6 09       		.uleb128 0x9
 414 00f7 0E000000 		.4byte	.LASF19
 415 00fb 03       		.byte	0x3
 416 00fc 1E       		.byte	0x1e
 417 00fd A2000000 		.4byte	0xa2
 418 0101 09       		.uleb128 0x9
 419 0102 F4010000 		.4byte	.LASF20
 420 0106 03       		.byte	0x3
 421 0107 21       		.byte	0x21
 422 0108 0C010000 		.4byte	0x10c
 423 010c 0A       		.uleb128 0xa
 424 010d 04       		.byte	0x4
 425 010e A2000000 		.4byte	0xa2
 426 0112 09       		.uleb128 0x9
 427 0113 83010000 		.4byte	.LASF21
 428 0117 03       		.byte	0x3
 429 0118 22       		.byte	0x22
 430 0119 A7000000 		.4byte	0xa7
 431 011d 09       		.uleb128 0x9
 432 011e 3C000000 		.4byte	.LASF22
 433 0122 03       		.byte	0x3
 434 0123 23       		.byte	0x23
 435 0124 A7000000 		.4byte	0xa7
 436 0128 09       		.uleb128 0x9
 437 0129 10010000 		.4byte	.LASF23
 438 012d 03       		.byte	0x3
 439 012e 24       		.byte	0x24
 440 012f A2000000 		.4byte	0xa2
 441 0133 09       		.uleb128 0x9
 442 0134 2B000000 		.4byte	.LASF24
 443 0138 03       		.byte	0x3
 444 0139 25       		.byte	0x25
 445 013a A2000000 		.4byte	0xa2
 446 013e 00       		.byte	0
 447              		.section	.debug_abbrev,"",%progbits
 448              	.Ldebug_abbrev0:
 449 0000 01       		.uleb128 0x1
 450 0001 11       		.uleb128 0x11
 451 0002 01       		.byte	0x1
 452 0003 25       		.uleb128 0x25
 453 0004 0E       		.uleb128 0xe
 454 0005 13       		.uleb128 0x13
 455 0006 0B       		.uleb128 0xb
 456 0007 03       		.uleb128 0x3
 457 0008 0E       		.uleb128 0xe
 458 0009 1B       		.uleb128 0x1b
 459 000a 0E       		.uleb128 0xe
 460 000b 55       		.uleb128 0x55
 461 000c 17       		.uleb128 0x17
 462 000d 11       		.uleb128 0x11
 463 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 19


 464 000f 10       		.uleb128 0x10
 465 0010 17       		.uleb128 0x17
 466 0011 00       		.byte	0
 467 0012 00       		.byte	0
 468 0013 02       		.uleb128 0x2
 469 0014 24       		.uleb128 0x24
 470 0015 00       		.byte	0
 471 0016 0B       		.uleb128 0xb
 472 0017 0B       		.uleb128 0xb
 473 0018 3E       		.uleb128 0x3e
 474 0019 0B       		.uleb128 0xb
 475 001a 03       		.uleb128 0x3
 476 001b 0E       		.uleb128 0xe
 477 001c 00       		.byte	0
 478 001d 00       		.byte	0
 479 001e 03       		.uleb128 0x3
 480 001f 24       		.uleb128 0x24
 481 0020 00       		.byte	0
 482 0021 0B       		.uleb128 0xb
 483 0022 0B       		.uleb128 0xb
 484 0023 3E       		.uleb128 0x3e
 485 0024 0B       		.uleb128 0xb
 486 0025 03       		.uleb128 0x3
 487 0026 08       		.uleb128 0x8
 488 0027 00       		.byte	0
 489 0028 00       		.byte	0
 490 0029 04       		.uleb128 0x4
 491 002a 16       		.uleb128 0x16
 492 002b 00       		.byte	0
 493 002c 03       		.uleb128 0x3
 494 002d 0E       		.uleb128 0xe
 495 002e 3A       		.uleb128 0x3a
 496 002f 0B       		.uleb128 0xb
 497 0030 3B       		.uleb128 0x3b
 498 0031 0B       		.uleb128 0xb
 499 0032 49       		.uleb128 0x49
 500 0033 13       		.uleb128 0x13
 501 0034 00       		.byte	0
 502 0035 00       		.byte	0
 503 0036 05       		.uleb128 0x5
 504 0037 16       		.uleb128 0x16
 505 0038 00       		.byte	0
 506 0039 03       		.uleb128 0x3
 507 003a 0E       		.uleb128 0xe
 508 003b 3A       		.uleb128 0x3a
 509 003c 0B       		.uleb128 0xb
 510 003d 3B       		.uleb128 0x3b
 511 003e 05       		.uleb128 0x5
 512 003f 49       		.uleb128 0x49
 513 0040 13       		.uleb128 0x13
 514 0041 00       		.byte	0
 515 0042 00       		.byte	0
 516 0043 06       		.uleb128 0x6
 517 0044 35       		.uleb128 0x35
 518 0045 00       		.byte	0
 519 0046 49       		.uleb128 0x49
 520 0047 13       		.uleb128 0x13
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 20


 521 0048 00       		.byte	0
 522 0049 00       		.byte	0
 523 004a 07       		.uleb128 0x7
 524 004b 2E       		.uleb128 0x2e
 525 004c 01       		.byte	0x1
 526 004d 3F       		.uleb128 0x3f
 527 004e 19       		.uleb128 0x19
 528 004f 03       		.uleb128 0x3
 529 0050 0E       		.uleb128 0xe
 530 0051 3A       		.uleb128 0x3a
 531 0052 0B       		.uleb128 0xb
 532 0053 3B       		.uleb128 0x3b
 533 0054 0B       		.uleb128 0xb
 534 0055 27       		.uleb128 0x27
 535 0056 19       		.uleb128 0x19
 536 0057 11       		.uleb128 0x11
 537 0058 01       		.uleb128 0x1
 538 0059 12       		.uleb128 0x12
 539 005a 06       		.uleb128 0x6
 540 005b 40       		.uleb128 0x40
 541 005c 18       		.uleb128 0x18
 542 005d 9742     		.uleb128 0x2117
 543 005f 19       		.uleb128 0x19
 544 0060 01       		.uleb128 0x1
 545 0061 13       		.uleb128 0x13
 546 0062 00       		.byte	0
 547 0063 00       		.byte	0
 548 0064 08       		.uleb128 0x8
 549 0065 34       		.uleb128 0x34
 550 0066 00       		.byte	0
 551 0067 03       		.uleb128 0x3
 552 0068 0E       		.uleb128 0xe
 553 0069 3A       		.uleb128 0x3a
 554 006a 0B       		.uleb128 0xb
 555 006b 3B       		.uleb128 0x3b
 556 006c 0B       		.uleb128 0xb
 557 006d 49       		.uleb128 0x49
 558 006e 13       		.uleb128 0x13
 559 006f 02       		.uleb128 0x2
 560 0070 18       		.uleb128 0x18
 561 0071 00       		.byte	0
 562 0072 00       		.byte	0
 563 0073 09       		.uleb128 0x9
 564 0074 34       		.uleb128 0x34
 565 0075 00       		.byte	0
 566 0076 03       		.uleb128 0x3
 567 0077 0E       		.uleb128 0xe
 568 0078 3A       		.uleb128 0x3a
 569 0079 0B       		.uleb128 0xb
 570 007a 3B       		.uleb128 0x3b
 571 007b 0B       		.uleb128 0xb
 572 007c 49       		.uleb128 0x49
 573 007d 13       		.uleb128 0x13
 574 007e 3F       		.uleb128 0x3f
 575 007f 19       		.uleb128 0x19
 576 0080 3C       		.uleb128 0x3c
 577 0081 19       		.uleb128 0x19
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 21


 578 0082 00       		.byte	0
 579 0083 00       		.byte	0
 580 0084 0A       		.uleb128 0xa
 581 0085 0F       		.uleb128 0xf
 582 0086 00       		.byte	0
 583 0087 0B       		.uleb128 0xb
 584 0088 0B       		.uleb128 0xb
 585 0089 49       		.uleb128 0x49
 586 008a 13       		.uleb128 0x13
 587 008b 00       		.byte	0
 588 008c 00       		.byte	0
 589 008d 00       		.byte	0
 590              		.section	.debug_aranges,"",%progbits
 591 0000 1C000000 		.4byte	0x1c
 592 0004 0200     		.2byte	0x2
 593 0006 00000000 		.4byte	.Ldebug_info0
 594 000a 04       		.byte	0x4
 595 000b 00       		.byte	0
 596 000c 0000     		.2byte	0
 597 000e 0000     		.2byte	0
 598 0010 00000000 		.4byte	.LFB0
 599 0014 7C010000 		.4byte	.LFE0-.LFB0
 600 0018 00000000 		.4byte	0
 601 001c 00000000 		.4byte	0
 602              		.section	.debug_ranges,"",%progbits
 603              	.Ldebug_ranges0:
 604 0000 00000000 		.4byte	.LFB0
 605 0004 7C010000 		.4byte	.LFE0
 606 0008 00000000 		.4byte	0
 607 000c 00000000 		.4byte	0
 608              		.section	.debug_line,"",%progbits
 609              	.Ldebug_line0:
 610 0000 B7000000 		.section	.debug_str,"MS",%progbits,1
 610      02005900 
 610      00000201 
 610      FB0E0D00 
 610      01010101 
 611              	.LASF6:
 612 0000 6C6F6E67 		.ascii	"long long int\000"
 612      206C6F6E 
 612      6720696E 
 612      7400
 613              	.LASF19:
 614 000e 455A4932 		.ascii	"EZI2Cs_curState\000"
 614      43735F63 
 614      75725374 
 614      61746500 
 615              	.LASF8:
 616 001e 756E7369 		.ascii	"unsigned int\000"
 616      676E6564 
 616      20696E74 
 616      00
 617              	.LASF24:
 618 002b 455A4932 		.ascii	"EZI2Cs_rwIndexS1\000"
 618      43735F72 
 618      77496E64 
 618      65785331 
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 22


 618      00
 619              	.LASF22:
 620 003c 455A4932 		.ascii	"EZI2Cs_wrProtectS1\000"
 620      43735F77 
 620      7250726F 
 620      74656374 
 620      533100
 621              	.LASF18:
 622 004f 455A4932 		.ascii	"EZI2Cs_curStatus\000"
 622      43735F63 
 622      75725374 
 622      61747573 
 622      00
 623              	.LASF16:
 624 0060 746D7038 		.ascii	"tmp8\000"
 624      00
 625              	.LASF9:
 626 0065 75696E74 		.ascii	"uint8\000"
 626      3800
 627              	.LASF5:
 628 006b 6C6F6E67 		.ascii	"long unsigned int\000"
 628      20756E73 
 628      69676E65 
 628      6420696E 
 628      7400
 629              	.LASF7:
 630 007d 6C6F6E67 		.ascii	"long long unsigned int\000"
 630      206C6F6E 
 630      6720756E 
 630      7369676E 
 630      65642069 
 631              	.LASF25:
 632 0094 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 632      4320342E 
 632      382E3420 
 632      32303134 
 632      30353236 
 633 00c7 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m3 -mthumb -g -O"
 633      20726576 
 633      6973696F 
 633      6E203231 
 633      31333538 
 634 00fa 73202D66 		.ascii	"s -ffunction-sections\000"
 634      66756E63 
 634      74696F6E 
 634      2D736563 
 634      74696F6E 
 635              	.LASF23:
 636 0110 455A4932 		.ascii	"EZI2Cs_rwOffsetS1\000"
 636      43735F72 
 636      774F6666 
 636      73657453 
 636      3100
 637              	.LASF27:
 638 0122 433A5C55 		.ascii	"C:\\Users\\Yiquing\\Documents\\works\\NanoNXT\\f2f "
 638      73657273 
 638      5C596971 
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 23


 638      75696E67 
 638      5C446F63 
 639 014f 74657374 		.ascii	"testing\\3.2.0\\nanoNxt_ICM3.cydsn\000"
 639      696E675C 
 639      332E322E 
 639      305C6E61 
 639      6E6F4E78 
 640              	.LASF1:
 641 0170 756E7369 		.ascii	"unsigned char\000"
 641      676E6564 
 641      20636861 
 641      7200
 642              	.LASF13:
 643 017e 63686172 		.ascii	"char\000"
 643      00
 644              	.LASF21:
 645 0183 455A4932 		.ascii	"EZI2Cs_bufSizeS1\000"
 645      43735F62 
 645      75665369 
 645      7A655331 
 645      00
 646              	.LASF4:
 647 0194 6C6F6E67 		.ascii	"long int\000"
 647      20696E74 
 647      00
 648              	.LASF14:
 649 019d 72656738 		.ascii	"reg8\000"
 649      00
 650              	.LASF12:
 651 01a2 646F7562 		.ascii	"double\000"
 651      6C6500
 652              	.LASF26:
 653 01a9 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\EZI2Cs_INT.c\000"
 653      6E657261 
 653      7465645F 
 653      536F7572 
 653      63655C50 
 654              	.LASF3:
 655 01cf 73686F72 		.ascii	"short unsigned int\000"
 655      7420756E 
 655      7369676E 
 655      65642069 
 655      6E7400
 656              	.LASF0:
 657 01e2 7369676E 		.ascii	"signed char\000"
 657      65642063 
 657      68617200 
 658              	.LASF11:
 659 01ee 666C6F61 		.ascii	"float\000"
 659      7400
 660              	.LASF20:
 661 01f4 455A4932 		.ascii	"EZI2Cs_dataPtrS1\000"
 661      43735F64 
 661      61746150 
 661      74725331 
 661      00
 662              	.LASF2:
ARM GAS  C:\Users\Yiquing\AppData\Local\Temp\ccbuybwa.s 			page 24


 663 0205 73686F72 		.ascii	"short int\000"
 663      7420696E 
 663      7400
 664              	.LASF10:
 665 020f 75696E74 		.ascii	"uint16\000"
 665      313600
 666              	.LASF28:
 667 0216 455A4932 		.ascii	"EZI2Cs_ISR\000"
 667      43735F49 
 667      535200
 668              	.LASF15:
 669 0221 73697A65 		.ascii	"sizetype\000"
 669      74797065 
 669      00
 670              	.LASF17:
 671 022a 746D7043 		.ascii	"tmpCsr\000"
 671      737200
 672              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
