
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\chr6dm_config.o:     file format elf32-littlearm
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\chr6dm_config.o

Disassembly of section .text.getGyroScale:

00000000 <getGyroScale>:
getGyroScale():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:104
float getGyroScale( int channel )
{
	 uint32_t address;
	 fConvert iTof;
	 
	 if( channel == X_GYRO )
   0:	b170      	cbz	r0, 20 <getGyroScale+0x20>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:106
		  address = GYRO_X_SCALE_ADDR;
	 else if( channel == Y_GYRO )
   2:	f24f 021c 	movw	r2, #61468	; 0xf01c
   6:	f24f 0320 	movw	r3, #61472	; 0xf020
   a:	f6c0 0200 	movt	r2, #2048	; 0x800
   e:	f6c0 0300 	movt	r3, #2048	; 0x800
  12:	2801      	cmp	r0, #1
  14:	bf0c      	ite	eq
  16:	4610      	moveq	r0, r2
  18:	4618      	movne	r0, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:111
		  address = GYRO_Y_SCALE_ADDR;
	 else
		  address = GYRO_Z_SCALE_ADDR;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(address));
  1a:	6803      	ldr	r3, [r0, #0]
  1c:	4618      	mov	r0, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:114
	 
	 return iTof.float_val;	 
}
  1e:	4770      	bx	lr
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:104
float getGyroScale( int channel )
{
	 uint32_t address;
	 fConvert iTof;
	 
	 if( channel == X_GYRO )
  20:	f24f 0018 	movw	r0, #61464	; 0xf018
  24:	f6c0 0000 	movt	r0, #2048	; 0x800
  28:	e7f7      	b.n	1a <getGyroScale+0x1a>
  2a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.getProcessCovariance:

00000000 <getProcessCovariance>:
getProcessCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:128
*******************************************************************************/
float getProcessCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(PROCESS_COV_ADDR));
   0:	f24f 0390 	movw	r3, #61584	; 0xf090
   4:	f6c0 0300 	movt	r3, #2048	; 0x800
   8:	681a      	ldr	r2, [r3, #0]
   a:	4610      	mov	r0, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:131
	 
	 return iTof.float_val;
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.getAccelCovariance:

00000000 <getAccelCovariance>:
getAccelCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:145
*******************************************************************************/
float getAccelCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(ACCEL_COV_ADDR));
   0:	f24f 0398 	movw	r3, #61592	; 0xf098
   4:	f6c0 0300 	movt	r3, #2048	; 0x800
   8:	681a      	ldr	r2, [r3, #0]
   a:	4610      	mov	r0, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:148
	 
	 return iTof.float_val;
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.getMagCovariance:

00000000 <getMagCovariance>:
getMagCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:162
*******************************************************************************/
float getMagCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(MAG_COV_ADDR));
   0:	f24f 0394 	movw	r3, #61588	; 0xf094
   4:	f6c0 0300 	movt	r3, #2048	; 0x800
   8:	681a      	ldr	r2, [r3, #0]
   a:	4610      	mov	r0, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:165
	 
	 return iTof.float_val;
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.getGyroAlignment:

00000000 <getGyroAlignment>:
getGyroAlignment():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:175
* Output         : None
* Return         : None
* Description    : Retrieves the 3x3 gyro alignment correction matrix
*******************************************************************************/
void getGyroAlignment( fmat3x3* matrix )
{
   0:	b470      	push	{r4, r5, r6}
   2:	f24f 0548 	movw	r5, #61512	; 0xf048
   6:	4606      	mov	r6, r0
   8:	f04f 0c00 	mov.w	ip, #0	; 0x0
   c:	f6c0 0500 	movt	r5, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:179
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  10:	ea4f 028c 	mov.w	r2, ip, lsl #2
  14:	ea4f 130c 	mov.w	r3, ip, lsl #4
  18:	1a9b      	subs	r3, r3, r2
  1a:	18f4      	adds	r4, r6, r3
  1c:	4628      	mov	r0, r5
  1e:	2100      	movs	r1, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:183
	 {
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(GYRO_ALIGN_START_ADDR + 4*(3*i+j)));
  20:	f850 3b04 	ldr.w	r3, [r0], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:181
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  24:	3101      	adds	r1, #1
  26:	2903      	cmp	r1, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:185
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(GYRO_ALIGN_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
  28:	f844 3b04 	str.w	r3, [r4], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:181
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  2c:	d1f8      	bne.n	20 <getGyroAlignment+0x20>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:179
void getGyroAlignment( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  2e:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
  32:	350c      	adds	r5, #12
  34:	f1bc 0f03 	cmp.w	ip, #3	; 0x3
  38:	d1ea      	bne.n	10 <getGyroAlignment+0x10>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:188
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(GYRO_ALIGN_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
		  }
	 }	 
}
  3a:	bc70      	pop	{r4, r5, r6}
  3c:	4770      	bx	lr
  3e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.getAccelAlignment:

00000000 <getAccelAlignment>:
getAccelAlignment():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:198
* Output         : None
* Return         : None
* Description    : Retrieves the 3x3 accel alignment correction matrix
*******************************************************************************/
void getAccelAlignment( fmat3x3* matrix )
{
   0:	b470      	push	{r4, r5, r6}
   2:	f24f 0524 	movw	r5, #61476	; 0xf024
   6:	4606      	mov	r6, r0
   8:	f04f 0c00 	mov.w	ip, #0	; 0x0
   c:	f6c0 0500 	movt	r5, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:202
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  10:	ea4f 028c 	mov.w	r2, ip, lsl #2
  14:	ea4f 130c 	mov.w	r3, ip, lsl #4
  18:	1a9b      	subs	r3, r3, r2
  1a:	18f4      	adds	r4, r6, r3
  1c:	4628      	mov	r0, r5
  1e:	2100      	movs	r1, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:206
	 {
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(ACCEL_ALIGN_START_ADDR + 4*(3*i+j)));
  20:	f850 3b04 	ldr.w	r3, [r0], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:204
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  24:	3101      	adds	r1, #1
  26:	2903      	cmp	r1, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:208
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(ACCEL_ALIGN_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
  28:	f844 3b04 	str.w	r3, [r4], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:204
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  2c:	d1f8      	bne.n	20 <getAccelAlignment+0x20>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:202
void getAccelAlignment( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  2e:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
  32:	350c      	adds	r5, #12
  34:	f1bc 0f03 	cmp.w	ip, #3	; 0x3
  38:	d1ea      	bne.n	10 <getAccelAlignment+0x10>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:211
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(ACCEL_ALIGN_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
		  }
	 }	
}
  3a:	bc70      	pop	{r4, r5, r6}
  3c:	4770      	bx	lr
  3e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.getMagCal:

00000000 <getMagCal>:
getMagCal():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:221
* Output         : None
* Return         : None
* Description    : Retrieves the 3x3 mag calibration matrix
*******************************************************************************/
void getMagCal( fmat3x3* matrix )
{
   0:	b470      	push	{r4, r5, r6}
   2:	f24f 056c 	movw	r5, #61548	; 0xf06c
   6:	4606      	mov	r6, r0
   8:	f04f 0c00 	mov.w	ip, #0	; 0x0
   c:	f6c0 0500 	movt	r5, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:225
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  10:	ea4f 028c 	mov.w	r2, ip, lsl #2
  14:	ea4f 130c 	mov.w	r3, ip, lsl #4
  18:	1a9b      	subs	r3, r3, r2
  1a:	18f4      	adds	r4, r6, r3
  1c:	4628      	mov	r0, r5
  1e:	2100      	movs	r1, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:229
	 {
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(MAG_CAL_START_ADDR + 4*(3*i+j)));
  20:	f850 3b04 	ldr.w	r3, [r0], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:227
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  24:	3101      	adds	r1, #1
  26:	2903      	cmp	r1, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:231
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(MAG_CAL_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
  28:	f844 3b04 	str.w	r3, [r4], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:227
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  2c:	d1f8      	bne.n	20 <getMagCal+0x20>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:225
void getMagCal( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  2e:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
  32:	350c      	adds	r5, #12
  34:	f1bc 0f03 	cmp.w	ip, #3	; 0x3
  38:	d1ea      	bne.n	10 <getMagCal+0x10>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:234
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(MAG_CAL_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
		  }
	 }	
}
  3a:	bc70      	pop	{r4, r5, r6}
  3c:	4770      	bx	lr
  3e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.getMagRef:

00000000 <getMagRef>:
getMagRef():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:245
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getMagRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) & 0x0FFFF );
   0:	f24f 029c 	movw	r2, #61596	; 0xf09c
   4:	f6c0 0200 	movt	r2, #2048	; 0x800
   8:	6811      	ldr	r1, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:246
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
   a:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:247
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR2)) & 0x0FFFF );
   c:	f24f 02a0 	movw	r2, #61600	; 0xf0a0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:246
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getMagRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
  10:	0c1b      	lsrs	r3, r3, #16
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:247
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR2)) & 0x0FFFF );
  12:	f6c0 0200 	movt	r2, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:246
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getMagRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
  16:	8043      	strh	r3, [r0, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:247
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR2)) & 0x0FFFF );
  18:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:245
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getMagRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) & 0x0FFFF );
  1a:	8001      	strh	r1, [r0, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:247
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR2)) & 0x0FFFF );
  1c:	8083      	strh	r3, [r0, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:248
}
  1e:	4770      	bx	lr
Disassembly of section .text.getAccelRef:

00000000 <getAccelRef>:
getAccelRef():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:259
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
   0:	f24f 02a4 	movw	r2, #61604	; 0xf0a4
   4:	f6c0 0200 	movt	r2, #2048	; 0x800
   8:	6811      	ldr	r1, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:260
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
   a:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:261
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR2)) & 0x0FFFF );
   c:	f24f 02a8 	movw	r2, #61608	; 0xf0a8
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:260
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
  10:	0c1b      	lsrs	r3, r3, #16
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:261
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR2)) & 0x0FFFF );
  12:	f6c0 0200 	movt	r2, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:260
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
  16:	8043      	strh	r3, [r0, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:261
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR2)) & 0x0FFFF );
  18:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:259
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
  1a:	8001      	strh	r1, [r0, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:261
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR2)) & 0x0FFFF );
  1c:	8083      	strh	r3, [r0, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:262
}
  1e:	4770      	bx	lr
Disassembly of section .text.StartGyroCalibration:

00000000 <StartGyroCalibration>:
StartGyroCalibration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:595
						  obtain an average.  The average will be used as the new
						  zero point.
*******************************************************************************/
void StartGyroCalibration( void )
{
	 gZeroGyroSampleCount = 0;
   0:	f240 0300 	movw	r3, #0	; 0x0
   4:	2100      	movs	r1, #0
   6:	f2c0 0300 	movt	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:596
	 gZeroGyroAverages[0] = 0;
   a:	f240 0200 	movw	r2, #0	; 0x0
   e:	f2c0 0200 	movt	r2, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:595
						  obtain an average.  The average will be used as the new
						  zero point.
*******************************************************************************/
void StartGyroCalibration( void )
{
	 gZeroGyroSampleCount = 0;
  12:	8019      	strh	r1, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:602
	 gZeroGyroAverages[1] = 0;
	 gZeroGyroAverages[2] = 0;

	 // Enable gyro zeroing code.  When zeroing is complete, Timer 2 will be reactivated
	 // if the IMU is in Broadcast Mode.
	 gZeroGyroEnable = 1;
  14:	f240 0300 	movw	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:596
						  zero point.
*******************************************************************************/
void StartGyroCalibration( void )
{
	 gZeroGyroSampleCount = 0;
	 gZeroGyroAverages[0] = 0;
  18:	6011      	str	r1, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:597
	 gZeroGyroAverages[1] = 0;
  1a:	6051      	str	r1, [r2, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:598
	 gZeroGyroAverages[2] = 0;
  1c:	6091      	str	r1, [r2, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:602

	 // Enable gyro zeroing code.  When zeroing is complete, Timer 2 will be reactivated
	 // if the IMU is in Broadcast Mode.
	 gZeroGyroEnable = 1;
  1e:	f2c0 0300 	movt	r3, #0	; 0x0
  22:	f04f 0201 	mov.w	r2, #1	; 0x1
  26:	801a      	strh	r2, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:604
	 
}
  28:	4770      	bx	lr
  2a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ResetToFactory:

00000000 <ResetToFactory>:
ResetToFactory():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:678
void ResetToFactory( void )
{
	 int i, j;
	 
	 // Gyro and accelerometer default biases - these biases are applied to raw data measurements
	 gConfig.x_accel_bias = 0;
   0:	f240 0000 	movw	r0, #0	; 0x0
   4:	f2c0 0000 	movt	r0, #0	; 0x0
   8:	f04f 0300 	mov.w	r3, #0	; 0x0
   c:	8003      	strh	r3, [r0, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:679
	 gConfig.y_accel_bias = 0;
   e:	8043      	strh	r3, [r0, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:680
	 gConfig.z_accel_bias = 0;
  10:	8083      	strh	r3, [r0, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:682
	 
	 gConfig.x_gyro_bias = -122;
  12:	f64f 7386 	movw	r3, #65414	; 0xff86
  16:	8283      	strh	r3, [r0, #20]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:683
	 gConfig.y_gyro_bias = 106;
  18:	f04f 036a 	mov.w	r3, #106	; 0x6a
  1c:	82c3      	strh	r3, [r0, #22]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:684
	 gConfig.z_gyro_bias = 35;
  1e:	f04f 0323 	mov.w	r3, #35	; 0x23
  22:	8303      	strh	r3, [r0, #24]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:686
	 
	 gConfig.x_mag_bias = -20;
  24:	f64f 73ec 	movw	r3, #65516	; 0xffec
  28:	8343      	strh	r3, [r0, #26]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:687
	 gConfig.y_mag_bias = -22;
  2a:	f64f 73ea 	movw	r3, #65514	; 0xffea
  2e:	8383      	strh	r3, [r0, #28]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:688
	 gConfig.z_mag_bias = -9;
  30:	f64f 73f7 	movw	r3, #65527	; 0xfff7
  34:	83c3      	strh	r3, [r0, #30]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:691
	 
	 // Gyro scale factor
	 gConfig.x_gyro_scale = .0181;
  36:	f244 6374 	movw	r3, #18036	; 0x4674
  3a:	f6c3 4394 	movt	r3, #15508	; 0x3c94
  3e:	6083      	str	r3, [r0, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:692
	 gConfig.y_gyro_scale = .0181;
  40:	60c3      	str	r3, [r0, #12]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:693
	 gConfig.z_gyro_scale = .0181;
  42:	6103      	str	r3, [r0, #16]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:699
	 
	 // By default, both accel and magnetometer updates are enabled,
	 // and MAG updates are restricted to yaw angles only
	 gConfig.EKF_config = ACCEL_UPDATE_ENABLED | MAG_UPDATE_ENABLED | MAG_RESTRICTED;
	 
	 gConfig.accel_covariance = 1000;
  44:	f240 0300 	movw	r3, #0	; 0x0
  48:	f2c4 437a 	movt	r3, #17530	; 0x447a
  4c:	6283      	str	r3, [r0, #40]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:701
	 gConfig.mag_covariance = .00001;
	 gConfig.process_covariance = .01;
  4e:	f24d 730a 	movw	r3, #55050	; 0xd70a
  52:	f6c3 4323 	movt	r3, #15395	; 0x3c23
  56:	6243      	str	r3, [r0, #36]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:703
	 
	 gConfig.mag_ref_vector[0] = 255;
  58:	f04f 03ff 	mov.w	r3, #255	; 0xff
  5c:	f8a0 309c 	strh.w	r3, [r0, #156]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:704
	 gConfig.mag_ref_vector[1] = 0;
  60:	f04f 0300 	mov.w	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:697
	 gConfig.y_gyro_scale = .0181;
	 gConfig.z_gyro_scale = .0181;
	 
	 // By default, both accel and magnetometer updates are enabled,
	 // and MAG updates are restricted to yaw angles only
	 gConfig.EKF_config = ACCEL_UPDATE_ENABLED | MAG_UPDATE_ENABLED | MAG_RESTRICTED;
  64:	2207      	movs	r2, #7
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:704
	 gConfig.accel_covariance = 1000;
	 gConfig.mag_covariance = .00001;
	 gConfig.process_covariance = .01;
	 
	 gConfig.mag_ref_vector[0] = 255;
	 gConfig.mag_ref_vector[1] = 0;
  66:	f8a0 309e 	strh.w	r3, [r0, #158]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:705
	 gConfig.mag_ref_vector[2] = 666;
  6a:	f240 239a 	movw	r3, #666	; 0x29a
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:674
* Output         : None
* Return         : None
* Description    : Resets all AHRS settings to factory default.
*******************************************************************************/
void ResetToFactory( void )
{
  6e:	b470      	push	{r4, r5, r6}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:705
	 gConfig.mag_covariance = .00001;
	 gConfig.process_covariance = .01;
	 
	 gConfig.mag_ref_vector[0] = 255;
	 gConfig.mag_ref_vector[1] = 0;
	 gConfig.mag_ref_vector[2] = 666;
  70:	f8a0 30a0 	strh.w	r3, [r0, #160]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:697
	 gConfig.y_gyro_scale = .0181;
	 gConfig.z_gyro_scale = .0181;
	 
	 // By default, both accel and magnetometer updates are enabled,
	 // and MAG updates are restricted to yaw angles only
	 gConfig.EKF_config = ACCEL_UPDATE_ENABLED | MAG_UPDATE_ENABLED | MAG_RESTRICTED;
  74:	f880 2020 	strb.w	r2, [r0, #32]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:707
	 
	 gConfig.mag_ref_vector[0] = 255;
	 gConfig.mag_ref_vector[1] = 0;
	 gConfig.mag_ref_vector[2] = 666;
	 
	 gConfig.accel_ref_vector[0] = 0;
  78:	f04f 0300 	mov.w	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:700
	 // By default, both accel and magnetometer updates are enabled,
	 // and MAG updates are restricted to yaw angles only
	 gConfig.EKF_config = ACCEL_UPDATE_ENABLED | MAG_UPDATE_ENABLED | MAG_RESTRICTED;
	 
	 gConfig.accel_covariance = 1000;
	 gConfig.mag_covariance = .00001;
  7c:	f24c 52ac 	movw	r2, #50604	; 0xc5ac
  80:	f2c3 7227 	movt	r2, #14119	; 0x3727
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:707
	 
	 gConfig.mag_ref_vector[0] = 255;
	 gConfig.mag_ref_vector[1] = 0;
	 gConfig.mag_ref_vector[2] = 666;
	 
	 gConfig.accel_ref_vector[0] = 0;
  84:	f8a0 30a2 	strh.w	r3, [r0, #162]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:708
	 gConfig.accel_ref_vector[1] = 0;
  88:	f8a0 30a4 	strh.w	r3, [r0, #164]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:709
	 gConfig.accel_ref_vector[2] = -6000;
  8c:	f64e 0390 	movw	r3, #59536	; 0xe890
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:700
	 // By default, both accel and magnetometer updates are enabled,
	 // and MAG updates are restricted to yaw angles only
	 gConfig.EKF_config = ACCEL_UPDATE_ENABLED | MAG_UPDATE_ENABLED | MAG_RESTRICTED;
	 
	 gConfig.accel_covariance = 1000;
	 gConfig.mag_covariance = .00001;
  90:	62c2      	str	r2, [r0, #44]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:709
	 gConfig.mag_ref_vector[1] = 0;
	 gConfig.mag_ref_vector[2] = 666;
	 
	 gConfig.accel_ref_vector[0] = 0;
	 gConfig.accel_ref_vector[1] = 0;
	 gConfig.accel_ref_vector[2] = -6000;
  92:	f8a0 30a6 	strh.w	r3, [r0, #166]
  96:	4606      	mov	r6, r0
  98:	4604      	mov	r4, r0
  9a:	2100      	movs	r1, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:723
					 gConfig.gyro_alignment.data[i][j] = 1;
					 gConfig.accel_alignment.data[i][j] = 1;
				}
				else
				{
					 gConfig.gyro_alignment.data[i][j] = 0;
  9c:	f04f 0c00 	mov.w	ip, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:718
	 {
		  for (j = 0; j < 3; j++ )
		  {
				if( i == j )
				{
					 gConfig.gyro_alignment.data[i][j] = 1;
  a0:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:712
	 gConfig.accel_ref_vector[0] = 0;
	 gConfig.accel_ref_vector[1] = 0;
	 gConfig.accel_ref_vector[2] = -6000;
	 
	 // Calibration matrices set to identity be default - (ie. no special calibration is performed)
	 for (i = 0; i < 3; i++ )
  a4:	008a      	lsls	r2, r1, #2
  a6:	010b      	lsls	r3, r1, #4
  a8:	1a9b      	subs	r3, r3, r2
  aa:	3330      	adds	r3, #48
  ac:	18f2      	adds	r2, r6, r3
  ae:	2300      	movs	r3, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:716
	 {
		  for (j = 0; j < 3; j++ )
		  {
				if( i == j )
  b0:	4299      	cmp	r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:718
				{
					 gConfig.gyro_alignment.data[i][j] = 1;
  b2:	bf07      	ittee	eq
  b4:	6325      	streq	r5, [r4, #48]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:719
					 gConfig.accel_alignment.data[i][j] = 1;
  b6:	6565      	streq	r5, [r4, #84]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:723
				}
				else
				{
					 gConfig.gyro_alignment.data[i][j] = 0;
  b8:	f8c2 c000 	strne.w	ip, [r2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:724
					 gConfig.accel_alignment.data[i][j] = 0;
  bc:	f8c2 c024 	strne.w	ip, [r2, #36]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:725
					 gConfig.mag_cal.data[i][j] = 0;
  c0:	bf18      	it	ne
  c2:	f8c2 c048 	strne.w	ip, [r2, #72]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:714
	 gConfig.accel_ref_vector[2] = -6000;
	 
	 // Calibration matrices set to identity be default - (ie. no special calibration is performed)
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  c6:	3301      	adds	r3, #1
  c8:	3204      	adds	r2, #4
  ca:	2b03      	cmp	r3, #3
  cc:	d1f0      	bne.n	16c <getGyroScale+0x16c>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:712
	 gConfig.accel_ref_vector[0] = 0;
	 gConfig.accel_ref_vector[1] = 0;
	 gConfig.accel_ref_vector[2] = -6000;
	 
	 // Calibration matrices set to identity be default - (ie. no special calibration is performed)
	 for (i = 0; i < 3; i++ )
  ce:	3101      	adds	r1, #1
  d0:	3410      	adds	r4, #16
  d2:	2903      	cmp	r1, #3
  d4:	d1e6      	bne.n	160 <getGyroScale+0x160>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:731
				}
		  }
	 }
	 
	 gConfig.mag_cal.data[0][0] = 0.001218163;
	 gConfig.mag_cal.data[1][1] = 0.001197028;
  d6:	f24e 5298 	movw	r2, #58776	; 0xe598
  da:	f6c3 229c 	movt	r2, #15004	; 0x3a9c
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:730
					 gConfig.mag_cal.data[i][j] = 0;
				}
		  }
	 }
	 
	 gConfig.mag_cal.data[0][0] = 0.001218163;
  de:	f64a 23c4 	movw	r3, #43716	; 0xaac4
  e2:	f6c3 239f 	movt	r3, #15007	; 0x3a9f
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:731
	 gConfig.mag_cal.data[1][1] = 0.001197028;
  e6:	f8c0 2088 	str.w	r2, [r0, #136]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:732
	 gConfig.mag_cal.data[2][2] = 0.001296065;
  ea:	f24e 01ba 	movw	r1, #57530	; 0xe0ba
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:751
	 gConfig.psi_enabled = CHANNEL_ENABLED;
	 gConfig.phi_dot_enabled = CHANNEL_ENABLED;
	 gConfig.theta_dot_enabled = CHANNEL_ENABLED;
	 gConfig.psi_dot_enabled = CHANNEL_ENABLED;
	 
	 gConfig.gyro_startup_calibration = 0;
  ee:	2200      	movs	r2, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:730
					 gConfig.mag_cal.data[i][j] = 0;
				}
		  }
	 }
	 
	 gConfig.mag_cal.data[0][0] = 0.001218163;
  f0:	6783      	str	r3, [r0, #120]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:732
	 gConfig.mag_cal.data[1][1] = 0.001197028;
	 gConfig.mag_cal.data[2][2] = 0.001296065;
  f2:	f6c3 21a9 	movt	r1, #15017	; 0x3aa9
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:735
	 
	 // Channel enable/disable flags
	 gConfig.x_accel_enabled = CHANNEL_ENABLED;
  f6:	2301      	movs	r3, #1
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:751
	 gConfig.psi_enabled = CHANNEL_ENABLED;
	 gConfig.phi_dot_enabled = CHANNEL_ENABLED;
	 gConfig.theta_dot_enabled = CHANNEL_ENABLED;
	 gConfig.psi_dot_enabled = CHANNEL_ENABLED;
	 
	 gConfig.gyro_startup_calibration = 0;
  f8:	f880 20b7 	strb.w	r2, [r0, #183]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:755
	 
	 // Broadcast mode or listen mode
	 gConfig.broadcast_enabled = MODE_BROADCAST;
	 gConfig.broadcast_rate = 100;
  fc:	3264      	adds	r2, #100
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:732
		  }
	 }
	 
	 gConfig.mag_cal.data[0][0] = 0.001218163;
	 gConfig.mag_cal.data[1][1] = 0.001197028;
	 gConfig.mag_cal.data[2][2] = 0.001296065;
  fe:	f8c0 1098 	str.w	r1, [r0, #152]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:735
	 
	 // Channel enable/disable flags
	 gConfig.x_accel_enabled = CHANNEL_ENABLED;
 102:	f880 30a8 	strb.w	r3, [r0, #168]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:736
	 gConfig.y_accel_enabled = CHANNEL_ENABLED;
 106:	f880 30a9 	strb.w	r3, [r0, #169]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:737
	 gConfig.z_accel_enabled = CHANNEL_ENABLED;
 10a:	f880 30aa 	strb.w	r3, [r0, #170]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:738
	 gConfig.x_gyro_enabled = CHANNEL_ENABLED;
 10e:	f880 30ab 	strb.w	r3, [r0, #171]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:739
	 gConfig.y_gyro_enabled = CHANNEL_ENABLED;
 112:	f880 30ac 	strb.w	r3, [r0, #172]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:740
	 gConfig.z_gyro_enabled = CHANNEL_ENABLED;
 116:	f880 30ad 	strb.w	r3, [r0, #173]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:741
	 gConfig.x_mag_enabled = CHANNEL_ENABLED;
 11a:	f880 30ae 	strb.w	r3, [r0, #174]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:742
	 gConfig.y_mag_enabled = CHANNEL_ENABLED;
 11e:	f880 30af 	strb.w	r3, [r0, #175]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:743
	 gConfig.z_mag_enabled = CHANNEL_ENABLED;
 122:	f880 30b0 	strb.w	r3, [r0, #176]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:744
	 gConfig.phi_enabled = CHANNEL_ENABLED;
 126:	f880 30b1 	strb.w	r3, [r0, #177]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:745
	 gConfig.theta_enabled = CHANNEL_ENABLED;
 12a:	f880 30b2 	strb.w	r3, [r0, #178]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:746
	 gConfig.psi_enabled = CHANNEL_ENABLED;
 12e:	f880 30b3 	strb.w	r3, [r0, #179]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:747
	 gConfig.phi_dot_enabled = CHANNEL_ENABLED;
 132:	f880 30b4 	strb.w	r3, [r0, #180]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:748
	 gConfig.theta_dot_enabled = CHANNEL_ENABLED;
 136:	f880 30b5 	strb.w	r3, [r0, #181]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:749
	 gConfig.psi_dot_enabled = CHANNEL_ENABLED;
 13a:	f880 30b6 	strb.w	r3, [r0, #182]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:754
	 
	 gConfig.gyro_startup_calibration = 0;
	 
	 // Broadcast mode or listen mode
	 gConfig.broadcast_enabled = MODE_BROADCAST;
 13e:	f880 30b8 	strb.w	r3, [r0, #184]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:755
	 gConfig.broadcast_rate = 100;
 142:	f880 20b9 	strb.w	r2, [r0, #185]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:756
}
 146:	bc70      	pop	{r4, r5, r6}
 148:	4770      	bx	lr
 14a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.GetConfiguration:

00000000 <GetConfiguration>:
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:32
void GetConfiguration( void )
{
	 int i, j;
	 
	 // If flash has not been programmed yet, then use default configuration.  Otherwise, load configuration from flash
	 if( FGET_ACCEL_X_OFFSET() == 0xFFFF )
   0:	f24f 0100 	movw	r1, #61440	; 0xf000
   4:	f6c0 0100 	movt	r1, #2048	; 0x800
   8:	680b      	ldr	r3, [r1, #0]
   a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   e:	b29b      	uxth	r3, r3
  10:	4293      	cmp	r3, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:28
* Description    : Fills the gConfig structure with IMU configuration data.
						  If configuration data has been written to flash, then load it.
						  If not, then use factory defaults.
*******************************************************************************/
void GetConfiguration( void )
{
  12:	b570      	push	{r4, r5, r6, lr}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:32
	 int i, j;
	 
	 // If flash has not been programmed yet, then use default configuration.  Otherwise, load configuration from flash
	 if( FGET_ACCEL_X_OFFSET() == 0xFFFF )
  14:	f000 813b 	beq.w	28e <GetConfiguration+0x28e>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:39
		  ResetToFactory();
	 }
	 else
	 {
		  // Gyro, accelerometer, and magnetometer biases
		  gConfig.x_accel_bias = FGET_ACCEL_X_OFFSET();
  18:	680a      	ldr	r2, [r1, #0]
  1a:	f240 0500 	movw	r5, #0	; 0x0
  1e:	f2c0 0500 	movt	r5, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:40
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
  22:	680b      	ldr	r3, [r1, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:39
		  ResetToFactory();
	 }
	 else
	 {
		  // Gyro, accelerometer, and magnetometer biases
		  gConfig.x_accel_bias = FGET_ACCEL_X_OFFSET();
  24:	802a      	strh	r2, [r5, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:41
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
  26:	f24f 0204 	movw	r2, #61444	; 0xf004
  2a:	f6c0 0200 	movt	r2, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:40
	 }
	 else
	 {
		  // Gyro, accelerometer, and magnetometer biases
		  gConfig.x_accel_bias = FGET_ACCEL_X_OFFSET();
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
  2e:	0c1b      	lsrs	r3, r3, #16
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:41
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
  30:	6811      	ldr	r1, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:40
	 }
	 else
	 {
		  // Gyro, accelerometer, and magnetometer biases
		  gConfig.x_accel_bias = FGET_ACCEL_X_OFFSET();
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
  32:	806b      	strh	r3, [r5, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:42
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
  34:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:43
		  gConfig.y_gyro_bias = FGET_GYRO_Y_OFFSET();
  36:	f24f 0208 	movw	r2, #61448	; 0xf008
  3a:	f6c0 0200 	movt	r2, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:42
	 {
		  // Gyro, accelerometer, and magnetometer biases
		  gConfig.x_accel_bias = FGET_ACCEL_X_OFFSET();
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
  3e:	0c1b      	lsrs	r3, r3, #16
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:41
	 else
	 {
		  // Gyro, accelerometer, and magnetometer biases
		  gConfig.x_accel_bias = FGET_ACCEL_X_OFFSET();
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
  40:	80a9      	strh	r1, [r5, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:42
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
  42:	82ab      	strh	r3, [r5, #20]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:43
		  gConfig.y_gyro_bias = FGET_GYRO_Y_OFFSET();
  44:	6811      	ldr	r1, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:44
		  gConfig.z_gyro_bias = FGET_GYRO_Z_OFFSET();
  46:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:45
		  gConfig.x_mag_bias = FGET_MAG_X_OFFSET();
  48:	f24f 020c 	movw	r2, #61452	; 0xf00c
  4c:	f6c0 0200 	movt	r2, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:44
		  gConfig.x_accel_bias = FGET_ACCEL_X_OFFSET();
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
		  gConfig.y_gyro_bias = FGET_GYRO_Y_OFFSET();
		  gConfig.z_gyro_bias = FGET_GYRO_Z_OFFSET();
  50:	0c1b      	lsrs	r3, r3, #16
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:43
		  // Gyro, accelerometer, and magnetometer biases
		  gConfig.x_accel_bias = FGET_ACCEL_X_OFFSET();
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
		  gConfig.y_gyro_bias = FGET_GYRO_Y_OFFSET();
  52:	82e9      	strh	r1, [r5, #22]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:44
		  gConfig.z_gyro_bias = FGET_GYRO_Z_OFFSET();
  54:	832b      	strh	r3, [r5, #24]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:45
		  gConfig.x_mag_bias = FGET_MAG_X_OFFSET();
  56:	6811      	ldr	r1, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:46
		  gConfig.y_mag_bias = FGET_MAG_Y_OFFSET();
  58:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:47
		  gConfig.z_mag_bias = FGET_MAG_Z_OFFSET();
  5a:	f24f 0210 	movw	r2, #61456	; 0xf010
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:46
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
		  gConfig.y_gyro_bias = FGET_GYRO_Y_OFFSET();
		  gConfig.z_gyro_bias = FGET_GYRO_Z_OFFSET();
		  gConfig.x_mag_bias = FGET_MAG_X_OFFSET();
		  gConfig.y_mag_bias = FGET_MAG_Y_OFFSET();
  5e:	0c1b      	lsrs	r3, r3, #16
  60:	83ab      	strh	r3, [r5, #28]
getGyroScale():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:111
	 else if( channel == Y_GYRO )
		  address = GYRO_Y_SCALE_ADDR;
	 else
		  address = GYRO_Z_SCALE_ADDR;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(address));
  62:	f24f 0318 	movw	r3, #61464	; 0xf018
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:47
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
		  gConfig.y_gyro_bias = FGET_GYRO_Y_OFFSET();
		  gConfig.z_gyro_bias = FGET_GYRO_Z_OFFSET();
		  gConfig.x_mag_bias = FGET_MAG_X_OFFSET();
		  gConfig.y_mag_bias = FGET_MAG_Y_OFFSET();
		  gConfig.z_mag_bias = FGET_MAG_Z_OFFSET();
  66:	f6c0 0200 	movt	r2, #2048	; 0x800
getGyroScale():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:111
	 else if( channel == Y_GYRO )
		  address = GYRO_Y_SCALE_ADDR;
	 else
		  address = GYRO_Z_SCALE_ADDR;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(address));
  6a:	f6c0 0300 	movt	r3, #2048	; 0x800
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:45
		  gConfig.y_accel_bias = FGET_ACCEL_Y_OFFSET();
		  gConfig.z_accel_bias = FGET_ACCEL_Z_OFFSET();
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
		  gConfig.y_gyro_bias = FGET_GYRO_Y_OFFSET();
		  gConfig.z_gyro_bias = FGET_GYRO_Z_OFFSET();
		  gConfig.x_mag_bias = FGET_MAG_X_OFFSET();
  6e:	8369      	strh	r1, [r5, #26]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:47
		  gConfig.y_mag_bias = FGET_MAG_Y_OFFSET();
		  gConfig.z_mag_bias = FGET_MAG_Z_OFFSET();
  70:	6811      	ldr	r1, [r2, #0]
getGyroScale():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:111
	 else if( channel == Y_GYRO )
		  address = GYRO_Y_SCALE_ADDR;
	 else
		  address = GYRO_Z_SCALE_ADDR;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(address));
  72:	681a      	ldr	r2, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:49
		  gConfig.z_gyro_bias = FGET_GYRO_Z_OFFSET();
		  gConfig.x_mag_bias = FGET_MAG_X_OFFSET();
		  gConfig.y_mag_bias = FGET_MAG_Y_OFFSET();
		  gConfig.z_mag_bias = FGET_MAG_Z_OFFSET();
		  
		  gConfig.x_gyro_scale = getGyroScale(X_GYRO);
  74:	f24f 031c 	movw	r3, #61468	; 0xf01c
  78:	f6c0 0300 	movt	r3, #2048	; 0x800
GetConfiguration():
  7c:	60aa      	str	r2, [r5, #8]
getGyroScale():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:111
	 else if( channel == Y_GYRO )
		  address = GYRO_Y_SCALE_ADDR;
	 else
		  address = GYRO_Z_SCALE_ADDR;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(address));
  7e:	681a      	ldr	r2, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:50
		  gConfig.x_mag_bias = FGET_MAG_X_OFFSET();
		  gConfig.y_mag_bias = FGET_MAG_Y_OFFSET();
		  gConfig.z_mag_bias = FGET_MAG_Z_OFFSET();
		  
		  gConfig.x_gyro_scale = getGyroScale(X_GYRO);
		  gConfig.y_gyro_scale = getGyroScale(Y_GYRO);
  80:	f24f 0320 	movw	r3, #61472	; 0xf020
  84:	f6c0 0300 	movt	r3, #2048	; 0x800
GetConfiguration():
  88:	60ea      	str	r2, [r5, #12]
getGyroScale():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:111
	 else if( channel == Y_GYRO )
		  address = GYRO_Y_SCALE_ADDR;
	 else
		  address = GYRO_Z_SCALE_ADDR;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(address));
  8a:	681a      	ldr	r2, [r3, #0]
getProcessCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:128
*******************************************************************************/
float getProcessCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(PROCESS_COV_ADDR));
  8c:	f24f 0390 	movw	r3, #61584	; 0xf090
  90:	f6c0 0300 	movt	r3, #2048	; 0x800
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:51
		  gConfig.y_mag_bias = FGET_MAG_Y_OFFSET();
		  gConfig.z_mag_bias = FGET_MAG_Z_OFFSET();
		  
		  gConfig.x_gyro_scale = getGyroScale(X_GYRO);
		  gConfig.y_gyro_scale = getGyroScale(Y_GYRO);
		  gConfig.z_gyro_scale = getGyroScale(Z_GYRO);
  94:	612a      	str	r2, [r5, #16]
getProcessCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:128
*******************************************************************************/
float getProcessCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(PROCESS_COV_ADDR));
  96:	681a      	ldr	r2, [r3, #0]
getAccelCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:145
*******************************************************************************/
float getAccelCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(ACCEL_COV_ADDR));
  98:	f24f 0398 	movw	r3, #61592	; 0xf098
  9c:	f6c0 0300 	movt	r3, #2048	; 0x800
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:53
		  
		  gConfig.x_gyro_scale = getGyroScale(X_GYRO);
		  gConfig.y_gyro_scale = getGyroScale(Y_GYRO);
		  gConfig.z_gyro_scale = getGyroScale(Z_GYRO);
		  
		  gConfig.process_covariance = getProcessCovariance();
  a0:	626a      	str	r2, [r5, #36]
getAccelCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:145
*******************************************************************************/
float getAccelCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(ACCEL_COV_ADDR));
  a2:	681a      	ldr	r2, [r3, #0]
getMagCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:162
*******************************************************************************/
float getMagCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(MAG_COV_ADDR));
  a4:	f24f 0394 	movw	r3, #61588	; 0xf094
  a8:	f6c0 0300 	movt	r3, #2048	; 0x800
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:54
		  gConfig.x_gyro_scale = getGyroScale(X_GYRO);
		  gConfig.y_gyro_scale = getGyroScale(Y_GYRO);
		  gConfig.z_gyro_scale = getGyroScale(Z_GYRO);
		  
		  gConfig.process_covariance = getProcessCovariance();
		  gConfig.accel_covariance = getAccelCovariance();
  ac:	62aa      	str	r2, [r5, #40]
getMagCovariance():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:162
*******************************************************************************/
float getMagCovariance()
{
	 fConvert iTof;
	 
	 iTof.uint32_val = (uint32_t)(*(__IO uint32_t*)(MAG_COV_ADDR));
  ae:	681a      	ldr	r2, [r3, #0]
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:55
		  gConfig.y_gyro_scale = getGyroScale(Y_GYRO);
		  gConfig.z_gyro_scale = getGyroScale(Z_GYRO);
		  
		  gConfig.process_covariance = getProcessCovariance();
		  gConfig.accel_covariance = getAccelCovariance();
		  gConfig.mag_covariance = getMagCovariance();
  b0:	f24f 0648 	movw	r6, #61512	; 0xf048
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:47
		  gConfig.x_gyro_bias = FGET_GYRO_X_OFFSET();
		  gConfig.y_gyro_bias = FGET_GYRO_Y_OFFSET();
		  gConfig.z_gyro_bias = FGET_GYRO_Z_OFFSET();
		  gConfig.x_mag_bias = FGET_MAG_X_OFFSET();
		  gConfig.y_mag_bias = FGET_MAG_Y_OFFSET();
		  gConfig.z_mag_bias = FGET_MAG_Z_OFFSET();
  b4:	83e9      	strh	r1, [r5, #30]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:55
		  gConfig.y_gyro_scale = getGyroScale(Y_GYRO);
		  gConfig.z_gyro_scale = getGyroScale(Z_GYRO);
		  
		  gConfig.process_covariance = getProcessCovariance();
		  gConfig.accel_covariance = getAccelCovariance();
		  gConfig.mag_covariance = getMagCovariance();
  b6:	62ea      	str	r2, [r5, #44]
  b8:	f04f 0c00 	mov.w	ip, #0	; 0x0
  bc:	f6c0 0600 	movt	r6, #2048	; 0x800
getGyroAlignment():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:179
void getGyroAlignment( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  c0:	ea4f 028c 	mov.w	r2, ip, lsl #2
  c4:	ea4f 130c 	mov.w	r3, ip, lsl #4
  c8:	1a9b      	subs	r3, r3, r2
  ca:	3330      	adds	r3, #48
  cc:	18ec      	adds	r4, r5, r3
  ce:	4630      	mov	r0, r6
  d0:	2100      	movs	r1, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:183
	 {
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(GYRO_ALIGN_START_ADDR + 4*(3*i+j)));
  d2:	f850 3b04 	ldr.w	r3, [r0], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:181
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  d6:	3101      	adds	r1, #1
  d8:	2903      	cmp	r1, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:185
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(GYRO_ALIGN_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
  da:	f844 3b04 	str.w	r3, [r4], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:181
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
  de:	d1f8      	bne.n	d2 <GetConfiguration+0xd2>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:179
void getGyroAlignment( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  e0:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
  e4:	360c      	adds	r6, #12
  e6:	f1bc 0f03 	cmp.w	ip, #3	; 0x3
  ea:	d1e9      	bne.n	c0 <GetConfiguration+0xc0>
  ec:	f24f 0624 	movw	r6, #61476	; 0xf024
  f0:	f1ac 0c03 	sub.w	ip, ip, #3	; 0x3
  f4:	f6c0 0600 	movt	r6, #2048	; 0x800
getAccelAlignment():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:202
void getAccelAlignment( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
  f8:	ea4f 028c 	mov.w	r2, ip, lsl #2
  fc:	ea4f 130c 	mov.w	r3, ip, lsl #4
 100:	1a9b      	subs	r3, r3, r2
 102:	18eb      	adds	r3, r5, r3
 104:	f103 0454 	add.w	r4, r3, #84	; 0x54
 108:	4630      	mov	r0, r6
 10a:	2100      	movs	r1, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:206
	 {
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(ACCEL_ALIGN_START_ADDR + 4*(3*i+j)));
 10c:	f850 3b04 	ldr.w	r3, [r0], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:204
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
 110:	3101      	adds	r1, #1
 112:	2903      	cmp	r1, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:208
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(ACCEL_ALIGN_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
 114:	f844 3b04 	str.w	r3, [r4], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:204
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
 118:	d1f8      	bne.n	10c <GetConfiguration+0x10c>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:202
void getAccelAlignment( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
 11a:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
 11e:	360c      	adds	r6, #12
 120:	f1bc 0f03 	cmp.w	ip, #3	; 0x3
 124:	d1e8      	bne.n	f8 <GetConfiguration+0xf8>
 126:	f24f 066c 	movw	r6, #61548	; 0xf06c
 12a:	f1ac 0c03 	sub.w	ip, ip, #3	; 0x3
 12e:	f6c0 0600 	movt	r6, #2048	; 0x800
getMagCal():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:225
void getMagCal( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
 132:	ea4f 028c 	mov.w	r2, ip, lsl #2
 136:	ea4f 130c 	mov.w	r3, ip, lsl #4
 13a:	1a9b      	subs	r3, r3, r2
 13c:	3378      	adds	r3, #120
 13e:	18ec      	adds	r4, r5, r3
 140:	4630      	mov	r0, r6
 142:	2100      	movs	r1, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:229
	 {
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(MAG_CAL_START_ADDR + 4*(3*i+j)));
 144:	f850 3b04 	ldr.w	r3, [r0], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:227
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
 148:	3101      	adds	r1, #1
 14a:	2903      	cmp	r1, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:231
		  {
				fToInt.uint32_val = (uint32_t)(*(__IO uint32_t*)(MAG_CAL_START_ADDR + 4*(3*i+j)));
				
				matrix->data[i][j] = fToInt.float_val;
 14c:	f844 3b04 	str.w	r3, [r4], #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:227
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
 150:	d1f8      	bne.n	144 <GetConfiguration+0x144>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:225
void getMagCal( fmat3x3* matrix )
{
	 int i, j;
	 fConvert fToInt;
	 
	 for (i = 0; i < 3; i++ )
 152:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
 156:	360c      	adds	r6, #12
 158:	f1bc 0f03 	cmp.w	ip, #3	; 0x3
 15c:	d1e9      	bne.n	132 <GetConfiguration+0x132>
getMagRef():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:245
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getMagRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) & 0x0FFFF );
 15e:	f24f 029c 	movw	r2, #61596	; 0xf09c
 162:	f6c0 0200 	movt	r2, #2048	; 0x800
 166:	6811      	ldr	r1, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:246
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
 168:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:247
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR2)) & 0x0FFFF );
 16a:	f24f 02a0 	movw	r2, #61600	; 0xf0a0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:246
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getMagRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
 16e:	0c1b      	lsrs	r3, r3, #16
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:247
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR2)) & 0x0FFFF );
 170:	f6c0 0200 	movt	r2, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:246
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getMagRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
 174:	f8a5 309e 	strh.w	r3, [r5, #158]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:247
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR2)) & 0x0FFFF );
 178:	6813      	ldr	r3, [r2, #0]
getAccelRef():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:259
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
 17a:	f24f 02a4 	movw	r2, #61604	; 0xf0a4
 17e:	f6c0 0200 	movt	r2, #2048	; 0x800
getMagRef():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:245
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getMagRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) & 0x0FFFF );
 182:	f8a5 109c 	strh.w	r1, [r5, #156]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:247
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(MAG_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(MAG_REF_VECT_ADDR2)) & 0x0FFFF );
 186:	f8a5 30a0 	strh.w	r3, [r5, #160]
getAccelRef():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:259
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
 18a:	6811      	ldr	r1, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:260
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
 18c:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:261
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR2)) & 0x0FFFF );
 18e:	f24f 02a8 	movw	r2, #61608	; 0xf0a8
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:260
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
 192:	0c1b      	lsrs	r3, r3, #16
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:261
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR2)) & 0x0FFFF );
 194:	f6c0 0200 	movt	r2, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:259
* Return         : None
* Description    : Retrieves the magnetic field reference vector from flash
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
 198:	f8a5 10a2 	strh.w	r1, [r5, #162]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:260
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
 19c:	f8a5 30a4 	strh.w	r3, [r5, #164]
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:63
		  getAccelAlignment(&gConfig.accel_alignment);
		  getMagCal(&gConfig.mag_cal);
		  getMagRef(gConfig.mag_ref_vector);
		  getAccelRef(gConfig.accel_ref_vector);
		  
		  gConfig.EKF_config = FGET_EKF_CONFIG();
 1a0:	f24f 0114 	movw	r1, #61460	; 0xf014
getAccelRef():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:261
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR2)) & 0x0FFFF );
 1a4:	6813      	ldr	r3, [r2, #0]
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:63
		  getAccelAlignment(&gConfig.accel_alignment);
		  getMagCal(&gConfig.mag_cal);
		  getMagRef(gConfig.mag_ref_vector);
		  getAccelRef(gConfig.accel_ref_vector);
		  
		  gConfig.EKF_config = FGET_EKF_CONFIG();
 1a6:	f6c0 0100 	movt	r1, #2048	; 0x800
getAccelRef():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:261
*******************************************************************************/
void getAccelRef( int16_t* vector )
{
	 vector[0] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) & 0x0FFFF );
	 vector[1] = (int16_t)( ((*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR1)) >> 16) & 0x0FFFF );
	 vector[2] = (int16_t)( (*(__IO uint32_t*)(ACCEL_REF_VECT_ADDR2)) & 0x0FFFF );
 1aa:	f8a5 30a6 	strh.w	r3, [r5, #166]
GetConfiguration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:63
		  getAccelAlignment(&gConfig.accel_alignment);
		  getMagCal(&gConfig.mag_cal);
		  getMagRef(gConfig.mag_ref_vector);
		  getAccelRef(gConfig.accel_ref_vector);
		  
		  gConfig.EKF_config = FGET_EKF_CONFIG();
 1ae:	680b      	ldr	r3, [r1, #0]
 1b0:	0e5b      	lsrs	r3, r3, #25
 1b2:	f003 030f 	and.w	r3, r3, #15	; 0xf
 1b6:	f885 3020 	strb.w	r3, [r5, #32]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:65
		  
		  gConfig.gyro_startup_calibration = IS_STARTUP_CAL_ENABLED();
 1ba:	680a      	ldr	r2, [r1, #0]
 1bc:	0bd2      	lsrs	r2, r2, #15
 1be:	f002 0201 	and.w	r2, r2, #1	; 0x1
 1c2:	f885 20b7 	strb.w	r2, [r5, #183]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:68
		  
		  // Channel enable/disable flags
		  gConfig.x_accel_enabled = IS_ACCEL_X_ENABLED();
 1c6:	680b      	ldr	r3, [r1, #0]
 1c8:	f003 0301 	and.w	r3, r3, #1	; 0x1
 1cc:	f885 30a8 	strb.w	r3, [r5, #168]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:69
		  gConfig.y_accel_enabled = IS_ACCEL_Y_ENABLED();
 1d0:	680a      	ldr	r2, [r1, #0]
 1d2:	0852      	lsrs	r2, r2, #1
 1d4:	f002 0201 	and.w	r2, r2, #1	; 0x1
 1d8:	f885 20a9 	strb.w	r2, [r5, #169]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:70
		  gConfig.z_accel_enabled = IS_ACCEL_Z_ENABLED();
 1dc:	680b      	ldr	r3, [r1, #0]
 1de:	089b      	lsrs	r3, r3, #2
 1e0:	f003 0301 	and.w	r3, r3, #1	; 0x1
 1e4:	f885 30aa 	strb.w	r3, [r5, #170]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:71
		  gConfig.x_gyro_enabled = IS_GYRO_X_ENABLED();
 1e8:	680a      	ldr	r2, [r1, #0]
 1ea:	08d2      	lsrs	r2, r2, #3
 1ec:	f002 0201 	and.w	r2, r2, #1	; 0x1
 1f0:	f885 20ab 	strb.w	r2, [r5, #171]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:72
		  gConfig.y_gyro_enabled = IS_GYRO_Y_ENABLED();
 1f4:	680b      	ldr	r3, [r1, #0]
 1f6:	091b      	lsrs	r3, r3, #4
 1f8:	f003 0301 	and.w	r3, r3, #1	; 0x1
 1fc:	f885 30ac 	strb.w	r3, [r5, #172]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:73
		  gConfig.z_gyro_enabled = IS_GYRO_Z_ENABLED();
 200:	680a      	ldr	r2, [r1, #0]
 202:	0952      	lsrs	r2, r2, #5
 204:	f002 0201 	and.w	r2, r2, #1	; 0x1
 208:	f885 20ad 	strb.w	r2, [r5, #173]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:74
		  gConfig.x_mag_enabled = IS_MAG_X_ENABLED();
 20c:	680b      	ldr	r3, [r1, #0]
 20e:	099b      	lsrs	r3, r3, #6
 210:	f003 0301 	and.w	r3, r3, #1	; 0x1
 214:	f885 30ae 	strb.w	r3, [r5, #174]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:75
		  gConfig.y_mag_enabled = IS_MAG_Y_ENABLED();
 218:	680a      	ldr	r2, [r1, #0]
 21a:	09d2      	lsrs	r2, r2, #7
 21c:	f002 0201 	and.w	r2, r2, #1	; 0x1
 220:	f885 20af 	strb.w	r2, [r5, #175]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:76
		  gConfig.z_mag_enabled = IS_MAG_Z_ENABLED();
 224:	680b      	ldr	r3, [r1, #0]
 226:	0a1b      	lsrs	r3, r3, #8
 228:	f003 0301 	and.w	r3, r3, #1	; 0x1
 22c:	f885 30b0 	strb.w	r3, [r5, #176]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:77
		  gConfig.phi_enabled = IS_PHI_ENABLED();
 230:	680a      	ldr	r2, [r1, #0]
 232:	0a52      	lsrs	r2, r2, #9
 234:	f002 0201 	and.w	r2, r2, #1	; 0x1
 238:	f885 20b1 	strb.w	r2, [r5, #177]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:78
		  gConfig.theta_enabled = IS_THETA_ENABLED();
 23c:	680b      	ldr	r3, [r1, #0]
 23e:	0a9b      	lsrs	r3, r3, #10
 240:	f003 0301 	and.w	r3, r3, #1	; 0x1
 244:	f885 30b2 	strb.w	r3, [r5, #178]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:79
		  gConfig.psi_enabled = IS_PSI_ENABLED();
 248:	680a      	ldr	r2, [r1, #0]
 24a:	0ad2      	lsrs	r2, r2, #11
 24c:	f002 0201 	and.w	r2, r2, #1	; 0x1
 250:	f885 20b3 	strb.w	r2, [r5, #179]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:80
		  gConfig.phi_dot_enabled = IS_PHI_DOT_ENABLED();
 254:	680b      	ldr	r3, [r1, #0]
 256:	0b1b      	lsrs	r3, r3, #12
 258:	f003 0301 	and.w	r3, r3, #1	; 0x1
 25c:	f885 30b4 	strb.w	r3, [r5, #180]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:81
		  gConfig.theta_dot_enabled = IS_THETA_DOT_ENABLED();
 260:	680a      	ldr	r2, [r1, #0]
 262:	0b52      	lsrs	r2, r2, #13
 264:	f002 0201 	and.w	r2, r2, #1	; 0x1
 268:	f885 20b5 	strb.w	r2, [r5, #181]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:82
		  gConfig.psi_dot_enabled = IS_PSI_DOT_ENABLED();
 26c:	680b      	ldr	r3, [r1, #0]
 26e:	0b9b      	lsrs	r3, r3, #14
 270:	f003 0301 	and.w	r3, r3, #1	; 0x1
 274:	f885 30b6 	strb.w	r3, [r5, #182]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:85

		  // Broadcast mode or listen mode
		  gConfig.broadcast_enabled = FGET_TRANSMIT_MODE();
 278:	680a      	ldr	r2, [r1, #0]
 27a:	0c12      	lsrs	r2, r2, #16
 27c:	f002 0201 	and.w	r2, r2, #1	; 0x1
 280:	f885 20b8 	strb.w	r2, [r5, #184]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:86
		  gConfig.broadcast_rate = FGET_BROADCAST_RATE();
 284:	680b      	ldr	r3, [r1, #0]
 286:	0c5b      	lsrs	r3, r3, #17
 288:	f885 30b9 	strb.w	r3, [r5, #185]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:89
	 }
	 
}
 28c:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:34
	 int i, j;
	 
	 // If flash has not been programmed yet, then use default configuration.  Otherwise, load configuration from flash
	 if( FGET_ACCEL_X_OFFSET() == 0xFFFF )
	 {
		  ResetToFactory();
 28e:	f7ff fffe 	bl	0 <GetConfiguration>
 292:	e7fb      	b.n	28c <GetConfiguration+0x28c>
Disassembly of section .text.StartSelfTest:

00000000 <StartSelfTest>:
StartSelfTest():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:641
* Description    : Sets the gSelfTestEnable flag, which triggers the self-test
				       sequence on the IMU.
*******************************************************************************/
void StartSelfTest( void )
{
	 gSelfTestEnabled = 1;
   0:	f240 0100 	movw	r1, #0	; 0x0
   4:	f2c0 0100 	movt	r1, #0	; 0x0
   8:	2201      	movs	r2, #1
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:642
	 gSelfTestSamplesIgnored = 0;
   a:	f240 0300 	movw	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:641
* Description    : Sets the gSelfTestEnable flag, which triggers the self-test
				       sequence on the IMU.
*******************************************************************************/
void StartSelfTest( void )
{
	 gSelfTestEnabled = 1;
   e:	800a      	strh	r2, [r1, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:642
	 gSelfTestSamplesIgnored = 0;
  10:	f2c0 0300 	movt	r3, #0	; 0x0
  14:	f04f 0100 	mov.w	r1, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:645

	 // Assert self-test pin
	 GPIO_WriteBit( GPIOA, GPIO_Pin_13, Bit_SET );
  18:	f640 0000 	movw	r0, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:642
				       sequence on the IMU.
*******************************************************************************/
void StartSelfTest( void )
{
	 gSelfTestEnabled = 1;
	 gSelfTestSamplesIgnored = 0;
  1c:	8019      	strh	r1, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:640
* Return         : None
* Description    : Sets the gSelfTestEnable flag, which triggers the self-test
				       sequence on the IMU.
*******************************************************************************/
void StartSelfTest( void )
{
  1e:	b510      	push	{r4, lr}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:645
	 gSelfTestEnabled = 1;
	 gSelfTestSamplesIgnored = 0;

	 // Assert self-test pin
	 GPIO_WriteBit( GPIOA, GPIO_Pin_13, Bit_SET );
  20:	f2c4 0001 	movt	r0, #16385	; 0x4001
  24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  28:	f7ff fffe 	bl	0 <GPIO_WriteBit>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:646
}
  2c:	bd10      	pop	{r4, pc}
  2e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.StopSelfTest:

00000000 <StopSelfTest>:
StopSelfTest():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:656
* Output         : None
* Return         : None
* Description    : 
*******************************************************************************/
void StopSelfTest( uint16_t result )
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:658
	 // Clear self-test pin
	 GPIO_WriteBit( GPIOA, GPIO_Pin_13, Bit_RESET );
   4:	f640 0000 	movw	r0, #2048	; 0x800
   8:	2200      	movs	r2, #0
   a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  12:	f7ff fffe 	bl	0 <GPIO_WriteBit>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:660
	 
	 gSelfTestEnabled = 0;
  16:	f240 0300 	movw	r3, #0	; 0x0
  1a:	f2c0 0300 	movt	r3, #0	; 0x0
  1e:	f04f 0200 	mov.w	r2, #0	; 0x0
  22:	801a      	strh	r2, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:662
	 
	 SendStatusReportPacket( result );
  24:	4620      	mov	r0, r4
  26:	f7ff fffe 	bl	0 <SendStatusReportPacket>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:664

}
  2a:	bd10      	pop	{r4, pc}
Disassembly of section .text.StopGyroCalibration:

00000000 <StopGyroCalibration>:
StopGyroCalibration():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:617
						  FIR filtering software in process_input_buffers after enough
						  data has been collected to make an average.
*******************************************************************************/
void StopGyroCalibration( void )
{
	 gZeroGyroEnable = 0;
   0:	f240 0300 	movw	r3, #0	; 0x0
   4:	f2c0 0300 	movt	r3, #0	; 0x0
   8:	f04f 0200 	mov.w	r2, #0	; 0x0
   c:	801a      	strh	r2, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:619
	 
	 gZeroGyroAverages[0] = (int16_t)(round((float)gZeroGyroAverages[0]/(float)(gZeroGyroSampleCount)));
   e:	f240 0200 	movw	r2, #0	; 0x0
  12:	f2c0 0200 	movt	r2, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:616
* Description    : Finishes gyro calibration cycle. This function is called by 
						  FIR filtering software in process_input_buffers after enough
						  data has been collected to make an average.
*******************************************************************************/
void StopGyroCalibration( void )
{
  16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:619
	 gZeroGyroEnable = 0;
	 
	 gZeroGyroAverages[0] = (int16_t)(round((float)gZeroGyroAverages[0]/(float)(gZeroGyroSampleCount)));
  1a:	8810      	ldrh	r0, [r2, #0]
  1c:	f7ff fffe 	bl	0 <__aeabi_ui2f>
  20:	f240 0400 	movw	r4, #0	; 0x0
  24:	f2c0 0400 	movt	r4, #0	; 0x0
  28:	4605      	mov	r5, r0
  2a:	6820      	ldr	r0, [r4, #0]
  2c:	f7ff fffe 	bl	0 <__aeabi_i2f>
  30:	4629      	mov	r1, r5
  32:	f7ff fffe 	bl	0 <__aeabi_fdiv>
  36:	f7ff fffe 	bl	0 <__aeabi_f2d>
  3a:	f7ff fffe 	bl	0 <round>
  3e:	f7ff fffe 	bl	0 <__aeabi_d2iz>
  42:	fa1f f880 	uxth.w	r8, r0
  46:	fa0f f388 	sxth.w	r3, r8
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:620
	 gZeroGyroAverages[1] = (int16_t)(round((float)gZeroGyroAverages[1]/(float)(gZeroGyroSampleCount)));
  4a:	6860      	ldr	r0, [r4, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:619
*******************************************************************************/
void StopGyroCalibration( void )
{
	 gZeroGyroEnable = 0;
	 
	 gZeroGyroAverages[0] = (int16_t)(round((float)gZeroGyroAverages[0]/(float)(gZeroGyroSampleCount)));
  4c:	6023      	str	r3, [r4, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:620
	 gZeroGyroAverages[1] = (int16_t)(round((float)gZeroGyroAverages[1]/(float)(gZeroGyroSampleCount)));
  4e:	f7ff fffe 	bl	0 <__aeabi_i2f>
  52:	4629      	mov	r1, r5
  54:	f7ff fffe 	bl	0 <__aeabi_fdiv>
  58:	f7ff fffe 	bl	0 <__aeabi_f2d>
  5c:	f7ff fffe 	bl	0 <round>
  60:	f7ff fffe 	bl	0 <__aeabi_d2iz>
  64:	b286      	uxth	r6, r0
  66:	b233      	sxth	r3, r6
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:621
	 gZeroGyroAverages[2] = (int16_t)(round((float)gZeroGyroAverages[2]/(float)(gZeroGyroSampleCount)));
  68:	68a0      	ldr	r0, [r4, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:620
void StopGyroCalibration( void )
{
	 gZeroGyroEnable = 0;
	 
	 gZeroGyroAverages[0] = (int16_t)(round((float)gZeroGyroAverages[0]/(float)(gZeroGyroSampleCount)));
	 gZeroGyroAverages[1] = (int16_t)(round((float)gZeroGyroAverages[1]/(float)(gZeroGyroSampleCount)));
  6a:	6063      	str	r3, [r4, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:621
	 gZeroGyroAverages[2] = (int16_t)(round((float)gZeroGyroAverages[2]/(float)(gZeroGyroSampleCount)));
  6c:	f7ff fffe 	bl	0 <__aeabi_i2f>
  70:	4629      	mov	r1, r5
  72:	f7ff fffe 	bl	0 <__aeabi_fdiv>
  76:	f7ff fffe 	bl	0 <__aeabi_f2d>
  7a:	f7ff fffe 	bl	0 <round>
  7e:	f7ff fffe 	bl	0 <__aeabi_d2iz>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:623
	 
	 gConfig.y_gyro_bias = gZeroGyroAverages[0];
  82:	f240 0300 	movw	r3, #0	; 0x0
  86:	f2c0 0300 	movt	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:621
{
	 gZeroGyroEnable = 0;
	 
	 gZeroGyroAverages[0] = (int16_t)(round((float)gZeroGyroAverages[0]/(float)(gZeroGyroSampleCount)));
	 gZeroGyroAverages[1] = (int16_t)(round((float)gZeroGyroAverages[1]/(float)(gZeroGyroSampleCount)));
	 gZeroGyroAverages[2] = (int16_t)(round((float)gZeroGyroAverages[2]/(float)(gZeroGyroSampleCount)));
  8a:	b280      	uxth	r0, r0
  8c:	b202      	sxth	r2, r0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:623
	 
	 gConfig.y_gyro_bias = gZeroGyroAverages[0];
  8e:	f8a3 8016 	strh.w	r8, [r3, #22]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:624
	 gConfig.x_gyro_bias = gZeroGyroAverages[1];
  92:	829e      	strh	r6, [r3, #20]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:625
	 gConfig.z_gyro_bias = gZeroGyroAverages[2];
  94:	8318      	strh	r0, [r3, #24]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:621
{
	 gZeroGyroEnable = 0;
	 
	 gZeroGyroAverages[0] = (int16_t)(round((float)gZeroGyroAverages[0]/(float)(gZeroGyroSampleCount)));
	 gZeroGyroAverages[1] = (int16_t)(round((float)gZeroGyroAverages[1]/(float)(gZeroGyroSampleCount)));
	 gZeroGyroAverages[2] = (int16_t)(round((float)gZeroGyroAverages[2]/(float)(gZeroGyroSampleCount)));
  96:	60a2      	str	r2, [r4, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:627
	 
	 gConfig.y_gyro_bias = gZeroGyroAverages[0];
	 gConfig.x_gyro_bias = gZeroGyroAverages[1];
	 gConfig.z_gyro_bias = gZeroGyroAverages[2];
	 
	 SendGyroBiasPacket( );
  98:	f7ff fffe 	bl	0 <SendGyroBiasPacket>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:628
}
  9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Disassembly of section .text.DisableBroadcastMode:

00000000 <DisableBroadcastMode>:
DisableBroadcastMode():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:577
* Description    : Disables Broadcast Mode by turning off Timer 2
*******************************************************************************/
void DisableBroadcastMode( void )
{
	 // Set global configuration variable
	 gConfig.broadcast_enabled = MODE_LISTEN;
   0:	f240 0300 	movw	r3, #0	; 0x0
   4:	f2c0 0300 	movt	r3, #0	; 0x0
   8:	2100      	movs	r1, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:575
* Output         : None
* Return         : None
* Description    : Disables Broadcast Mode by turning off Timer 2
*******************************************************************************/
void DisableBroadcastMode( void )
{
   a:	b510      	push	{r4, lr}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:580
	 // Set global configuration variable
	 gConfig.broadcast_enabled = MODE_LISTEN;
	 
	 // Disable Timer 2
	 TIM_Cmd( TIM2, DISABLE );	 
   c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:577
* Description    : Disables Broadcast Mode by turning off Timer 2
*******************************************************************************/
void DisableBroadcastMode( void )
{
	 // Set global configuration variable
	 gConfig.broadcast_enabled = MODE_LISTEN;
  10:	f883 10b8 	strb.w	r1, [r3, #184]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:580
	 
	 // Disable Timer 2
	 TIM_Cmd( TIM2, DISABLE );	 
  14:	f7ff fffe 	bl	0 <TIM_Cmd>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:581
}
  18:	bd10      	pop	{r4, pc}
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.UpdateBroadcastRate:

00000000 <UpdateBroadcastRate>:
UpdateBroadcastRate():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:517
* Return         : None
* Description    : Sets the Timer2 period to adjust IMU broadcast frequency.
						  In Broadcast Mode, data is transmitted on every timer interrupt
*******************************************************************************/
void UpdateBroadcastRate( uint8_t new_rate )
{
   0:	b500      	push	{lr}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:522
	 TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	 uint16_t new_period;
	 	 
	 // Update gConfig parameter
	 gConfig.broadcast_rate = new_rate;
   2:	f240 0300 	movw	r3, #0	; 0x0
   6:	f2c0 0300 	movt	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:517
* Return         : None
* Description    : Sets the Timer2 period to adjust IMU broadcast frequency.
						  In Broadcast Mode, data is transmitted on every timer interrupt
*******************************************************************************/
void UpdateBroadcastRate( uint8_t new_rate )
{
   a:	b085      	sub	sp, #20
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:522
	 TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	 uint16_t new_period;
	 	 
	 // Update gConfig parameter
	 gConfig.broadcast_rate = new_rate;
   c:	f883 00b9 	strb.w	r0, [r3, #185]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:533
	 // division, the timer period should be:
	 // new_period = 720000/ft
	 new_period = (uint16_t)(720000.0/(1.09803921*(float)new_rate + 20.0));

	 // Update TIM1
	 TIM_TimeBaseStructure.TIM_Period = new_period;
  10:	f7ff fffe 	bl	0 <__aeabi_ui2f>
  14:	f7ff fffe 	bl	0 <__aeabi_f2d>
  18:	a313      	add	r3, pc, #76	(adr r3, 68 <UpdateBroadcastRate+0x68>)
  1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  1e:	f7ff fffe 	bl	0 <__aeabi_dmul>
  22:	f240 0300 	movw	r3, #0	; 0x0
  26:	2200      	movs	r2, #0
  28:	f2c4 0334 	movt	r3, #16436	; 0x4034
  2c:	f7ff fffe 	bl	0 <__aeabi_dadd>
  30:	4602      	mov	r2, r0
  32:	460b      	mov	r3, r1
  34:	a10e      	add	r1, pc, #56	(adr r1, 70 <UpdateBroadcastRate+0x70>)
  36:	e9d1 0100 	ldrd	r0, r1, [r1]
  3a:	f7ff fffe 	bl	0 <__aeabi_ddiv>
  3e:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:534
	 TIM_TimeBaseStructure.TIM_Prescaler = 100;
  42:	f04f 0364 	mov.w	r3, #100	; 0x64
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:533
	 // division, the timer period should be:
	 // new_period = 720000/ft
	 new_period = (uint16_t)(720000.0/(1.09803921*(float)new_rate + 20.0));

	 // Update TIM1
	 TIM_TimeBaseStructure.TIM_Period = new_period;
  46:	f8ad 000a 	strh.w	r0, [sp, #10]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:534
	 TIM_TimeBaseStructure.TIM_Prescaler = 100;
  4a:	f8ad 3006 	strh.w	r3, [sp, #6]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:538
	 TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	 TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	 TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
  4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:535
	 new_period = (uint16_t)(720000.0/(1.09803921*(float)new_rate + 20.0));

	 // Update TIM1
	 TIM_TimeBaseStructure.TIM_Period = new_period;
	 TIM_TimeBaseStructure.TIM_Prescaler = 100;
	 TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  52:	2300      	movs	r3, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:538
	 TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	 TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
  54:	f10d 0106 	add.w	r1, sp, #6	; 0x6
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:535
	 new_period = (uint16_t)(720000.0/(1.09803921*(float)new_rate + 20.0));

	 // Update TIM1
	 TIM_TimeBaseStructure.TIM_Period = new_period;
	 TIM_TimeBaseStructure.TIM_Prescaler = 100;
	 TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  58:	f8ad 300c 	strh.w	r3, [sp, #12]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:536
	 TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  5c:	f8ad 3008 	strh.w	r3, [sp, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:538

	 TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
  60:	f7ff fffe 	bl	0 <TIM_TimeBaseInit>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:540
	 	 
}
  64:	b005      	add	sp, #20
  66:	bd00      	pop	{pc}
  68:	900acf92 	.word	0x900acf92
  6c:	3ff19191 	.word	0x3ff19191
  70:	00000000 	.word	0x00000000
  74:	4125f900 	.word	0x4125f900
Disassembly of section .text.EnableBroadcastMode:

00000000 <EnableBroadcastMode>:
EnableBroadcastMode():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:552
* Description    : Turns on broadcast mode and calls UpdateBroadcastRate
*******************************************************************************/
void EnableBroadcastMode( uint8_t new_rate )
{
	 // Set global configuration variable
	 gConfig.broadcast_enabled = MODE_BROADCAST;
   0:	f240 0300 	movw	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:550
* Output         : None
* Return         : None
* Description    : Turns on broadcast mode and calls UpdateBroadcastRate
*******************************************************************************/
void EnableBroadcastMode( uint8_t new_rate )
{
   4:	b510      	push	{r4, lr}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:552
	 // Set global configuration variable
	 gConfig.broadcast_enabled = MODE_BROADCAST;
   6:	f2c0 0300 	movt	r3, #0	; 0x0
   a:	2401      	movs	r4, #1
   c:	f883 40b8 	strb.w	r4, [r3, #184]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:555
	 
	 // Set broadcast rate
	 UpdateBroadcastRate( new_rate );
  10:	f7ff fffe 	bl	0 <EnableBroadcastMode>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:558
	 
	 // Enable Timer 2
	 TIM_Cmd(TIM2, ENABLE);
  14:	4621      	mov	r1, r4
  16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  1a:	f7ff fffe 	bl	0 <TIM_Cmd>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:561
	 
	 // Clear pending interrupt bit
	 TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
  1e:	4621      	mov	r1, r4
  20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  24:	f7ff fffe 	bl	0 <TIM_ClearITPendingBit>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:564
	 
	 // TIM IT enable
	 TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
  28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  2c:	4621      	mov	r1, r4
  2e:	4622      	mov	r2, r4
  30:	f7ff fffe 	bl	0 <TIM_ITConfig>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:565
}
  34:	bd10      	pop	{r4, pc}
  36:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.WriteConfigurationToFlash:

00000000 <WriteConfigurationToFlash>:
WriteConfigurationToFlash():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:272
* Output         : None
* Return         : None
* Description    : Writes the current IMU configuration to flash.
*******************************************************************************/
int32_t WriteConfigurationToFlash( void )
{
   0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:278
	 FLASH_Status FLASHStatus;
	 uint32_t FLASHData;
	 int i, j;
	 fConvert fToInt;
	 
	 FLASH_Unlock();
   4:	f7ff fffe 	bl	0 <FLASH_Unlock>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:281
	 
	 // Clear all pending flags
	 FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
   8:	f24f 0400 	movw	r4, #61440	; 0xf000
   c:	2035      	movs	r0, #53
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:284
	
	 // Clear FLASH pages in preparation for write operations
	 for (i = 0; i < 46; i++ )
   e:	f24f 05b8 	movw	r5, #61624	; 0xf0b8
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:281
	 fConvert fToInt;
	 
	 FLASH_Unlock();
	 
	 // Clear all pending flags
	 FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
  12:	f7ff fffe 	bl	0 <FLASH_ClearFlag>
  16:	f6c0 0400 	movt	r4, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:284
	
	 // Clear FLASH pages in preparation for write operations
	 for (i = 0; i < 46; i++ )
  1a:	f6c0 0500 	movt	r5, #2048	; 0x800
  1e:	e002      	b.n	26 <WriteConfigurationToFlash+0x26>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:290
	 {
		  FLASHStatus = FLASH_ErasePage(OFFSET_CONF1_ADDR + 4*i);
		  
		  if( FLASHStatus != FLASH_COMPLETE )
		  {
				return FLASHStatus;
  20:	3404      	adds	r4, #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:284
	 
	 // Clear all pending flags
	 FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
	
	 // Clear FLASH pages in preparation for write operations
	 for (i = 0; i < 46; i++ )
  22:	42ac      	cmp	r4, r5
  24:	d006      	beq.n	34 <WriteConfigurationToFlash+0x34>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:286
	 {
		  FLASHStatus = FLASH_ErasePage(OFFSET_CONF1_ADDR + 4*i);
  26:	4620      	mov	r0, r4
  28:	f7ff fffe 	bl	0 <FLASH_ErasePage>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:288
		  
		  if( FLASHStatus != FLASH_COMPLETE )
  2c:	2804      	cmp	r0, #4
  2e:	d0f7      	beq.n	20 <WriteConfigurationToFlash+0x20>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:506
	 
	 FLASH_Lock();
	 
	 return FLASH_COMPLETE;
	 
}
  30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:296
		  }
	 }
	 
	 // Write rate gyro, accel, and mag biases to flash
	 FLASHData = ((uint32_t)gConfig.x_accel_bias) | ((uint32_t)gConfig.y_accel_bias << 16);
	 FLASHStatus = FLASH_ProgramWord(OFFSET_CONF1_ADDR, FLASHData);
  34:	f240 0400 	movw	r4, #0	; 0x0
  38:	f2c0 0400 	movt	r4, #0	; 0x0
  3c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  40:	f9b4 1000 	ldrsh.w	r1, [r4]
  44:	f24f 0000 	movw	r0, #61440	; 0xf000
  48:	f6c0 0000 	movt	r0, #2048	; 0x800
  4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  50:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:298
	 
	 if( FLASHStatus != FLASH_COMPLETE )
  54:	2804      	cmp	r0, #4
  56:	d1eb      	bne.n	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:304
	 {
		  return FLASHStatus;
	 }
	 
	 FLASHData = ((uint32_t)gConfig.z_accel_bias) | ((uint32_t)gConfig.x_gyro_bias << 16);
	 FLASHStatus = FLASH_ProgramWord(OFFSET_CONF2_ADDR, FLASHData);
  58:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  5c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
  60:	f24f 0004 	movw	r0, #61444	; 0xf004
  64:	f6c0 0000 	movt	r0, #2048	; 0x800
  68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  6c:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:306
	 
	 if( FLASHStatus != FLASH_COMPLETE )
  70:	2804      	cmp	r0, #4
  72:	d1dd      	bne.n	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:312
	 {
		  return FLASHStatus;
	 }
	 
	 FLASHData = ((uint32_t)gConfig.y_gyro_bias) | ((uint32_t)gConfig.z_gyro_bias << 16);
	 FLASHStatus = FLASH_ProgramWord(OFFSET_CONF3_ADDR, FLASHData);
  74:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
  78:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
  7c:	f24f 0008 	movw	r0, #61448	; 0xf008
  80:	f6c0 0000 	movt	r0, #2048	; 0x800
  84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  88:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:314
	 
	 if( FLASHStatus != FLASH_COMPLETE )
  8c:	2804      	cmp	r0, #4
  8e:	d1cf      	bne.n	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:320
	 {
		  return FLASHStatus;
	 }
	 
	 FLASHData = ((uint32_t)gConfig.x_mag_bias) | ((uint32_t)gConfig.y_mag_bias << 16);
	 FLASHStatus = FLASH_ProgramWord(OFFSET_CONF4_ADDR, FLASHData);
  90:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
  94:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
  98:	f24f 000c 	movw	r0, #61452	; 0xf00c
  9c:	f6c0 0000 	movt	r0, #2048	; 0x800
  a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  a4:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:322
	 
	 if( FLASHStatus != FLASH_COMPLETE )
  a8:	2804      	cmp	r0, #4
  aa:	d1c1      	bne.n	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:328
	 {
		  return FLASHStatus;
	 }
	 
	 FLASHData = ((uint32_t)gConfig.z_mag_bias);
	 FLASHStatus = FLASH_ProgramWord(OFFSET_CONF5_ADDR, FLASHData);
  ac:	f24f 0010 	movw	r0, #61456	; 0xf010
  b0:	f6c0 0000 	movt	r0, #2048	; 0x800
  b4:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
  b8:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:330
	 
	 if( FLASHStatus != FLASH_COMPLETE )
  bc:	2804      	cmp	r0, #4
  be:	d1b7      	bne.n	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:337
		  return FLASHStatus;
	 }
	 
	 // Set Misc config register (active channels, EKF config, gyro startup calibration, broadcast mode and freq.)
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
  c0:	f894 10a8 	ldrb.w	r1, [r4, #168]
  c4:	f894 30a9 	ldrb.w	r3, [r4, #169]
  c8:	f894 20b9 	ldrb.w	r2, [r4, #185]
  cc:	005b      	lsls	r3, r3, #1
  ce:	f001 0101 	and.w	r1, r1, #1	; 0x1
  d2:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
  d6:	f003 0302 	and.w	r3, r3, #2	; 0x2
  da:	f894 20aa 	ldrb.w	r2, [r4, #170]
  de:	4319      	orrs	r1, r3
  e0:	f894 30ab 	ldrb.w	r3, [r4, #171]
  e4:	0092      	lsls	r2, r2, #2
  e6:	f002 0204 	and.w	r2, r2, #4	; 0x4
  ea:	00db      	lsls	r3, r3, #3
  ec:	4311      	orrs	r1, r2
  ee:	f003 0308 	and.w	r3, r3, #8	; 0x8
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:338
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
  f2:	f894 20ac 	ldrb.w	r2, [r4, #172]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:337
		  return FLASHStatus;
	 }
	 
	 // Set Misc config register (active channels, EKF config, gyro startup calibration, broadcast mode and freq.)
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
  f6:	4319      	orrs	r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:338
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
  f8:	f894 30ad 	ldrb.w	r3, [r4, #173]
  fc:	0112      	lsls	r2, r2, #4
  fe:	f002 0210 	and.w	r2, r2, #16	; 0x10
 102:	015b      	lsls	r3, r3, #5
 104:	4311      	orrs	r1, r2
 106:	f003 0320 	and.w	r3, r3, #32	; 0x20
 10a:	f894 20ae 	ldrb.w	r2, [r4, #174]
 10e:	4319      	orrs	r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:339
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
 110:	f894 30af 	ldrb.w	r3, [r4, #175]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:338
	 }
	 
	 // Set Misc config register (active channels, EKF config, gyro startup calibration, broadcast mode and freq.)
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
 114:	0192      	lsls	r2, r2, #6
 116:	f002 0240 	and.w	r2, r2, #64	; 0x40
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:339
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
 11a:	01db      	lsls	r3, r3, #7
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:338
	 }
	 
	 // Set Misc config register (active channels, EKF config, gyro startup calibration, broadcast mode and freq.)
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
 11c:	4311      	orrs	r1, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:339
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
 11e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 122:	f894 20b0 	ldrb.w	r2, [r4, #176]
 126:	4319      	orrs	r1, r3
 128:	f894 30b1 	ldrb.w	r3, [r4, #177]
 12c:	0212      	lsls	r2, r2, #8
 12e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 132:	025b      	lsls	r3, r3, #9
 134:	4311      	orrs	r1, r2
 136:	f403 7300 	and.w	r3, r3, #512	; 0x200
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:340
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_dot_enabled << 12) & 0x1000) | (((uint32_t)gConfig.theta_dot_enabled << 13) & 0x2000) | (((uint32_t)gConfig.psi_dot_enabled << 14) & 0x4000);
 13a:	f894 20b2 	ldrb.w	r2, [r4, #178]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:339
	 
	 // Set Misc config register (active channels, EKF config, gyro startup calibration, broadcast mode and freq.)
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
 13e:	4319      	orrs	r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:340
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_dot_enabled << 12) & 0x1000) | (((uint32_t)gConfig.theta_dot_enabled << 13) & 0x2000) | (((uint32_t)gConfig.psi_dot_enabled << 14) & 0x4000);
 140:	f894 30b3 	ldrb.w	r3, [r4, #179]
 144:	0292      	lsls	r2, r2, #10
 146:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 14a:	02db      	lsls	r3, r3, #11
 14c:	4311      	orrs	r1, r2
 14e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 152:	f894 20b4 	ldrb.w	r2, [r4, #180]
 156:	4319      	orrs	r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:341
	 FLASHData = FLASHData | (((uint32_t)gConfig.gyro_startup_calibration << 15) & 0x8000) | (((uint32_t)gConfig.broadcast_enabled << 16) & 0x10000);
 158:	f894 30b5 	ldrb.w	r3, [r4, #181]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:340
	 // Set Misc config register (active channels, EKF config, gyro startup calibration, broadcast mode and freq.)
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_dot_enabled << 12) & 0x1000) | (((uint32_t)gConfig.theta_dot_enabled << 13) & 0x2000) | (((uint32_t)gConfig.psi_dot_enabled << 14) & 0x4000);
 15c:	0312      	lsls	r2, r2, #12
 15e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:341
	 FLASHData = FLASHData | (((uint32_t)gConfig.gyro_startup_calibration << 15) & 0x8000) | (((uint32_t)gConfig.broadcast_enabled << 16) & 0x10000);
 162:	035b      	lsls	r3, r3, #13
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:340
	 // Set Misc config register (active channels, EKF config, gyro startup calibration, broadcast mode and freq.)
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_dot_enabled << 12) & 0x1000) | (((uint32_t)gConfig.theta_dot_enabled << 13) & 0x2000) | (((uint32_t)gConfig.psi_dot_enabled << 14) & 0x4000);
 164:	4311      	orrs	r1, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:341
	 FLASHData = FLASHData | (((uint32_t)gConfig.gyro_startup_calibration << 15) & 0x8000) | (((uint32_t)gConfig.broadcast_enabled << 16) & 0x10000);
 166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 16a:	f894 20b6 	ldrb.w	r2, [r4, #182]
 16e:	4319      	orrs	r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:342
	 FLASHData = FLASHData | ((uint32_t)gConfig.broadcast_rate << 17) | (((uint32_t)gConfig.EKF_config << 25) & (0x0F << 25));
 170:	f894 30b7 	ldrb.w	r3, [r4, #183]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:341
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_dot_enabled << 12) & 0x1000) | (((uint32_t)gConfig.theta_dot_enabled << 13) & 0x2000) | (((uint32_t)gConfig.psi_dot_enabled << 14) & 0x4000);
	 FLASHData = FLASHData | (((uint32_t)gConfig.gyro_startup_calibration << 15) & 0x8000) | (((uint32_t)gConfig.broadcast_enabled << 16) & 0x10000);
 174:	0392      	lsls	r2, r2, #14
 176:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:342
	 FLASHData = FLASHData | ((uint32_t)gConfig.broadcast_rate << 17) | (((uint32_t)gConfig.EKF_config << 25) & (0x0F << 25));
 17a:	03db      	lsls	r3, r3, #15
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:341
	 FLASHData = (((uint32_t)gConfig.x_accel_enabled) & 0x01) | (((uint32_t)gConfig.y_accel_enabled << 1) & 0x02) | (((uint32_t)gConfig.z_accel_enabled << 2) & 0x04);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_dot_enabled << 12) & 0x1000) | (((uint32_t)gConfig.theta_dot_enabled << 13) & 0x2000) | (((uint32_t)gConfig.psi_dot_enabled << 14) & 0x4000);
	 FLASHData = FLASHData | (((uint32_t)gConfig.gyro_startup_calibration << 15) & 0x8000) | (((uint32_t)gConfig.broadcast_enabled << 16) & 0x10000);
 17c:	4311      	orrs	r1, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:342
	 FLASHData = FLASHData | ((uint32_t)gConfig.broadcast_rate << 17) | (((uint32_t)gConfig.EKF_config << 25) & (0x0F << 25));
 17e:	041b      	lsls	r3, r3, #16
 180:	f894 20b8 	ldrb.w	r2, [r4, #184]
 184:	0c1b      	lsrs	r3, r3, #16
 186:	4319      	orrs	r1, r3
 188:	0412      	lsls	r2, r2, #16
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:344
	 
	 FLASHStatus = FLASH_ProgramWord(MISC_CONF_ADDR, FLASHData);
 18a:	f894 3020 	ldrb.w	r3, [r4, #32]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:342
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_gyro_enabled << 3) & 0x08) | (((uint32_t)gConfig.y_gyro_enabled << 4) & 0x010) | (((uint32_t)gConfig.z_gyro_enabled << 5) & 0x020);
	 FLASHData = FLASHData | (((uint32_t)gConfig.x_mag_enabled << 6) & 0x040) | (((uint32_t)gConfig.y_mag_enabled << 7) & 0x080) | (((uint32_t)gConfig.z_mag_enabled << 8) & 0x100);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_enabled << 9) & 0x200) | (((uint32_t)gConfig.theta_enabled << 10) & 0x400) | (((uint32_t)gConfig.psi_enabled << 11) & 0x800);
	 FLASHData = FLASHData | (((uint32_t)gConfig.phi_dot_enabled << 12) & 0x1000) | (((uint32_t)gConfig.theta_dot_enabled << 13) & 0x2000) | (((uint32_t)gConfig.psi_dot_enabled << 14) & 0x4000);
	 FLASHData = FLASHData | (((uint32_t)gConfig.gyro_startup_calibration << 15) & 0x8000) | (((uint32_t)gConfig.broadcast_enabled << 16) & 0x10000);
	 FLASHData = FLASHData | ((uint32_t)gConfig.broadcast_rate << 17) | (((uint32_t)gConfig.EKF_config << 25) & (0x0F << 25));
 18e:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 192:	4311      	orrs	r1, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:344
	 
	 FLASHStatus = FLASH_ProgramWord(MISC_CONF_ADDR, FLASHData);
 194:	065b      	lsls	r3, r3, #25
 196:	f003 53f0 	and.w	r3, r3, #503316480	; 0x1e000000
 19a:	f24f 0014 	movw	r0, #61460	; 0xf014
 19e:	4319      	orrs	r1, r3
 1a0:	f6c0 0000 	movt	r0, #2048	; 0x800
 1a4:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:346
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 1a8:	2804      	cmp	r0, #4
 1aa:	f47f af41 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:355
	 
	 // Gyro X scale factor
	 fToInt.float_val = gConfig.x_gyro_scale;
	 FLASHData = fToInt.int32_val;
	 
	 FLASHStatus = FLASH_ProgramWord(GYRO_X_SCALE_ADDR, FLASHData);
 1ae:	f24f 0018 	movw	r0, #61464	; 0xf018
 1b2:	f6c0 0000 	movt	r0, #2048	; 0x800
 1b6:	68a1      	ldr	r1, [r4, #8]
 1b8:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:357
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 1bc:	2804      	cmp	r0, #4
 1be:	f47f af37 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:366
	 
	 // Gyro Y scale factor
	 fToInt.float_val = gConfig.y_gyro_scale;
	 FLASHData = fToInt.int32_val;
	 
	 FLASHStatus = FLASH_ProgramWord(GYRO_Y_SCALE_ADDR, FLASHData);
 1c2:	f24f 001c 	movw	r0, #61468	; 0xf01c
 1c6:	f6c0 0000 	movt	r0, #2048	; 0x800
 1ca:	68e1      	ldr	r1, [r4, #12]
 1cc:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:368
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 1d0:	2804      	cmp	r0, #4
 1d2:	f47f af2d 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:377
	 
	 // Gyro Z scale factor
	 fToInt.float_val = gConfig.z_gyro_scale;
	 FLASHData = fToInt.int32_val;
	 
	 FLASHStatus = FLASH_ProgramWord(GYRO_Z_SCALE_ADDR, FLASHData);
 1d6:	f24f 0020 	movw	r0, #61472	; 0xf020
 1da:	f6c0 0000 	movt	r0, #2048	; 0x800
 1de:	6921      	ldr	r1, [r4, #16]
 1e0:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:379
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 1e4:	2804      	cmp	r0, #4
 1e6:	bf02      	ittt	eq
 1e8:	f24f 0824 	movweq	r8, #61476	; 0xf024
 1ec:	f04f 0900 	moveq.w	r9, #0	; 0x0
 1f0:	f6c0 0800 	movteq	r8, #2048	; 0x800
 1f4:	f47f af1c 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:385
	 {
		  return FLASHStatus;
	 }
	 
	 // Accel alignment matrix
	 for (i = 0; i < 3; i++ )
 1f8:	ea4f 0289 	mov.w	r2, r9, lsl #2
 1fc:	ea4f 1309 	mov.w	r3, r9, lsl #4
 200:	1a9b      	subs	r3, r3, r2
 202:	18e3      	adds	r3, r4, r3
 204:	f103 0654 	add.w	r6, r3, #84	; 0x54
 208:	4645      	mov	r5, r8
 20a:	2700      	movs	r7, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:392
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.float_val = gConfig.accel_alignment.data[i][j];
				FLASHData = fToInt.int32_val;
				
				FLASHStatus = FLASH_ProgramWord(ACCEL_ALIGN_START_ADDR + 4*(3*i+j), FLASHData);
 20c:	4628      	mov	r0, r5
 20e:	6831      	ldr	r1, [r6, #0]
 210:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:394
				
				if( FLASHStatus != FLASH_COMPLETE )
 214:	2804      	cmp	r0, #4
 216:	f47f af0b 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:387
	 }
	 
	 // Accel alignment matrix
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
 21a:	3701      	adds	r7, #1
 21c:	3604      	adds	r6, #4
 21e:	3504      	adds	r5, #4
 220:	2f03      	cmp	r7, #3
 222:	d1f3      	bne.n	20c <WriteConfigurationToFlash+0x20c>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:385
	 {
		  return FLASHStatus;
	 }
	 
	 // Accel alignment matrix
	 for (i = 0; i < 3; i++ )
 224:	f109 0901 	add.w	r9, r9, #1	; 0x1
 228:	f1b9 0f03 	cmp.w	r9, #3	; 0x3
 22c:	f108 080c 	add.w	r8, r8, #12	; 0xc
 230:	d1e2      	bne.n	1f8 <WriteConfigurationToFlash+0x1f8>
 232:	f24f 0848 	movw	r8, #61512	; 0xf048
 236:	f1a9 0903 	sub.w	r9, r9, #3	; 0x3
 23a:	f6c0 0800 	movt	r8, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:402
				}
		  }
	 }
	 
	 // Gyro alignment matrix
	 for (i = 0; i < 3; i++ )
 23e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 242:	ea4f 1309 	mov.w	r3, r9, lsl #4
 246:	1a9b      	subs	r3, r3, r2
 248:	3330      	adds	r3, #48
 24a:	18e7      	adds	r7, r4, r3
 24c:	4646      	mov	r6, r8
 24e:	2500      	movs	r5, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:409
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.float_val = gConfig.gyro_alignment.data[i][j];
				FLASHData = fToInt.int32_val;
				
				FLASHStatus = FLASH_ProgramWord(GYRO_ALIGN_START_ADDR + 4*(3*i+j), FLASHData);
 250:	4630      	mov	r0, r6
 252:	6839      	ldr	r1, [r7, #0]
 254:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:411
				
				if( FLASHStatus != FLASH_COMPLETE )
 258:	2804      	cmp	r0, #4
 25a:	f47f aee9 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:404
	 }
	 
	 // Gyro alignment matrix
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
 25e:	3501      	adds	r5, #1
 260:	3704      	adds	r7, #4
 262:	3604      	adds	r6, #4
 264:	2d03      	cmp	r5, #3
 266:	d1f3      	bne.n	250 <WriteConfigurationToFlash+0x250>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:402
				}
		  }
	 }
	 
	 // Gyro alignment matrix
	 for (i = 0; i < 3; i++ )
 268:	f109 0901 	add.w	r9, r9, #1	; 0x1
 26c:	f1b9 0f03 	cmp.w	r9, #3	; 0x3
 270:	f108 080c 	add.w	r8, r8, #12	; 0xc
 274:	d1e3      	bne.n	23e <WriteConfigurationToFlash+0x23e>
 276:	f24f 096c 	movw	r9, #61548	; 0xf06c
 27a:	f04f 0800 	mov.w	r8, #0	; 0x0
 27e:	f6c0 0900 	movt	r9, #2048	; 0x800
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:419
				}
		  }
	 }
	 
	 // Magnetometer calibratin matrix
	 for (i = 0; i < 3; i++ )
 282:	ea4f 0288 	mov.w	r2, r8, lsl #2
 286:	ea4f 1308 	mov.w	r3, r8, lsl #4
 28a:	1a9b      	subs	r3, r3, r2
 28c:	3378      	adds	r3, #120
 28e:	18e7      	adds	r7, r4, r3
 290:	464d      	mov	r5, r9
 292:	2600      	movs	r6, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:426
		  for (j = 0; j < 3; j++ )
		  {
				fToInt.float_val = gConfig.mag_cal.data[i][j];
				FLASHData = fToInt.int32_val;
				
				FLASHStatus = FLASH_ProgramWord(MAG_CAL_START_ADDR + 4*(3*i+j), FLASHData);
 294:	4628      	mov	r0, r5
 296:	6839      	ldr	r1, [r7, #0]
 298:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:428
				
				if( FLASHStatus != FLASH_COMPLETE )
 29c:	2804      	cmp	r0, #4
 29e:	f47f aec7 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:421
	 }
	 
	 // Magnetometer calibratin matrix
	 for (i = 0; i < 3; i++ )
	 {
		  for (j = 0; j < 3; j++ )
 2a2:	3601      	adds	r6, #1
 2a4:	3704      	adds	r7, #4
 2a6:	3504      	adds	r5, #4
 2a8:	2e03      	cmp	r6, #3
 2aa:	d1f3      	bne.n	294 <WriteConfigurationToFlash+0x294>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:419
				}
		  }
	 }
	 
	 // Magnetometer calibratin matrix
	 for (i = 0; i < 3; i++ )
 2ac:	f108 0801 	add.w	r8, r8, #1	; 0x1
 2b0:	f1b8 0f03 	cmp.w	r8, #3	; 0x3
 2b4:	f109 090c 	add.w	r9, r9, #12	; 0xc
 2b8:	d1e3      	bne.n	282 <WriteConfigurationToFlash+0x282>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:439
	 
	 // Process covariance
	 fToInt.float_val = gConfig.process_covariance;
	 FLASHData = fToInt.int32_val;
	 
	 FLASHStatus = FLASH_ProgramWord(PROCESS_COV_ADDR, FLASHData);
 2ba:	f24f 0090 	movw	r0, #61584	; 0xf090
 2be:	f6c0 0000 	movt	r0, #2048	; 0x800
 2c2:	6a61      	ldr	r1, [r4, #36]
 2c4:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:436
				}
		  }
	 }
	 
	 // Process covariance
	 fToInt.float_val = gConfig.process_covariance;
 2c8:	f240 0500 	movw	r5, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:441
	 FLASHData = fToInt.int32_val;
	 
	 FLASHStatus = FLASH_ProgramWord(PROCESS_COV_ADDR, FLASHData);
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 2cc:	2804      	cmp	r0, #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:436
				}
		  }
	 }
	 
	 // Process covariance
	 fToInt.float_val = gConfig.process_covariance;
 2ce:	f2c0 0500 	movt	r5, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:441
	 FLASHData = fToInt.int32_val;
	 
	 FLASHStatus = FLASH_ProgramWord(PROCESS_COV_ADDR, FLASHData);
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 2d2:	f47f aead 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:450
	 
	 // Magnetometer covariance
	 fToInt.float_val = gConfig.mag_covariance;
	 FLASHData = fToInt.int32_val;
	 
	 FLASHStatus = FLASH_ProgramWord(MAG_COV_ADDR, FLASHData);
 2d6:	f24f 0094 	movw	r0, #61588	; 0xf094
 2da:	f6c0 0000 	movt	r0, #2048	; 0x800
 2de:	6ae9      	ldr	r1, [r5, #44]
 2e0:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:452
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 2e4:	2804      	cmp	r0, #4
 2e6:	f47f aea3 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:461
	 
	 // Accelerometer covariance
	 fToInt.float_val = gConfig.accel_covariance;
	 FLASHData = fToInt.int32_val;
	 
	 FLASHStatus = FLASH_ProgramWord(ACCEL_COV_ADDR, FLASHData);
 2ea:	f24f 0098 	movw	r0, #61592	; 0xf098
 2ee:	f6c0 0000 	movt	r0, #2048	; 0x800
 2f2:	6aa9      	ldr	r1, [r5, #40]
 2f4:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:463
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 2f8:	2804      	cmp	r0, #4
 2fa:	f47f ae99 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:470
		  return FLASHStatus;
	 }
	 
	 // Magnetometer reference vector
	 FLASHData = (((uint32_t)gConfig.mag_ref_vector[0]) & 0x0FFFF) | ((uint32_t)gConfig.mag_ref_vector[1] << 16);
	 FLASHStatus = FLASH_ProgramWord(MAG_REF_VECT_ADDR1, FLASHData);
 2fe:	f9b5 309e 	ldrsh.w	r3, [r5, #158]
 302:	f8b5 109c 	ldrh.w	r1, [r5, #156]
 306:	f24f 009c 	movw	r0, #61596	; 0xf09c
 30a:	f6c0 0000 	movt	r0, #2048	; 0x800
 30e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 312:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:472
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 316:	2804      	cmp	r0, #4
 318:	f47f ae8a 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:478
	 {
		  return FLASHStatus;
	 }
	 
	 FLASHData = ((uint32_t)gConfig.mag_ref_vector[2]);
	 FLASHStatus = FLASH_ProgramWord(MAG_REF_VECT_ADDR2, FLASHData);
 31c:	f24f 00a0 	movw	r0, #61600	; 0xf0a0
 320:	f6c0 0000 	movt	r0, #2048	; 0x800
 324:	f9b5 10a0 	ldrsh.w	r1, [r5, #160]
 328:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:480
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 32c:	2804      	cmp	r0, #4
 32e:	f47f ae7f 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:487
		  return FLASHStatus;
	 }
	 
	 // Accel ref vector
	 FLASHData = (((uint32_t)gConfig.accel_ref_vector[0]) & 0x0FFFF) | ((uint32_t)gConfig.accel_ref_vector[1] << 16);
	 FLASHStatus = FLASH_ProgramWord(ACCEL_REF_VECT_ADDR1, FLASHData);
 332:	f9b5 30a4 	ldrsh.w	r3, [r5, #164]
 336:	f8b5 10a2 	ldrh.w	r1, [r5, #162]
 33a:	f24f 00a4 	movw	r0, #61604	; 0xf0a4
 33e:	f6c0 0000 	movt	r0, #2048	; 0x800
 342:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 346:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:489
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 34a:	2804      	cmp	r0, #4
 34c:	f47f ae70 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:495
	 {
		  return FLASHStatus;
	 }
	 
	 FLASHData = ((uint32_t)gConfig.accel_ref_vector[2]);
	 FLASHStatus = FLASH_ProgramWord(ACCEL_REF_VECT_ADDR2, FLASHData);
 350:	f24f 00a8 	movw	r0, #61608	; 0xf0a8
 354:	f6c0 0000 	movt	r0, #2048	; 0x800
 358:	f9b5 10a6 	ldrsh.w	r1, [r5, #166]
 35c:	f7ff fffe 	bl	0 <FLASH_ProgramWord>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:497
	 
	 if( FLASHStatus != FLASH_COMPLETE )
 360:	2804      	cmp	r0, #4
 362:	f47f ae65 	bne.w	30 <WriteConfigurationToFlash+0x30>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_config.c:502
	 {
		  return FLASHStatus;
	 }
	 
	 FLASH_Lock();
 366:	f7ff fffe 	bl	0 <FLASH_Lock>
 36a:	2004      	movs	r0, #4
 36c:	e660      	b.n	30 <FLASH_Lock+0x30>
 36e:	46c0      	nop			(mov r8, r8)
