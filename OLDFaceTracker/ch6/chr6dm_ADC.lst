
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\chr6dm_ADC.o:     file format elf32-littlearm
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease\chr6dm_ADC.o

Disassembly of section .text.process_input_buffers:

00000000 <process_input_buffers>:
process_input_buffers():
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:61

	 This function also handles automatic bias calculation for the rate gyros.

*******************************************************************************/
int32_t process_input_buffers( int16_t* data_output )
{
   0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:71
	 uint16_t gyro_ref_voltage;
	 	 
	 // ----------------------------------------------------------------------------------
	 // Determine whether gPingBuffer or gPongBuffer are ready.  If not, return 0
	 // ----------------------------------------------------------------------------------
	 if( !gPingBufferReady && !gPongBufferReady )
   4:	f240 0200 	movw	r2, #0	; 0x0
   8:	f2c0 0200 	movt	r2, #0	; 0x0
   c:	6813      	ldr	r3, [r2, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:61

	 This function also handles automatic bias calculation for the rate gyros.

*******************************************************************************/
int32_t process_input_buffers( int16_t* data_output )
{
   e:	b08f      	sub	sp, #60
  10:	4682      	mov	sl, r0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:71
	 uint16_t gyro_ref_voltage;
	 	 
	 // ----------------------------------------------------------------------------------
	 // Determine whether gPingBuffer or gPongBuffer are ready.  If not, return 0
	 // ----------------------------------------------------------------------------------
	 if( !gPingBufferReady && !gPongBufferReady )
  12:	b91b      	cbnz	r3, 1c <process_input_buffers+0x1c>
  14:	6850      	ldr	r0, [r2, #4]
  16:	2800      	cmp	r0, #0
  18:	f000 80ce 	beq.w	1b8 <process_input_buffers+0x1b8>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:78
		  return 0;
	 }
	 else
	 {		  
		  // Determine which buffer is ready.
		  if( gPingBufferReady )
  1c:	6813      	ldr	r3, [r2, #0]
  1e:	f240 0100 	movw	r1, #0	; 0x0
  22:	f2c0 0100 	movt	r1, #0	; 0x0
  26:	2b00      	cmp	r3, #0
  28:	f040 80c9 	bne.w	1be <process_input_buffers+0x1be>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:85
				gPingBufferReady = 0;
				input_buffer = gPingBuffer;
		  }
		  else
		  {
				gPongBufferReady = 0;
  2c:	604b      	str	r3, [r1, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:86
				input_buffer = gPongBuffer;
  2e:	f240 0300 	movw	r3, #0	; 0x0
  32:	f2c0 0300 	movt	r3, #0	; 0x0
  36:	685b      	ldr	r3, [r3, #4]
  38:	2200      	movs	r2, #0
  3a:	ac06      	add	r4, sp, #24
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:95
		  // Decimation step.  Take ADC data in buffer, convert to signed data, sum, and decimate.
		  // ---------------------------------------------------------------------------------------	  
		  // Pre-initialize sum data
		  for( i = 0; i < CHANNEL_COUNT; i++ )
		  {
				sum_data[i] = 0;
  3c:	4611      	mov	r1, r2
  3e:	50a1      	str	r1, [r4, r2]
  40:	3204      	adds	r2, #4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:93
		  
		  // ---------------------------------------------------------------------------------------
		  // Decimation step.  Take ADC data in buffer, convert to signed data, sum, and decimate.
		  // ---------------------------------------------------------------------------------------	  
		  // Pre-initialize sum data
		  for( i = 0; i < CHANNEL_COUNT; i++ )
  42:	2a20      	cmp	r2, #32
  44:	d1fb      	bne.n	3e <process_input_buffers+0x3e>
  46:	9c06      	ldr	r4, [sp, #24]
  48:	9d07      	ldr	r5, [sp, #28]
  4a:	9e08      	ldr	r6, [sp, #32]
  4c:	9f09      	ldr	r7, [sp, #36]
  4e:	f8dd c028 	ldr.w	ip, [sp, #40]
  52:	f8dd 802c 	ldr.w	r8, [sp, #44]
  56:	4618      	mov	r0, r3
  58:	f503 5900 	add.w	r9, r3, #8192	; 0x2000
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:101
		  }
		  
		  // Convert to signed numbers and sum data
		  for( i = 0; i < SAMPLES_PER_BUFFER; i++ )
		  {
				gyro_ref_voltage = input_buffer[CHANNEL_COUNT*i + 6];
  5c:	8981      	ldrh	r1, [r0, #12]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:103
				
				sum_data[0] += (int32_t)(input_buffer[CHANNEL_COUNT*i] - 2048);
  5e:	8803      	ldrh	r3, [r0, #0]
  60:	f5a4 6200 	sub.w	r2, r4, #2048	; 0x800
  64:	b29b      	uxth	r3, r3
  66:	18d4      	adds	r4, r2, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:104
				sum_data[1] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 1] - 2048);
  68:	8843      	ldrh	r3, [r0, #2]
  6a:	f5a5 6200 	sub.w	r2, r5, #2048	; 0x800
  6e:	b29b      	uxth	r3, r3
  70:	18d5      	adds	r5, r2, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:105
				sum_data[2] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 2] - 2048);
  72:	8883      	ldrh	r3, [r0, #4]
  74:	f5a6 6200 	sub.w	r2, r6, #2048	; 0x800
  78:	b29b      	uxth	r3, r3
  7a:	18d6      	adds	r6, r2, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:107

				sum_data[3] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 3] - gyro_ref_voltage);
  7c:	88c3      	ldrh	r3, [r0, #6]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:101
		  }
		  
		  // Convert to signed numbers and sum data
		  for( i = 0; i < SAMPLES_PER_BUFFER; i++ )
		  {
				gyro_ref_voltage = input_buffer[CHANNEL_COUNT*i + 6];
  7e:	b289      	uxth	r1, r1
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:107
				
				sum_data[0] += (int32_t)(input_buffer[CHANNEL_COUNT*i] - 2048);
				sum_data[1] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 1] - 2048);
				sum_data[2] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 2] - 2048);

				sum_data[3] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 3] - gyro_ref_voltage);
  80:	b29b      	uxth	r3, r3
  82:	19db      	adds	r3, r3, r7
  84:	1a5f      	subs	r7, r3, r1
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:108
				sum_data[4] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 4] - gyro_ref_voltage);
  86:	8903      	ldrh	r3, [r0, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:103
		  // Convert to signed numbers and sum data
		  for( i = 0; i < SAMPLES_PER_BUFFER; i++ )
		  {
				gyro_ref_voltage = input_buffer[CHANNEL_COUNT*i + 6];
				
				sum_data[0] += (int32_t)(input_buffer[CHANNEL_COUNT*i] - 2048);
  88:	9406      	str	r4, [sp, #24]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:108
				sum_data[1] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 1] - 2048);
				sum_data[2] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 2] - 2048);

				sum_data[3] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 3] - gyro_ref_voltage);
				sum_data[4] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 4] - gyro_ref_voltage);
  8a:	b29b      	uxth	r3, r3
  8c:	4463      	add	r3, ip
  8e:	ebc1 0c03 	rsb	ip, r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:109
				sum_data[5] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 5] - gyro_ref_voltage);				
  92:	8943      	ldrh	r3, [r0, #10]
  94:	3010      	adds	r0, #16
  96:	b29b      	uxth	r3, r3
  98:	4443      	add	r3, r8
  9a:	ebc1 0803 	rsb	r8, r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:99
		  {
				sum_data[i] = 0;
		  }
		  
		  // Convert to signed numbers and sum data
		  for( i = 0; i < SAMPLES_PER_BUFFER; i++ )
  9e:	4548      	cmp	r0, r9
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:104
		  {
				gyro_ref_voltage = input_buffer[CHANNEL_COUNT*i + 6];
				
				sum_data[0] += (int32_t)(input_buffer[CHANNEL_COUNT*i] - 2048);
				sum_data[1] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 1] - 2048);
  a0:	9507      	str	r5, [sp, #28]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:105
				sum_data[2] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 2] - 2048);
  a2:	9608      	str	r6, [sp, #32]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:107

				sum_data[3] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 3] - gyro_ref_voltage);
  a4:	9709      	str	r7, [sp, #36]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:108
				sum_data[4] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 4] - gyro_ref_voltage);
  a6:	f8cd c028 	str.w	ip, [sp, #40]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:109
				sum_data[5] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 5] - gyro_ref_voltage);				
  aa:	f8cd 802c 	str.w	r8, [sp, #44]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:99
		  {
				sum_data[i] = 0;
		  }
		  
		  // Convert to signed numbers and sum data
		  for( i = 0; i < SAMPLES_PER_BUFFER; i++ )
  ae:	d1d5      	bne.n	5c <process_input_buffers+0x5c>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:114
				sum_data[5] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 5] - gyro_ref_voltage);				
		  }
	  
		  // Decimate
		  signed_decimated[0] = (int16_t)((sum_data[0] >> 5) & 0x0FFFF);		// Accel X
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
  b0:	116a      	asrs	r2, r5, #5
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:113
				sum_data[4] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 4] - gyro_ref_voltage);
				sum_data[5] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 5] - gyro_ref_voltage);				
		  }
	  
		  // Decimate
		  signed_decimated[0] = (int16_t)((sum_data[0] >> 5) & 0x0FFFF);		// Accel X
  b2:	1163      	asrs	r3, r4, #5
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:114
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
  b4:	b292      	uxth	r2, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:113
				sum_data[4] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 4] - gyro_ref_voltage);
				sum_data[5] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 5] - gyro_ref_voltage);				
		  }
	  
		  // Decimate
		  signed_decimated[0] = (int16_t)((sum_data[0] >> 5) & 0x0FFFF);		// Accel X
  b6:	b29b      	uxth	r3, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:114
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
  b8:	9202      	str	r2, [sp, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:116
		  signed_decimated[2] = (int16_t)((sum_data[2] >> 5) & 0x0FFFF);		// Accel Z
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
  ba:	117a      	asrs	r2, r7, #5
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:113
				sum_data[4] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 4] - gyro_ref_voltage);
				sum_data[5] += (int32_t)(input_buffer[CHANNEL_COUNT*i + 5] - gyro_ref_voltage);				
		  }
	  
		  // Decimate
		  signed_decimated[0] = (int16_t)((sum_data[0] >> 5) & 0x0FFFF);		// Accel X
  bc:	9301      	str	r3, [sp, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:116
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
		  signed_decimated[2] = (int16_t)((sum_data[2] >> 5) & 0x0FFFF);		// Accel Z
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
  be:	b297      	uxth	r7, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:115
		  }
	  
		  // Decimate
		  signed_decimated[0] = (int16_t)((sum_data[0] >> 5) & 0x0FFFF);		// Accel X
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
		  signed_decimated[2] = (int16_t)((sum_data[2] >> 5) & 0x0FFFF);		// Accel Z
  c0:	1173      	asrs	r3, r6, #5
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:118
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
		  signed_decimated[4] = (int16_t)((sum_data[4] >> 5) & 0x0FFFF);		// Gyro X
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
  c2:	ea4f 1268 	mov.w	r2, r8, asr #5
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:115
		  }
	  
		  // Decimate
		  signed_decimated[0] = (int16_t)((sum_data[0] >> 5) & 0x0FFFF);		// Accel X
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
		  signed_decimated[2] = (int16_t)((sum_data[2] >> 5) & 0x0FFFF);		// Accel Z
  c6:	b29b      	uxth	r3, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:118
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
		  signed_decimated[4] = (int16_t)((sum_data[4] >> 5) & 0x0FFFF);		// Gyro X
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
  c8:	b294      	uxth	r4, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:121
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
  ca:	f240 0200 	movw	r2, #0	; 0x0
  ce:	f2c0 0200 	movt	r2, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:115
		  }
	  
		  // Decimate
		  signed_decimated[0] = (int16_t)((sum_data[0] >> 5) & 0x0FFFF);		// Accel X
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
		  signed_decimated[2] = (int16_t)((sum_data[2] >> 5) & 0x0FFFF);		// Accel Z
  d2:	9303      	str	r3, [sp, #12]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:121
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
		  signed_decimated[4] = (int16_t)((sum_data[4] >> 5) & 0x0FFFF);		// Gyro X
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
  d4:	9801      	ldr	r0, [sp, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:117
		  // Decimate
		  signed_decimated[0] = (int16_t)((sum_data[0] >> 5) & 0x0FFFF);		// Accel X
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
		  signed_decimated[2] = (int16_t)((sum_data[2] >> 5) & 0x0FFFF);		// Accel Z
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
		  signed_decimated[4] = (int16_t)((sum_data[4] >> 5) & 0x0FFFF);		// Gyro X
  d6:	ea4f 136c 	mov.w	r3, ip, asr #5
  da:	b29d      	uxth	r5, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:121
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
  dc:	8813      	ldrh	r3, [r2, #0]
  de:	b280      	uxth	r0, r0
  e0:	1ac3      	subs	r3, r0, r3
  e2:	f8aa 3000 	strh.w	r3, [sl]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:122
		  data_output[1] = signed_decimated[1] - gConfig.y_accel_bias;
  e6:	9b02      	ldr	r3, [sp, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:121
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
		  signed_decimated[4] = (int16_t)((sum_data[4] >> 5) & 0x0FFFF);		// Gyro X
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
  e8:	9004      	str	r0, [sp, #16]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:122
		  data_output[1] = signed_decimated[1] - gConfig.y_accel_bias;
  ea:	b29b      	uxth	r3, r3
  ec:	9305      	str	r3, [sp, #20]
  ee:	9805      	ldr	r0, [sp, #20]
  f0:	8853      	ldrh	r3, [r2, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:124
		  data_output[2] = signed_decimated[2] - gConfig.z_accel_bias;
		  data_output[3] = signed_decimated[3] - gConfig.y_gyro_bias;
  f2:	fa1f fb87 	uxth.w	fp, r7
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:122
		  signed_decimated[4] = (int16_t)((sum_data[4] >> 5) & 0x0FFFF);		// Gyro X
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
		  data_output[1] = signed_decimated[1] - gConfig.y_accel_bias;
  f6:	1ac3      	subs	r3, r0, r3
  f8:	f8aa 3002 	strh.w	r3, [sl, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:123
		  data_output[2] = signed_decimated[2] - gConfig.z_accel_bias;
  fc:	9b03      	ldr	r3, [sp, #12]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:125
		  data_output[3] = signed_decimated[3] - gConfig.y_gyro_bias;
		  data_output[4] = signed_decimated[4] - gConfig.x_gyro_bias;
  fe:	fa1f f985 	uxth.w	r9, r5
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:123
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
		  data_output[1] = signed_decimated[1] - gConfig.y_accel_bias;
		  data_output[2] = signed_decimated[2] - gConfig.z_accel_bias;
 102:	fa1f fc83 	uxth.w	ip, r3
 106:	8893      	ldrh	r3, [r2, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:119
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
		  signed_decimated[2] = (int16_t)((sum_data[2] >> 5) & 0x0FFFF);		// Accel Z
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
		  signed_decimated[4] = (int16_t)((sum_data[4] >> 5) & 0x0FFFF);		// Gyro X
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
 108:	990c      	ldr	r1, [sp, #48]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:123
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
		  data_output[1] = signed_decimated[1] - gConfig.y_accel_bias;
		  data_output[2] = signed_decimated[2] - gConfig.z_accel_bias;
 10a:	ebc3 030c 	rsb	r3, r3, ip
 10e:	f8aa 3004 	strh.w	r3, [sl, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:124
		  data_output[3] = signed_decimated[3] - gConfig.y_gyro_bias;
 112:	8ad3      	ldrh	r3, [r2, #22]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:126
		  data_output[4] = signed_decimated[4] - gConfig.x_gyro_bias;
		  data_output[5] = signed_decimated[5] - gConfig.z_gyro_bias;
 114:	fa1f f884 	uxth.w	r8, r4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:124
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
		  data_output[1] = signed_decimated[1] - gConfig.y_accel_bias;
		  data_output[2] = signed_decimated[2] - gConfig.z_accel_bias;
		  data_output[3] = signed_decimated[3] - gConfig.y_gyro_bias;
 118:	ebc3 030b 	rsb	r3, r3, fp
 11c:	f8aa 3006 	strh.w	r3, [sl, #6]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:125
		  data_output[4] = signed_decimated[4] - gConfig.x_gyro_bias;
 120:	8a93      	ldrh	r3, [r2, #20]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:119
		  signed_decimated[1] = (int16_t)((sum_data[1] >> 5) & 0x0FFFF);		// Accel Y
		  signed_decimated[2] = (int16_t)((sum_data[2] >> 5) & 0x0FFFF);		// Accel Z
		  signed_decimated[3] = (int16_t)((sum_data[3] >> 5) & 0x0FFFF);		// Gyro Y
		  signed_decimated[4] = (int16_t)((sum_data[4] >> 5) & 0x0FFFF);		// Gyro X
		  signed_decimated[5] = (int16_t)((sum_data[5] >> 5) & 0x0FFFF);		// Gyro Z
		  signed_decimated[6] = (int16_t)((sum_data[6] >> 5) & 0x0FFFF);		// Temperature
 122:	1149      	asrs	r1, r1, #5
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:125
		  
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
		  data_output[1] = signed_decimated[1] - gConfig.y_accel_bias;
		  data_output[2] = signed_decimated[2] - gConfig.z_accel_bias;
		  data_output[3] = signed_decimated[3] - gConfig.y_gyro_bias;
		  data_output[4] = signed_decimated[4] - gConfig.x_gyro_bias;
 124:	ebc3 0309 	rsb	r3, r3, r9
 128:	f8aa 3008 	strh.w	r3, [sl, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:126
		  data_output[5] = signed_decimated[5] - gConfig.z_gyro_bias;
 12c:	8b13      	ldrh	r3, [r2, #24]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:127
		  data_output[6] = signed_decimated[6];
 12e:	f8aa 100c 	strh.w	r1, [sl, #12]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:126
		  data_output[0] = signed_decimated[0] - gConfig.x_accel_bias;
		  data_output[1] = signed_decimated[1] - gConfig.y_accel_bias;
		  data_output[2] = signed_decimated[2] - gConfig.z_accel_bias;
		  data_output[3] = signed_decimated[3] - gConfig.y_gyro_bias;
		  data_output[4] = signed_decimated[4] - gConfig.x_gyro_bias;
		  data_output[5] = signed_decimated[5] - gConfig.z_gyro_bias;
 132:	ebc3 0308 	rsb	r3, r3, r8
 136:	f8aa 300a 	strh.w	r3, [sl, #10]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:132
		  data_output[6] = signed_decimated[6];
		  		  
	
		  // If the "zero gyro" command is enabled, then add the newest measurement
		  // to the avg. buffer
		  if( gZeroGyroEnable )
 13a:	f240 0300 	movw	r3, #0	; 0x0
 13e:	f2c0 0300 	movt	r3, #0	; 0x0
 142:	881a      	ldrh	r2, [r3, #0]
 144:	b1da      	cbz	r2, 17e <process_input_buffers+0x17e>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:134
		  {
				gZeroGyroSampleCount++;
 146:	f240 0300 	movw	r3, #0	; 0x0
 14a:	f2c0 0300 	movt	r3, #0	; 0x0
 14e:	8818      	ldrh	r0, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:136
				
				gZeroGyroAverages[0] += signed_decimated[3];
 150:	f240 0100 	movw	r1, #0	; 0x0
 154:	f2c0 0100 	movt	r1, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:134
	
		  // If the "zero gyro" command is enabled, then add the newest measurement
		  // to the avg. buffer
		  if( gZeroGyroEnable )
		  {
				gZeroGyroSampleCount++;
 158:	3001      	adds	r0, #1
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:136
				
				gZeroGyroAverages[0] += signed_decimated[3];
 15a:	680a      	ldr	r2, [r1, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:134
	
		  // If the "zero gyro" command is enabled, then add the newest measurement
		  // to the avg. buffer
		  if( gZeroGyroEnable )
		  {
				gZeroGyroSampleCount++;
 15c:	b280      	uxth	r0, r0
 15e:	8018      	strh	r0, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:136
				
				gZeroGyroAverages[0] += signed_decimated[3];
 160:	b23b      	sxth	r3, r7
 162:	189b      	adds	r3, r3, r2
 164:	600b      	str	r3, [r1, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:137
				gZeroGyroAverages[1] += signed_decimated[4];
 166:	684b      	ldr	r3, [r1, #4]
 168:	b22a      	sxth	r2, r5
 16a:	18d2      	adds	r2, r2, r3
 16c:	604a      	str	r2, [r1, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:138
				gZeroGyroAverages[2] += signed_decimated[5];
 16e:	688a      	ldr	r2, [r1, #8]
 170:	b223      	sxth	r3, r4
 172:	189b      	adds	r3, r3, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:140
				
				if( gZeroGyroSampleCount == GYRO_ZERO_SAMPLE_SIZE )
 174:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:138
		  {
				gZeroGyroSampleCount++;
				
				gZeroGyroAverages[0] += signed_decimated[3];
				gZeroGyroAverages[1] += signed_decimated[4];
				gZeroGyroAverages[2] += signed_decimated[5];
 178:	608b      	str	r3, [r1, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:140
				
				if( gZeroGyroSampleCount == GYRO_ZERO_SAMPLE_SIZE )
 17a:	f000 8081 	beq.w	280 <process_input_buffers+0x280>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:149
					 gGyrosCalibrated = 1;
				}
		  }
		  
		  // Self-test command
		  if( gSelfTestEnabled )
 17e:	f240 0300 	movw	r3, #0	; 0x0
 182:	f2c0 0300 	movt	r3, #0	; 0x0
 186:	881a      	ldrh	r2, [r3, #0]
 188:	b1aa      	cbz	r2, 1b6 <process_input_buffers+0x1b6>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:153
		  {
				// If self test was just enabled, sample
				// current outputs of sensors for comparison
				if( gSelfTestSamplesIgnored == 0 )
 18a:	f240 0600 	movw	r6, #0	; 0x0
 18e:	f2c0 0600 	movt	r6, #0	; 0x0
 192:	8833      	ldrh	r3, [r6, #0]
 194:	b9db      	cbnz	r3, 1ce <process_input_buffers+0x1ce>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:155
				{
					 gSelfTestResults[0] = signed_decimated[0];
 196:	9a01      	ldr	r2, [sp, #4]
 198:	f240 0300 	movw	r3, #0	; 0x0
 19c:	f2c0 0300 	movt	r3, #0	; 0x0
 1a0:	801a      	strh	r2, [r3, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:156
					 gSelfTestResults[1] = signed_decimated[1];
 1a2:	9802      	ldr	r0, [sp, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:157
					 gSelfTestResults[2] = signed_decimated[2];
 1a4:	9a03      	ldr	r2, [sp, #12]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:156
				// If self test was just enabled, sample
				// current outputs of sensors for comparison
				if( gSelfTestSamplesIgnored == 0 )
				{
					 gSelfTestResults[0] = signed_decimated[0];
					 gSelfTestResults[1] = signed_decimated[1];
 1a6:	8058      	strh	r0, [r3, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:157
					 gSelfTestResults[2] = signed_decimated[2];
 1a8:	809a      	strh	r2, [r3, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:158
					 gSelfTestResults[3] = signed_decimated[3];
 1aa:	80df      	strh	r7, [r3, #6]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:159
					 gSelfTestResults[4] = signed_decimated[4];
 1ac:	811d      	strh	r5, [r3, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:160
					 gSelfTestResults[5] = signed_decimated[5];
 1ae:	815c      	strh	r4, [r3, #10]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:205
					 
					 // Stop self test and send result packet
					 StopSelfTest( self_test_result );
				}
				
				gSelfTestSamplesIgnored++;
 1b0:	8833      	ldrh	r3, [r6, #0]
 1b2:	3301      	adds	r3, #1
 1b4:	8033      	strh	r3, [r6, #0]
 1b6:	2001      	movs	r0, #1
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:211
		  }
 
	 }
	 
	 return 1;
}
 1b8:	b00f      	add	sp, #60
 1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:81
	 {		  
		  // Determine which buffer is ready.
		  if( gPingBufferReady )
		  {
				gPingBufferReady = 0;
				input_buffer = gPingBuffer;
 1be:	f240 0300 	movw	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:80
	 else
	 {		  
		  // Determine which buffer is ready.
		  if( gPingBufferReady )
		  {
				gPingBufferReady = 0;
 1c2:	2200      	movs	r2, #0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:81
				input_buffer = gPingBuffer;
 1c4:	f2c0 0300 	movt	r3, #0	; 0x0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:80
	 else
	 {		  
		  // Determine which buffer is ready.
		  if( gPingBufferReady )
		  {
				gPingBufferReady = 0;
 1c8:	600a      	str	r2, [r1, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:81
				input_buffer = gPingBuffer;
 1ca:	681b      	ldr	r3, [r3, #0]
 1cc:	e734      	b.n	38 <process_input_buffers+0x38>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:164
					 gSelfTestResults[4] = signed_decimated[4];
					 gSelfTestResults[5] = signed_decimated[5];
				}
				// ignore SELF_TEST_IGNORE_SAMPLES beforetesting output for change. 
				// This allows the sensors time to react to the self-test signal.
				else if( gSelfTestSamplesIgnored == SELF_TEST_IGNORE_SAMPLES )
 1ce:	2bc8      	cmp	r3, #200
 1d0:	d1ee      	bne.n	1b0 <process_input_buffers+0x1b0>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:166
				{
					 gSelfTestResults[0] -= signed_decimated[0];
 1d2:	f240 0400 	movw	r4, #0	; 0x0
 1d6:	f2c0 0400 	movt	r4, #0	; 0x0
 1da:	8821      	ldrh	r1, [r4, #0]
 1dc:	9b04      	ldr	r3, [sp, #16]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:167
					 gSelfTestResults[1] -= signed_decimated[1];
 1de:	8860      	ldrh	r0, [r4, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:166
				}
				// ignore SELF_TEST_IGNORE_SAMPLES beforetesting output for change. 
				// This allows the sensors time to react to the self-test signal.
				else if( gSelfTestSamplesIgnored == SELF_TEST_IGNORE_SAMPLES )
				{
					 gSelfTestResults[0] -= signed_decimated[0];
 1e0:	1ac9      	subs	r1, r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:168
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
 1e2:	88a3      	ldrh	r3, [r4, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:167
				// ignore SELF_TEST_IGNORE_SAMPLES beforetesting output for change. 
				// This allows the sensors time to react to the self-test signal.
				else if( gSelfTestSamplesIgnored == SELF_TEST_IGNORE_SAMPLES )
				{
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
 1e4:	9a05      	ldr	r2, [sp, #20]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:168
					 gSelfTestResults[2] -= signed_decimated[2];
 1e6:	ebcc 0303 	rsb	r3, ip, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:167
				// ignore SELF_TEST_IGNORE_SAMPLES beforetesting output for change. 
				// This allows the sensors time to react to the self-test signal.
				else if( gSelfTestSamplesIgnored == SELF_TEST_IGNORE_SAMPLES )
				{
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
 1ea:	1a80      	subs	r0, r0, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:168
					 gSelfTestResults[2] -= signed_decimated[2];
 1ec:	80a3      	strh	r3, [r4, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:170
					 gSelfTestResults[3] -= signed_decimated[3];
					 gSelfTestResults[4] -= signed_decimated[4];
 1ee:	8923      	ldrh	r3, [r4, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:166
				}
				// ignore SELF_TEST_IGNORE_SAMPLES beforetesting output for change. 
				// This allows the sensors time to react to the self-test signal.
				else if( gSelfTestSamplesIgnored == SELF_TEST_IGNORE_SAMPLES )
				{
					 gSelfTestResults[0] -= signed_decimated[0];
 1f0:	8021      	strh	r1, [r4, #0]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:167
					 gSelfTestResults[1] -= signed_decimated[1];
 1f2:	8060      	strh	r0, [r4, #2]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:171
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
					 gSelfTestResults[4] -= signed_decimated[4];
					 gSelfTestResults[5] -= signed_decimated[5];
 1f4:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:180
					 // Check that the sensor outputs responded to the self-test signal
					 if( abs(gSelfTestResults[0]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = 0x01;
					 }
					 if( abs(gSelfTestResults[1]) < SELF_TEST_ACCEL_THRESHOLD )
 1f8:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:170
				{
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
					 gSelfTestResults[4] -= signed_decimated[4];
 1fc:	ebc9 0303 	rsb	r3, r9, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:171
					 gSelfTestResults[5] -= signed_decimated[5];
 200:	3103      	adds	r1, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:180
					 // Check that the sensor outputs responded to the self-test signal
					 if( abs(gSelfTestResults[0]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = 0x01;
					 }
					 if( abs(gSelfTestResults[1]) < SELF_TEST_ACCEL_THRESHOLD )
 202:	3003      	adds	r0, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:170
				{
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
					 gSelfTestResults[4] -= signed_decimated[4];
 204:	8123      	strh	r3, [r4, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:180
					 // Check that the sensor outputs responded to the self-test signal
					 if( abs(gSelfTestResults[0]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = 0x01;
					 }
					 if( abs(gSelfTestResults[1]) < SELF_TEST_ACCEL_THRESHOLD )
 206:	b280      	uxth	r0, r0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:171
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
					 gSelfTestResults[4] -= signed_decimated[4];
					 gSelfTestResults[5] -= signed_decimated[5];
 208:	f240 33e6 	movw	r3, #998	; 0x3e6
 20c:	b289      	uxth	r1, r1
 20e:	4299      	cmp	r1, r3
 210:	bf8c      	ite	hi
 212:	2100      	movhi	r1, #0
 214:	2101      	movls	r1, #1
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:169
				else if( gSelfTestSamplesIgnored == SELF_TEST_IGNORE_SAMPLES )
				{
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
 216:	88e2      	ldrh	r2, [r4, #6]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:180
					 // Check that the sensor outputs responded to the self-test signal
					 if( abs(gSelfTestResults[0]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = 0x01;
					 }
					 if( abs(gSelfTestResults[1]) < SELF_TEST_ACCEL_THRESHOLD )
 218:	4298      	cmp	r0, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:182
					 {
						  self_test_result = self_test_result | 0x02;
 21a:	bf9c      	itt	ls
 21c:	f041 0302 	orrls.w	r3, r1, #2	; 0x2
 220:	b299      	uxthls	r1, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:169
				else if( gSelfTestSamplesIgnored == SELF_TEST_IGNORE_SAMPLES )
				{
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
 222:	ebcb 0202 	rsb	r2, fp, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:184
					 }
					 if( abs(gSelfTestResults[1]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = self_test_result | 0x02;
					 }
					 if( abs(gSelfTestResults[2]) < SELF_TEST_ACCEL_THRESHOLD )
 226:	88a3      	ldrh	r3, [r4, #4]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:169
				else if( gSelfTestSamplesIgnored == SELF_TEST_IGNORE_SAMPLES )
				{
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
 228:	80e2      	strh	r2, [r4, #6]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:171
					 gSelfTestResults[4] -= signed_decimated[4];
					 gSelfTestResults[5] -= signed_decimated[5];
 22a:	8962      	ldrh	r2, [r4, #10]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:184
					 }
					 if( abs(gSelfTestResults[1]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = self_test_result | 0x02;
					 }
					 if( abs(gSelfTestResults[2]) < SELF_TEST_ACCEL_THRESHOLD )
 22c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:171
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
					 gSelfTestResults[4] -= signed_decimated[4];
					 gSelfTestResults[5] -= signed_decimated[5];
 230:	ebc8 0202 	rsb	r2, r8, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:184
					 }
					 if( abs(gSelfTestResults[1]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = self_test_result | 0x02;
					 }
					 if( abs(gSelfTestResults[2]) < SELF_TEST_ACCEL_THRESHOLD )
 234:	3303      	adds	r3, #3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:171
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
					 gSelfTestResults[4] -= signed_decimated[4];
					 gSelfTestResults[5] -= signed_decimated[5];
 236:	b295      	uxth	r5, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:184
					 }
					 if( abs(gSelfTestResults[1]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = self_test_result | 0x02;
					 }
					 if( abs(gSelfTestResults[2]) < SELF_TEST_ACCEL_THRESHOLD )
 238:	b29b      	uxth	r3, r3
 23a:	f240 32e6 	movw	r2, #998	; 0x3e6
 23e:	4293      	cmp	r3, r2
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:188
					 {
						  self_test_result = self_test_result | 0x04;
					 }
					 if( abs(gSelfTestResults[3]) < SELF_TEST_GYRO_THRESHOLD )
 240:	88e3      	ldrh	r3, [r4, #6]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:186
					 {
						  self_test_result = self_test_result | 0x02;
					 }
					 if( abs(gSelfTestResults[2]) < SELF_TEST_ACCEL_THRESHOLD )
					 {
						  self_test_result = self_test_result | 0x04;
 242:	bf98      	it	ls
 244:	f041 0104 	orrls.w	r1, r1, #4	; 0x4
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:188
					 }
					 if( abs(gSelfTestResults[3]) < SELF_TEST_GYRO_THRESHOLD )
 248:	33c7      	adds	r3, #199
 24a:	b29b      	uxth	r3, r3
 24c:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:192
					 {
						  self_test_result = self_test_result | 0x08;
					 }
					 if( abs(gSelfTestResults[4]) < SELF_TEST_GYRO_THRESHOLD )
 250:	8923      	ldrh	r3, [r4, #8]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:190
					 {
						  self_test_result = self_test_result | 0x04;
					 }
					 if( abs(gSelfTestResults[3]) < SELF_TEST_GYRO_THRESHOLD )
					 {
						  self_test_result = self_test_result | 0x08;
 252:	bf98      	it	ls
 254:	f041 0108 	orrls.w	r1, r1, #8	; 0x8
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:192
					 }
					 if( abs(gSelfTestResults[4]) < SELF_TEST_GYRO_THRESHOLD )
 258:	33c7      	adds	r3, #199
 25a:	b29b      	uxth	r3, r3
 25c:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:196
					 {
						  self_test_result = self_test_result | 0x10;
					 }
					 if( abs(gSelfTestResults[5]) < SELF_TEST_GYRO_THRESHOLD )
 260:	f105 03c7 	add.w	r3, r5, #199	; 0xc7
 264:	b29b      	uxth	r3, r3
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:194
					 {
						  self_test_result = self_test_result | 0x08;
					 }
					 if( abs(gSelfTestResults[4]) < SELF_TEST_GYRO_THRESHOLD )
					 {
						  self_test_result = self_test_result | 0x10;
 266:	bf98      	it	ls
 268:	f041 0110 	orrls.w	r1, r1, #16	; 0x10
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:196
					 }
					 if( abs(gSelfTestResults[5]) < SELF_TEST_GYRO_THRESHOLD )
 26c:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:198
					 {
						  self_test_result = self_test_result | 0x20;
 270:	bf98      	it	ls
 272:	f041 0120 	orrls.w	r1, r1, #32	; 0x20
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:171
					 gSelfTestResults[0] -= signed_decimated[0];
					 gSelfTestResults[1] -= signed_decimated[1];
					 gSelfTestResults[2] -= signed_decimated[2];
					 gSelfTestResults[3] -= signed_decimated[3];
					 gSelfTestResults[4] -= signed_decimated[4];
					 gSelfTestResults[5] -= signed_decimated[5];
 276:	8165      	strh	r5, [r4, #10]
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:202
					 {
						  self_test_result = self_test_result | 0x20;
					 }
					 
					 // Stop self test and send result packet
					 StopSelfTest( self_test_result );
 278:	4608      	mov	r0, r1
 27a:	f7ff fffe 	bl	0 <StopSelfTest>
 27e:	e797      	b.n	1b0 <process_input_buffers+0x1b0>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:142
				gZeroGyroAverages[1] += signed_decimated[4];
				gZeroGyroAverages[2] += signed_decimated[5];
				
				if( gZeroGyroSampleCount == GYRO_ZERO_SAMPLE_SIZE )
				{
					 StopGyroCalibration( );
 280:	f8cd c000 	str.w	ip, [sp]
 284:	f7ff fffe 	bl	0 <StopGyroCalibration>
C:\Users\Caleb\Documents\Ride\projects\CHR6dmRelease/chr6dm_ADC.c:144
					 
					 gGyrosCalibrated = 1;
 288:	f240 0300 	movw	r3, #0	; 0x0
 28c:	f2c0 0300 	movt	r3, #0	; 0x0
 290:	f04f 0001 	mov.w	r0, #1	; 0x1
 294:	8018      	strh	r0, [r3, #0]
 296:	f8dd c000 	ldr.w	ip, [sp]
 29a:	e770      	b.n	180 <process_input_buffers+0x180>
